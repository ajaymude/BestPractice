# comments 

print("hello \n new line")

input("what is your name ")

name = "ajay"
length = len(name)
print(length)


data types in python 
1 - string
2 - integer
3 - float
4 - boolean 



find the data type of the variable
type("hello")


convert the data Type
int("123")
float()
str()
bool()


mathematical operators
- + * /  ** 
round(12.3333 , 3)


// variable in the string 
"what is your {name}"




comparison operator 

< > <= >= == != 


if else 

# Example of if-else
num = 10
if num > 0:
    print("Positive number")
else:
    print("Non-positive number")

# Example of if-elif-else
num = -5
if num > 0:
    print("Positive number")
elif num == 0:
    print("Zero")
else:
    print("Negative number")

# Example of nested if-else
num = 15
if num > 0:
    print("Positive number")
    if num % 2 == 0:
        print("Even number")
    else:
        print("Odd number")
else:
    print("Non-positive number")







// logical operator 

and or not 




// genetate the random number in the python

import random

random_integer = random.randint(1,10)
print(random_integer)

random.random()
.uniform()



// list 

number_list = [1, 2, 2, 3]

# Accessing elements
print(number_list[1])  # Output: 2

# Updating elements
number_list[1] = 3  # [1, 3, 2, 3]

# Adding elements
number_list.append(4)  # Adds 4 at the end -> [1, 3, 2, 3, 4]
number_list.extend([1, 3, 4])  # Adds multiple elements -> [1, 3, 2, 3, 4, 1, 3, 4]

# Inserting at a specific index
number_list.insert(2, 99)  # Inserts 99 at index 2 -> [1, 3, 99, 2, 3, 4, 1, 3, 4]

# Removing elements
number_list.remove(3)  # Removes first occurrence of 3 -> [1, 99, 2, 3, 4, 1, 3, 4]
popped = number_list.pop()  # Removes last element and returns it -> popped = 4
popped_index = number_list.pop(2)  # Removes element at index 2 -> popped_index = 2

# Finding elements
index = number_list.index(3)  # Returns first index of 3 -> index = 3
count = number_list.count(3)  # Counts occurrences of 3 -> count = 2

# Sorting
number_list.sort()  # Sorts the list in ascending order
number_list.sort(reverse=True)  # Sorts in descending order

# Reversing
number_list.reverse()  # Reverses the list order

# Copying a list
new_list = number_list.copy()  # Creates a copy of the list

# Clearing the list
number_list.clear()  # Removes all elements -> []

# List Comprehension (not a method, but useful)
squared = [x**2 for x in range(5)]  # Creates a new list -> [0, 1, 4, 9, 16]

# List slicing
subset = number_list[1:3]  # Gets elements from index 1 to 2

# Nested lists
nested_list = [[1, 2], [3, 4]]
print(nested_list[0][1])  # Accessing nested elements -> Output: 2

# Using list() constructor
empty_list = list()  # Creates an empty list
converted_list = list("hello")  # Converts string to list -> ['h', 'e', 'l', 'l', 'o']

print(number_list)  # Output: []
















// loops in the python 

# 1. Basic for loop
for i in range(5):
    print(i, end=" ")  # Output: 0 1 2 3 4
print()

# 2. Looping through a list
numbers = [10, 20, 30, 40]
for num in numbers:
    print(num, end=" ")  # Output: 10 20 30 40
print()

# 3. Looping through a string
word = "Python"
for char in word:
    print(char, end=" ")  # Output: P y t h o n
print()

# 4. Looping through a dictionary (keys)
person = {"name": "Alice", "age": 25, "city": "New York"}
for key in person:
    print(key, end=" ")  # Output: name age city
print()

# 5. Looping through a dictionary (values)
for value in person.values():
    print(value, end=" ")  # Output: Alice 25 New York
print()

# 6. Looping through a dictionary (keys & values)
for key, value in person.items():
    print(f"{key}: {value}", end=" | ")  # Output: name: Alice | age: 25 | city: New York |
print()

# 7. Looping with enumerate (index + value)
fruits = ["apple", "banana", "cherry"]
for index, fruit in enumerate(fruits):
    print(f"{index}: {fruit}", end=" | ")  # Output: 0: apple | 1: banana | 2: cherry |
print()

# 8. Looping with range(start, stop, step)
for i in range(1, 10, 2):
    print(i, end=" ")  # Output: 1 3 5 7 9
print()

# 9. Looping through a set (unordered)
unique_numbers = {5, 3, 8, 2}
for num in unique_numbers:
    print(num, end=" ")  # Output: Random order (e.g., 8 2 3 5)
print()

# 10. Looping through a tuple
tup = (100, 200, 300)
for item in tup:
    print(item, end=" ")  # Output: 100 200 300
print()

# 11. Nested for loop
for i in range(3):
    for j in range(3):
        print(f"({i},{j})", end=" ")  # Output: (0,0) (0,1) (0,2) (1,0) ...
print()

# 12. Using break in for loop
for num in range(10):
    if num == 5:
        break
    print(num, end=" ")  # Output: 0 1 2 3 4
print()

# 13. Using continue in for loop
for num in range(10):
    if num == 5:
        continue
    print(num, end=" ")  # Output: 0 1 2 3 4 6 7 8 9
print()

# 14. Using else with for loop
for num in range(5):
    print(num, end=" ")  # Output: 0 1 2 3 4
else:
    print("\nLoop completed!")  # Output: Loop completed!
    
# 15. Using zip() to iterate over multiple lists
names = ["Alice", "Bob", "Charlie"]
ages = [25, 30, 35]
for name, age in zip(names, ages):
    print(f"{name} is {age} years old.", end=" | ")  # Output: Alice is 25 | Bob is 30 | Charlie is 35 |
print()

# 16. List comprehension in loops
squares = [x**2 for x in range(5)]
print(squares)  # Output: [0, 1, 4, 9, 16]

# 17. Dictionary comprehension
squared_dict = {x: x**2 for x in range(5)}
print(squared_dict)  # Output: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}

# 18. Iterating over an iterator using for loop
my_iter = iter([1, 2, 3])
for num in my_iter:
    print(num, end=" ")  # Output: 1 2 3
print()

# 19. Using for loop with range in reverse order
for i in range(5, 0, -1):
    print(i, end=" ")  # Output: 5 4 3 2 1
print()

# 20. Using for loop with itertools for infinite iteration
import itertools
count = 0
for num in itertools.count(10, 5):  # Starts from 10, increments by 5
    print(num, end=" ")  # Output: 10 15 20 25...
    count += 1
    if count == 5:
        break  # Stop after 5 iterations
print()



