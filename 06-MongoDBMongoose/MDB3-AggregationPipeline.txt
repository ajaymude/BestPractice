//Common Aggregation Stages , lookup

Stage	Description
$match	Filters documents based on specified conditions.
$group	Groups documents by a specified expression and applies aggregate operations.
$project	Modifies the shape of the documents, such as including or excluding fields.
$sort	Sorts documents by specified fields.
$limit	Limits the number of documents in the output.
$skip	Skips a specified number of documents.
$unwind	Deconstructs an array field and outputs a document for each element.
$lookup	Performs a left outer join to another collection.
$addFields	Adds new fields or modifies existing fields.
$replaceRoot	Replaces the root document with a new document or field.
$facet	Runs multiple aggregation pipelines in parallel.
$count	Counts the number of documents in the pipeline and outputs the count.



db.orders.aggregate([
  { $match: { status: "completed" } }
]);


db.orders.aggregate([
  { $group: { _id: "$status", totalAmount: { $sum: "$amount" } } }
]);



// example 

{
  "_id": ObjectId("..."),
  "item": "ABC Widget",
  "price": 10,
  "quantity": 5,
  "date": ISODate("2024-01-15T10:00:00Z"),
  "region": "East"
}



db.sales.aggregate([
  {
    $match: {
      region: "East"
    }
  },
  {
    $group: {
      _id: "$item",  // Group by item name
      totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } } // Calculate total revenue
    }
  }
])



[
  { "item": "ABC Widget", "price": 10, "quantity": 5, "region": "East" },
  { "item": "XYZ Gadget", "price": 20, "quantity": 2, "region": "East" },
  { "item": "ABC Widget", "price": 10, "quantity": 3, "region": "East" },
  { "item": "PQR Thing", "price": 5, "quantity": 10, "region": "West" }, // Not in "East"
  { "item": "XYZ Gadget", "price": 20, "quantity": 1, "region": "East" }
]


[
  { "_id": "ABC Widget", "totalRevenue": 80 }, // (10 * 5) + (10 * 3)
  { "_id": "XYZ Gadget", "totalRevenue": 60 }  // (20 * 2) + (20 * 1)
]




db.sales.aggregate([
  {
    $match: {
      region: "East"
    }
  },
  {
    $group: {
      _id: "$item",
      totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } }
    }
  },
  {
    $sort: {
      totalRevenue: -1 // -1 for descending order, 1 for ascending
    }
  }
])



[
  { "item": "ABC Widget", "price": 10, "quantity": 5, "region": "East" },
  { "item": "XYZ Gadget", "price": 20, "quantity": 2, "region": "East" },
  { "item": "ABC Widget", "price": 10, "quantity": 3, "region": "East" },
  { "item": "PQR Thing", "price": 5, "quantity": 10, "region": "West" }, // Not in "East"
  { "item": "XYZ Gadget", "price": 20, "quantity": 1, "region": "East" }
]


[
  { "_id": "XYZ Gadget", "totalRevenue": 60 },  // (20 * 2) + (20 * 1)
  { "_id": "ABC Widget", "totalRevenue": 50 }   // (10 * 2) + (10 * 3)
]

























db.orders.aggregate([
  { $sort: { amount: -1 } } // Sort by `amount` in descending order
]);































db.orders.aggregate([
  { $project: { _id: 0, orderId: 1, totalAmount: 1, status: 1 } }
])



db.orders.aggregate([
  { $sort: { totalAmount: -1 } } // Sort by 'totalAmount' in descending order
])









db.orders.aggregate([
  { $addFields: { totalWithTax: { $multiply: ["$totalAmount", 1.1] } } } // Add 'totalWithTax' field
])






db.orders.aggregate([
  { $match: { status: "completed" } },  // Filter completed orders
  { $group: { _id: "$customerId", totalAmount: { $sum: "$totalAmount" } } },  // Group by customer and sum totalAmount
  { $sort: { totalAmount: -1 } }, // Sort by totalAmount in descending order
  { $project: { _id: 0, customerId: "$_id", totalAmount: 1 } }  // Exclude _id, include customerId and totalAmount
])
 





// for two collection  

db.orders.aggregate([
  {
    $lookup: {
      from: "customers",       // The collection to join with
      localField: "customerId", // Field in the 'orders' collection
      foreignField: "_id",     // Field in the 'customers' collection
      as: "customerDetails"    // The name of the array field to add the matching documents to
    }
  }
])




db.users.aggregate([
  {
    $bucket: {
      groupBy: "$age", // Group by the age field
      boundaries: [0, 18, 35, 50, 100], // Define the age ranges
      default: "Other", // If age is outside these ranges, categorize as "Other"
      output: {
        count: { $sum: 1 }, // Count the number of users in each bucket
        avgAge: { $avg: "$age" } // Calculate the average age for each bucket
      }
    }
  }
])





db.students.aggregate([
  {
    $bucketAuto: {
      groupBy: "$score", // Group by the score field
      buckets: 5, // Automatically divide the scores into 5 buckets
      output: {
        count: { $sum: 1 }, // Count the number of students in each bucket
        avgScore: { $avg: "$score" } // Calculate the average score for each bucket
      }
    }
  }
])




db.orders.aggregate([
  {
    $addFields: {
      totalWithTax: { $multiply: ["$totalAmount", { $add: [1, "$taxRate"] }] }
    }
  }
])



db.orders.aggregate([
  {
    $addFields: {
      status: {
        $cond: {
          if: { $gt: ["$totalAmount", 1000] }, // if totalAmount > 1000
          then: "high value", // change status to "high value"
          else: "standard value" // else keep status as "standard value"
        }
      }
    }
  }
])



db.orders.aggregate([
  {
    $unwind: {
      path: "$items",
      includeArrayIndex: "itemIndex"
    }
  }
])



db.orders.aggregate([
  {
    $addFields: {
      totalPrice: { $multiply: ["$items.quantity", "$items.price"] } // Add totalPrice for each item
    }
  },
  {
    $unwind: "$items" // Unwind the 'items' array to separate each item into its own document
  }
])



db.sales.aggregate([
  {
    $group: {
      _id: "$productId", // Group by productId
      totalSales: { $sum: "$amount" } // Sum the sales amount for each product
    }
  },
  {
    $out: "product_sales_summary" // Write the results to a new collection
  }
])



db.orders.aggregate([
  {
    $group: {
      _id: "$productId", // Group by productId
      totalSales: { $sum: "$amount" } // Sum the total sales for each product
    }
  },
  {
    $merge: {
      into: "product_sales", // Target collection
      whenMatched: "merge", // Merge the documents if they match
      whenNotMatched: "insert" // Insert new documents if no match is found
    }
  }
])



db.orders_2023.aggregate([
  {
    $unionWith: {
      coll: "orders_2024",
      pipeline: [
        { $match: { status: "shipped" } } // Only include "shipped" orders from 2024
      ]
    }
  }
])




db.sales.aggregate([
  {
    $facet: {
      totalSales: [
        { $group: { _id: null, total: { $sum: "$amount" } } }
      ],
      averageSales: [
        { $group: { _id: null, average: { $avg: "$amount" } } }
      ],
      salesCount: [
        { $count: "totalCount" }
      ]
    }
  }
])




db.sales.aggregate([
  {
    $facet: {
      totalSales: [
        { $group: { _id: null, total: { $sum: "$amount" } } }
      ],
      averageSales: [
        { $group: { _id: null, average: { $avg: "$amount" } } }
      ],
      salesByProductType: [
        { $group: { _id: "$productType", totalSales: { $sum: "$amount" } } }
      ]
    }
  }
])















