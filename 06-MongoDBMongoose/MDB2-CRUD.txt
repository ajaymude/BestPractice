create 
      - bulkWrite
      - insertOne
      - insertMany
      - insert 
      - create 

          attributes 
            - {ordered:false}
            - { writeConcern: { w: "majority" } }
            - { bypassDocumentValidation: true }
            - { lean: true }
            - { strict: false }
            - 








read 
      - find
      - findOne
      - findById
      - findByIdAndDelete
      - findByIdAndUpdate
      - findOneAndDelete
      - findOneAndUpdate
      - findOneAndReplace
      

          attributes 
              -Projection, 
              -select()
              -sort() 
              -limit()
              -skip()
              -count()
              -toArray()
              -next()
              -countDocuments()
              -pretty()

              -cursor


                - logic operator
                      - $and
                      - $or
                      - $not
                      - $nor
                      - $exists
                      - $type

                - comparison operator
                      - $gt
                      - $lt
                      - $gte
                      - $lte-
                      - $ne
                      - $eq


                - Element Operators
                    - $exists
                    - "$type"




                - array operator
                    - $all
                    - $size-
                    - $elemMatch
                    - $addToSet
                    - $pullAll 
                    - $pop
                    - $in
                    - $nin



                - Evaluation Operators
                      - $regex
                      - $text
                      - $expr
                      - $jsonSchema
                      - $mod
                      - $where 








update  

  - updateOne
  - updateMany
  - replaceOne
  -

    -attributes
        - $set
        - $unset
        - $rename

        - $setOnInsert
        - $push
        - $pull
        - $pop
        - $addToSet
        - $pullAll
        - $slice

        - $mul
        - $min
        - $max
        - $inc

        - $currentDate
        - $cond
        - $bit


        - { upsert: true }
        - { returnDocument: "after" }






delete 

      -deleteOne
      -deleteMany
      -findOneAndDelete





// error 

    error.name
    error.messagge







// schema 

      - { strict: false }
      - 






schema 








error 
          - error.name
          - error.message









// create DB and collection 

// to make mongo connection 
>mongosh 

// to clear terminal 
>ctrl + L 

// to see all db list 
> show dbs 

// how to create db 
> use dbName 

// how to delete db
> db.dropDatabase()
> db.stats()


// how to create collection 
> db.createCollection("student");

// how to see the collection 
> show collections 

// how to rename collection
> db.students.renameCollection("newName")

// how to drop the collection
> db.collName.drop()





















// Create 

a-insertOne()
b-insertMany()
c-insert()
d-mongoimport()

mongoimport --db mydatabase --collection users --file users.json --jsonArray



const result = await collection.insertOne({
  name: "John Doe",
  age: 30,
  email: "johndoe@example.com",
});



const users = await User.create({
    name: "David",
    age: 40,
  });
  console.log("Created User:", users);



// Insert multiple documents
const result = await collection.insertMany([
  { name: "Alice", age: 25, email: "alice@example.com" },
  { name: "Bob", age: 35, email: "bob@example.com" },
]);



const users = await User.insertMany([
    { name: 'Alice', age: 25 },
    { name: 'Bob', age: 30 },
  ], { lean: true });




// Bulk insert operations
const result = await collection.bulkWrite([
  {
    insertOne: { document: { name: "Tom", age: 28, email: "tom@example.com" } },
  },
  {
    insertOne: {
      document: { name: "Jerry", age: 30, email: "jerry@example.com" },
    },
  },
]);




// Insert multiple documents and continue the operation even if one document fails (ordered: false)  // default it true
db.collname.insertMany(
  [
    { field1: "value1", field2: "value2" },
    { field1: "value3", field2: "value4" },
  ],
  { ordered: false }  // default is true 
);




// Insert a single document with write concern (waiting for majority acknowledgment from replica set members)
db.collname.insertOne(
  { field1: "value1", field2: "value2" },
  { writeConcern: { w: "majority" } }
);




// Insert a single document and bypass document validation rules if validation is enabled
db.collname.insertOne(
  { field1: "value1", field2: "value2" },
  { bypassDocumentValidation: true }
);




// Insert a document with a custom `_id` (you can specify the _id manually)
db.collname.insertOne({ _id: 1001, name: "ajay" });




// Insert multiple documents with a custom `_id`
db.collname.insertMany([
  { _id: 1001, name: "ajay" },
  { _id: 1002, name: "raj" },
]);




// Insert a document with embedded arrays or objects
db.collname.insertOne({
  name: "ajay",
  hobbies: ["reading", "coding"],
  address: { city: "Delhi", country: "India" },
});





















// Read 


/find

db.users.find().pretty();
db.users.find({ age:  18  })
db.users.find({ age:  18 , status: "active" })
db.collection.find({status.desc:"on time"}) 
db.collection.find({status.hobbies:"cricket"} )  // it search in array 
db.collection.find({status.hobbies:["cricket"]} )  // it search exact array  array


Example with Projection:
db.users.find({ age:  18  }, { name: 1, age: 1 })
db.users.find({}, { password: 0 })
db.users.find({ name: "Ajay" }, { _id: 0, name: 1, city: 1 })


db.users.find({
  age: { $gte: 20, $lte: 30 }
})


db.users.find({
  $and: [
    { age: { $gte: 20 } },
    { age: { $lte: 30 } }
  ]
})



/sort 
db.collection.find().sort({ field: 1 or -1 })
db.users.find().sort({ age: 1 }).count()


/limit
db.users.find().limit(5)


/skip()
db.users.find().skip(5)


/count 
db.users.find({ status: 'active' }).count();


/ Find all documents and return them as an array
db.users.find().toArray();




// Find all documents and apply a function to each of them
db.users.find().toArray().forEach(function(doc) {
    // Your logic here, for example:
    print(doc.name);
});






/findOne
db.users.findOne({ email: "johndoe@example.com" })





/findOneAndUpdate
const user = await User.findOneAndUpdate(
  { name: 'raj' }, 
  { $set: { age: 35 } },
  { new: true }
);
console.log(user);





/countDocuments
const count = await User.countDocuments({ age: { $gt: 30 } });
console.log(count);





/distinct
const distinctNames = await User.distinct('name');
console.log(distinctNames);




// Logical operator 

[
  { name: "Alice", age: 25, email: "alice@example.com", isActive: true },
  { name: "Bob", age: 30, email: "bob@example.com" },
  { name: "Charlie", age: 35, isActive: false },
  { name: "David", age: 40, isActive: true, email: "david@example.com" },
  { name: "Eve", age: 28, email: "eve@example.com" },
  { name: "Frank", age: 33, phone: "1234567890" },
]
*
// 1. $and: Matches documents that satisfy all conditions
console.log("1. $and Examples:");
console.log(await collection.find({ $and: [{ age: { $gte: 30 } }, { isActive: true }] }).toArray()); // Active users aged 30+
console.log(await collection.find({ $and: [{ name: "Alice" }, { email: { $exists: true } }] }).toArray()); // Users named Alice with an email
console.log(await collection.find({ $and: [{ age: { $lte: 35 } }, { phone: { $exists: true } }] }).toArray()); // Users with phone and age <= 3


// 2. $or: Matches documents that satisfy at least one condition
console.log("\n2. $or Examples:");
console.log(await collection.find({ $or: [{ name: "Alice" }, { isActive: false }] }).toArray()); // Users named Alice or inactive
console.log(await collection.find({ $or: [{ age: { $lt: 30 } }, { email: { $exists: false } }] }).toArray()); // Users aged < 30 or without email
console.log(await collection.find({ $or: [{ isActive: true }, { phone: { $exists: true } }] }).toArray()); // Active users or those with phon


// 3. $not: Negates a query condition
console.log("\n3. $not Examples:");
console.log(await collection.find({ age: { $not: { $lt: 30 } } }).toArray()); // Users aged >= 30
console.log(await collection.find({ isActive: { $not: { $eq: true } } }).toArray()); // Users who are not active
console.log(await collection.find({ email: { $not: { $exists: true } } }).toArray()); // Users without an emai


// 4. $nor: Matches documents that do not satisfy any condition
console.log("\n4. $nor Examples:");
console.log(await collection.find({ $nor: [{ name: "Alice" }, { isActive: true }] }).toArray()); // Not Alice and not active
console.log(await collection.find({ $nor: [{ age: { $gte: 30 } }, { email: { $exists: true } }] }).toArray()); // Users aged < 30 and without email
console.log(await collection.find({ $nor: [{ phone: { $exists: true } }, { isActive: false }] }).toArray()); // No phone and not inactiv


// 5. $exists: Matches documents where a field exists or does not exist
console.log("\n5. $exists Examples:");
console.log(await collection.find({ email: { $exists: true } }).toArray()); // Users with an email
console.log(await collection.find({ phone: { $exists: false } }).toArray()); // Users without a phone
console.log(await collection.find({ isActive: { $exists: true } }).toArray()); // Users with `isActive` fiel


// 6. $type: Matches documents where a field is of a specified BSON type
console.log("\n6. $type Examples:");
console.log(await collection.find({ age: { $type: "int" } }).toArray()); // Users with `age` as integer
console.log(await collection.find({ email: { $type: "string" } }).toArray()); // Users with `email` as string
console.log(await collection.find({ isActive: { $type: "bool" } }).toArray()); // Users with `isActive` as boolean


// Combining $and and $or
{
  "$and": [
    { "age": { "$gt": 25 } },
    {
      "$or": [
        { "status": "active" },
        { "status": "pending" }
      ]
    }
  ]
}






// comparison operator

{
  "$eq": { "age": { "$eq": 30 } },            // Equal
  "$ne": { "age": { "$ne": 30 } },            // Not Equal
  "$gt": { "age": { "$gt": 30 } },            // Greater Than
  "$gte": { "age": { "$gte": 30 } },          // Greater Than or Equal
  "$lt": { "age": { "$lt": 30 } },            // Less Than
  "$lte": { "age": { "$lte": 30 } },          // Less Than or Equal
  "$in": { "status": { "$in": ["active", "pending"] } }, // In Array
  "$nin": { "status": { "$nin": ["inactive", "suspended"] } }, // Not In Array
}






// Element Operators


{
  "$exists": { "age": { "$exists": true } },  // Field Existence
  "$type": { "age": { "$type": "int" } }      // Field Type
}


db.users.find({
  email: { $exists: true }
})


db.users.find({
  phone: { $exists: false }
})


db.articles.find({
  age: { $type: "string" }
})


db.articles.find({
  age: { $type: ['int' , 'string'] }
})








// Array Operators

array of object , hobbies hold object 
user.find({hobbies:{title:'hero'}})
user.find({hobbies.title:'hero'})
user.find({hobbies : {$size :3}})

// $elemMatch: Match array elements that meet specific criteria
{
  "orders": { "$elemMatch": { "item": "Laptop", "quantity": { "$gt": 1 } } }
}

// $all: Match documents where an array contains all specified values
{
  "tags": { "$all": ["electronics", "sale"] }
}

// $size: Match documents where the array size matches a specified value
{
  "orders": { "$size": 2 }
}



// $push: Append a value to an array
{
  "$push": { "orders": { "item": "Phone", "quantity": 1 } }
}

// $addToSet: Add a value to an array only if it doesn't already exist
{
  "$addToSet": { "tags": "new" }
}

// $pop: Remove the first or last element of an array
{
  "$pop": { "orders": 1 }
}

// $pop: Remove the first element of an array
{
  "$pop": { "orders": -1 }
}

// $pull: Remove elements from an array that match a condition
{
  "$pull": { "orders": { "item": "Phone" } }
}

// $pullAll: Remove all specified values from an array
{
  "$pullAll": { "tags": ["electronics", "sale"] }
}



// projection in array 

db.collection.find(
  { /* query */ },
  { arrayField: { $slice: <number or array> } }
);


{
  "_id": 1,
  "name": "John",
  "scores": [85, 90, 78, 92, 88, 76]
}


db.collection.find(
  { name: "John" },
  { scores: { $slice: 3 } }
);



// how to find the specific value in the array of object 


To find values in an array of objects in MongoDB, you can use various query operators such as
1 - $elemMatch 
2 - dot notation
3 - array-specific operators

example of the array of object

db.products.insertMany([
  { name: "Laptop", specs: [{ key: "RAM", value: "16GB" }, { key: "Storage", value: "512GB" }] },
  { name: "Phone", specs: [{ key: "RAM", value: "8GB" }, { key: "Storage", value: "128GB" }] },
  { name: "Tablet", specs: [{ key: "RAM", value: "4GB" }, { key: "Storage", value: "64GB" }] }
]);



/1. Find Objects with a Specific Key-Value Pair ($elemMatch) 

db.products.find({
  specs: { $elemMatch: { key: "RAM", value: "16GB" } }
});

[
  {
    "name": "Laptop",
    "specs": [
      { "key": "RAM", "value": "16GB" },
      { "key": "Storage", "value": "512GB" }
    ]
  }
]



/2. Using Dot Notation

db.products.find({ "specs.key": "RAM" });


[
  {
    "name": "Laptop",
    "specs": [
      { "key": "RAM", "value": "16GB" },
      { "key": "Storage", "value": "512GB" }
    ]
  },
  {
    "name": "Phone",
    "specs": [
      { "key": "RAM", "value": "8GB" },
      { "key": "Storage", "value": "128GB" }
    ]
  },
  {
    "name": "Tablet",
    "specs": [
      { "key": "RAM", "value": "4GB" },
      { "key": "Storage", "value": "64GB" }
    ]
  }
]



/3. Using $size

db.products.find({ specs: { $size: 2 } });

[
  {
    "name": "Laptop",
    "specs": [
      { "key": "RAM", "value": "16GB" },
      { "key": "Storage", "value": "512GB" }
    ]
  },
  {
    "name": "Phone",
    "specs": [
      { "key": "RAM", "value": "8GB" },
      { "key": "Storage", "value": "128GB" }
    ]
  },
  {
    "name": "Tablet",
    "specs": [
      { "key": "RAM", "value": "4GB" },
      { "key": "Storage", "value": "64GB" }
    ]
  }
]


/



// update the array 

db.products.updateOne(
  { "specs.key": "RAM" },
  { $set: { "specs.$.value": "32GB" } }
);


{
  "name": "Laptop",
  "specs": [
    { "key": "RAM", "value": "32GB" },
    { "key": "Storage", "value": "512GB" }
  ]
}




// how to update all document in array of object 

db.users.updateMany(
  { }, // Match condition (empty to update all documents)
  { 
    $set: { 
      "orders.$[].status": "updated" 
    }
  }
);


db.users.updateMany(
  { "name": "User1" },
  { $set: { "orders.$[].status": "updated" } }
);




// array filter method 

{
  "_id": 1,
  "name": "User1",
  "orders": [
    { "name": "order1", "payment": 1000 },
    { "name": "order2", "payment": 2000 },
    { "name": "order3", "payment": 3000 }
  ]
}




{
  "_id": 1,
  "name": "User1",
  "orders": [
    { "name": "order1", "payment": 1000 },
    { "name": "order2", "payment": 2000 },
    { "name": "order3", "payment": 3000 }
  ]
}




db.users.updateMany(
  { }, // Match condition (empty to update all documents)
  {
    $set: { "orders.$[element].status": "updated" }
  },
  {
    arrayFilters: [
      { "element.payment": { $gt: 1500 } } // Condition for matching array elements
    ]
  }
);





{
  "_id": 1,
  "name": "User1",
  "orders": [
    { "name": "order1", "payment": 1000 },
    { "name": "order2", "payment": 2000, "status": "updated" },
    { "name": "order3", "payment": 3000, "status": "updated" }
  ]
}



db.users.updateMany(
  { },
  {
    $set: { "orders.$[element].status": "filtered" }
  },
  {
    arrayFilters: [
      { 
        $or: [
          { "element.name": { $regex: /^order2/ } }, // Name starts with "order2"
          { "element.payment": 3000 } // Payment is 3000
        ]
      }
    ]
  }
);



{
  "_id": 1,
  "name": "User1",
  "orders": [
    { "name": "order1", "payment": 1000 },
    { "name": "order2", "payment": 2000, "status": "filtered" },
    { "name": "order3", "payment": 3000, "status": "filtered" }
  ]
}







// each


The $each operator in MongoDB is used with $push to add multiple elements to an array. 
It allows for more control, like specifying the order of elements added or limiting the size of the array.



{
  "_id": 1,
  "name": "User1",
  "orders": [
    { "name": "order1", "payment": 1000 },
    { "name": "order2", "payment": 2000 }
  ]
}


db.users.updateOne(
  { _id: 1 }, // Match condition
  {
    $push: {
      orders: {
        $each: [
          { "name": "order3", "payment": 3000 },
          { "name": "order4", "payment": 4000 }
        ]
      }
    }
  }
);



{
  "_id": 1,
  "name": "User1",
  "orders": [
    { "name": "order1", "payment": 1000 },
    { "name": "order2", "payment": 2000 },
    { "name": "order3", "payment": 3000 },
    { "name": "order4", "payment": 4000 }
  ]
}




db.users.updateOne(
  { _id: 1 },
  {
    $push: {
      orders: {
        $each: [
          { "name": "order5", "payment": 5000 },
          { "name": "order6", "payment": 6000 }
        ],
        $position: 0 // Adds elements at the beginning
      }
    }
  }
);



{
  "_id": 1,
  "name": "User1",
  "orders": [
    { "name": "order5", "payment": 5000 },
    { "name": "order6", "payment": 6000 },
    { "name": "order1", "payment": 1000 },
    { "name": "order2", "payment": 2000 },
    { "name": "order3", "payment": 3000 },
    { "name": "order4", "payment": 4000 }
  ]
}















// expression operator / Text Search Operators


                - EvaluationOperators
                      - $regex / test search with 
                      - $text
                      - $expr  / calculagtion
                      - $jsonSchema
                      - $mod
                      - $where 


// Get users whose name starts with 'A'
const users = await User.find({ name: { $regex: /^A/, $options: 'i' } });
console.log(users); // 'i' makes the regex case-insensitive


db.users.find({
  name: { $regex: /John/ }
})





// Get users created in the last 7 days
const users = await User.find({
  createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
});
console.log(users);


db.users.find({
  score: { $mod: [5, 0] }
})






db.collection.find({status.hobbies:"cricket"} )  // it search in array 
db.collection.find({status.hobbies:["cricket"]} )  // it search exact array

db.collection.find({status.hobbies:{title:sport , test:2 }} )  // if array contains objects  , it check same 
db.collection.find({status.hobbies:{title:sport  }} )  // if array contains objects  , it check same 





db.users.findOneAndUpdate(
  { username: "john_doe" }, // Filter condition to find the document
  { $set: { status: "inactive" } }, // Update operation
  { returnDocument: "before" } // Return the document before the update
)


db.users.findOneAndUpdate(
  { username: "john_doe" }, // Filter condition to find the document
  { $set: { age: 30 } }, // Update operation
  { returnDocument: "after" } // Return the document after the update
)



db.users.findOneAndReplace(
  { username: "john_doe" }, // Filter to find the document
  { username: "john_doe", age: 30, status: "active" }, // Replacement document
  { returnDocument: "before" } // Return the document before the replacement
)


db.users.findOneAndDelete(
  { username: "john_doe" } // Filter to find the document to delete
)




























// update 

/ Update a single document
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  { $set: { age: 31 } } // Update operation
);




db.users.updateOne({ name: "Alice" }, { $unset: { address: "" } });




// Update multiple documents
const result = await collection.updateMany(
  { age: { $gte: 30 } }, // Filter: age greater than or equal to 30
  { $set: { status: "Senior" } } // Update operation: add status field
);




// Update a document or insert if not exists
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Query
  { $set: { name: "John Doe", age: 30 } }, // Update
  { upsert: true } // Create if not exists
);




// Replace a document completely
const result = await collection.replaceOne(
  { email: "johndoe@example.com" }, // Filter
  {
    name: "John Smith",
    age: 32,
    email: "johndoe@example.com",
    status: "Active",
  } // New document
);




db.users.findOneAndUpdate(
  { _id: ObjectId("5f9d9f7c8c5f3b6db7d6f0c5") },
  { $set: { age: 35 } }
);





db.users.bulkWrite([
  { updateOne: { filter: { name: "John Doe" }, update: { $set: { age: 40 } } } },
  { updateMany: { filter: { status: "inactive" }, update: { $set: { status: "active" } } } }
]);




db.collection.update(
  { _id: 1 },
  { 
    $setOnInsert: { createdAt: new Date() },
    $set: { name: "John" }
  },
  { upsert: true }
);
// If the document with _id: 1 doesn't exist, it will be inserted with "createdAt" set to current date.
// If the document exists, only "name" will be updated.




db.collection.update(
  { _id: 1 },
  { $currentDate: { lastModified: true } }
);
// Sets "lastModified" to the current date and time.





db.users.findOneAndUpdate(
  { 
    "_id": 1, 
    "user.address.street": "456 Oak St"  // Condition to find the nested address
  },
  { 
    $set: { 
      "user.address.$.city": "Los Angeles"  // Update the city of the matching address
    }
  },
  { 
    returnDocument: "after"  // Option to return the updated document, use 'before' for the original one
  }
)





db.collection.update(
  { _id: 1 },
  { $rename: { "oldFieldName": "newFieldName" } }
);
// Renames "oldFieldName" to "newFieldName" in the document.





// Update a field with a condition using the `$cond` operator (e.g., conditionally set a value based on another field)
db.users.updateOne(
  { age: { $gt: 18 } }, 
  { $set: { status: { $cond: { if: { $gt: ["$age", 18] }, then: "adult", else: "minor" } } } }
);











// array

// Push a new hobby to the hobbies array
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  { $push: { hobbies: "Reading" } } // Add 'Reading' to hobbies array
);


// Remove a hobby from the hobbies array
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  { $pull: { hobbies: "Reading" } } // Remove 'Reading' from hobbies array
);


db.collection.update(
  { _id: 1 },
  { $pop: { tags: 1 } }
);
// Removes the last element from the "tags" array.


db.collection.update(
  { _id: 1 },
  { $pop: { tags: -1 } }
);
// Removes the first element from the "tags" array.


db.collection.update(
  { _id: 1 },
  { $pullAll: { tags: ["mongodb", "nosql"] } }
);
// Removes both "mongodb" and "nosql" from the "tags" array.



db.collection.update(
  { _id: 1 },
  { $slice: { comments: 5 } }
);
// Limits the "comments" array to the first 5 elements.


db.collection.update(
  { _id: 1 },
  { $addToSet: { tags: "mongodb" } }
);
// Adds "mongodb" to the "tags" array only if it's not already present.


// push object in array 
db.users.updateOne(
  { "_id": 1 },
  {
    $push: {
      "user.address": {
        "street": "789 Pine St",
        "city": "New York",
        "zip": "10001"
      }
    }
  }
)












// math 

// Update using $set and $inc operators
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  {
    $set: { status: "Active" }, // Set status to 'Active'
    $inc: { age: 1 }, // Increment age by 1
  }
);


db.collection.update(
  { _id: 1 },
  { $mul: { price: 1.1 } }
);
// Multiplies the value of "price" by 1.1.


db.collection.update(
  { _id: 1 },
  { $min: { age: 25 } }
);


db.collection.update(
  { _id: 1 },
  { $max: { age: 40 } }
);




db.users.find({ tags: { $size: 3 } }); // Matches arrays with exactly 3 elements



const updateData = await User.findOneAndUpdate({"orders.payment": "yes"}, { $set: { "orders.$.payment": "no" } }, {new:true});



    const updateData = await User.findOneAndUpdate(
        { 
          name: "raj" 
        },
        { 
          $pull: {
            orders: { 
              name: "raj",
              payment: { $exists: false } // Ensure it doesn't have the 'payment' field
            }
          }
        },
        { new: true }  // This ensures the document is returned after the update
      )


db.users.find({ specs: { $elemMatch: { processor: "Intel i7", memory: "16GB" } } });





    const updateData = await User.findOneAndUpdate(  { 
        orders: { 
          $elemMatch: { 
            name:"raj",
            "payment":"3000"

          }
        }
      }, { $set: { "orders.$.payment": "4500" } }, {new:true})




          const updateData = await User.findOneAndUpdate(
        { 
          name: "raj" 
        },
        { 
          $push: {
            orders: { 
              name: "raj",
              payment: "3000"
            }
          }
        },
        { new: true }  // This ensures the document is returned after the update
      )


    const updateData = await User.findOneAndUpdate(  { 
        orders: { 
          $elemMatch: { 
            name:"raj",
            "payment":"6000"

          }
        }
      }, { $set: { "orders.$.payment": "6000" , "orders.$.status": false } }, {new:true})


    const updateData = await User.findOneAndUpdate(
      {
        orders: {
          $elemMatch: {
            name: "raj",
            payment: "6000",
            "date":'333'
          },
        },
      },
      { $set: { "orders.$.payment": "6000", "orders.$.status": false } },
      { new: true }
    );


    const updateData = await User.findOneAndUpdate(
      {
        order: {
          $elemMatch: {
            name: "raj3",
            payment: { $exists: true } 
          },
        },
      },
      {
        $set: {
          "order.$.payment": "33000",
        },
      },
      { new: true }
    );






















// Delete 
a-deleteOne()
b-findOneAndDelete()
c-deleteMany()



db.users.deleteOne({ name: "John Doe" })
db.users.findOneAndDelete({ _id: ObjectId("5f9d9f7c8c5f3b6db7d6f0c5") })

db.users.deleteMany({});

db.orders.deleteMany({
  status: "cancelled",
  orderDate: { $lt: new Date("2023-01-01") }
})

db.users.bulkWrite([
  { deleteOne: { filter: { name: "John Doe" } } },
  { deleteMany: { filter: { status: "cancelled" } } }
]);



db.users.drop();  // Deletes the entire "users" collection

































// strict false 

const mongoose = require("mongoose");

const userSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    brand: String,
    specs: {
      processor: String,
      memory: String,
      storage: String
    },
    tags: [String]
  },
  { strict: false } // This allows extra fields
);

const User = mongoose.model("User", userSchema);
















const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Name is required'],
    minlength: [3, 'Name must be at least 3 characters'],
    maxlength: [50, 'Name cannot exceed 50 characters'],
  },
  email: {
    type: String,
    required: [true, 'Email is required'],
    unique: true,
    match: [/^\S+@\S+\.\S+$/, 'Please provide a valid email address'],
  },
  age: {
    type: Number,
    min: [18, 'Age must be at least 18'],
    max: [100, 'Age cannot be more than 100'],
  },
  status: {
    type: String,
    enum: ['active', 'inactive', 'banned'],
    required: true,
  },
  password: {
    type: String,
    required: true,
    set: (value) => value.toUpperCase(), // Just an example
  },
  createdAt: {
    type: Date,
    default: Date.now,
    immutable: true, // Date can't be updated after the initial creation
  },
});

const User = mongoose.model('User', userSchema);




// error 
error.name 
error.message