create 
      -bulkWrite
      -insertOne
      -insertMany
      -insert 

          attributes 
            - {ordered:false}
            - { writeConcern: { w: "majority" } }
            - { bypassDocumentValidation: true }






reade 
      -find
      -findOne
      -findById
      -findByIdAndDelete
      -findByIdAndUpdate
      -findOneAndDelete
      -findOneAndUpdate
      -findOneAndReplace
      


          attributes 
              -Projection,
              -sort() 
              -limit()
              -skip()
              -count()
              -toArray()
              -select("name age -_id)

              - logic operator
                  -$and
                  -$or
                  -$not
                  -$nor
                  -$exists
                  -$type




                - comparison operator
                    -$gt
                    -$lt
                    -$gte
                    -$lte-
                    -$ne
                    -$in
                    -$nin



                - array operator
                    -$in
                    -$all
                    -$size-
                    -$elemMatch


                - expression operator
                      -$regex
                      -$text

                - evalution operator







update   
        -$set
        -$unset
        -$inc
        -$push
        -$pop
        -$pull
        -$rename
        $setOnInsert


















// create DB and collection 


if you created schema and trying to save the extra 
field then it will not save  it save the only that perticular field which is 
in exist in shcema

// to make mongo connection 
>mongosh 

// to clear terminal 
>ctrl + L 

// to see all db list 
> show dbs 

// how to create db 
> use dbName 

// how to delete db
> db.dropDatabase()
> db.stats()


// how to create collection 
> db.createCollection("student");

// how to see the collection 
> show collections 

// how to rename collection
> db.students.renameCollection("newName")

// how to drop the collection
> db.collName.drop()





















// Create  data 
// learn about the ordered method to insert 
// writeConcern

a-insertOne()
b-insertMany()
c-insert()
d-mongoimport()

mongoimport --db mydatabase --collection users --file users.json --jsonArray



const result = await collection.insertOne({
  name: "John Doe",
  age: 30,
  email: "johndoe@example.com",
});

const users = await User.create({
    name: "David",
    age: 40,
  });
  console.log("Created User:", users);



// Insert multiple documents
const result = await collection.insertMany([
  { name: "Alice", age: 25, email: "alice@example.com" },
  { name: "Bob", age: 35, email: "bob@example.com" },
]);


const users = await User.insertMany([
    { name: "Alice", age: 25 },
    { name: "Bob", age: 30 },
    { name: "Charlie", age: 22 }
  ]);
  console.log("Saved Users:", users);


      const users = await User.insertMany([
      { name: 'Alice', age: 25 },
      { name: 'Bob', age: 30 },
    ], { lean: true });



// Bulk insert operations
const result = await collection.bulkWrite([
  {
    insertOne: { document: { name: "Tom", age: 28, email: "tom@example.com" } },
  },
  {
    insertOne: {
      document: { name: "Jerry", age: 30, email: "jerry@example.com" },
    },
  },
]);



// Insert multiple documents and continue the operation even if one document fails (ordered: false)  // default it true
db.collname.insertMany(
  [
    { field1: "value1", field2: "value2" },
    { field1: "value3", field2: "value4" },
  ],
  { ordered: false }  // default is true 
);



// Insert a single document with write concern (waiting for majority acknowledgment from replica set members)
db.collname.insertOne(
  { field1: "value1", field2: "value2" },
  { writeConcern: { w: "majority" } }
);



// Insert a single document and bypass document validation rules if validation is enabled
db.collname.insertOne(
  { field1: "value1", field2: "value2" },
  { bypassDocumentValidation: true }
);



// Insert a document with a custom `_id` (you can specify the _id manually)
db.collname.insertOne({ _id: 1001, name: "ajay" });

// Insert multiple documents with a custom `_id`
db.collname.insertMany([
  { _id: 1001, name: "ajay" },
  { _id: 1002, name: "raj" },
]);



// Insert a document with embedded arrays or objects
db.collname.insertOne({
  name: "ajay",
  hobbies: ["reading", "coding"],
  address: { city: "Delhi", country: "India" },
});



// strict false 

const mongoose = require("mongoose");

const userSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    brand: String,
    specs: {
      processor: String,
      memory: String,
      storage: String
    },
    tags: [String]
  },
  { strict: false } // This allows extra fields
);

const User = mongoose.model("User", userSchema);


// error 
error.name 
error.message









const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Name is required'],
    minlength: [3, 'Name must be at least 3 characters'],
    maxlength: [50, 'Name cannot exceed 50 characters'],
  },
  email: {
    type: String,
    required: [true, 'Email is required'],
    unique: true,
    match: [/^\S+@\S+\.\S+$/, 'Please provide a valid email address'],
  },
  age: {
    type: Number,
    min: [18, 'Age must be at least 18'],
    max: [100, 'Age cannot be more than 100'],
  },
  status: {
    type: String,
    enum: ['active', 'inactive', 'banned'],
    required: true,
  },
  password: {
    type: String,
    required: true,
    set: (value) => value.toUpperCase(), // Just an example
  },
  createdAt: {
    type: Date,
    default: Date.now,
    immutable: true, // Date can't be updated after the initial creation
  },
});

const User = mongoose.model('User', userSchema);

































// Read 


find(): Retrieves all matching documents.
findOne(): Retrieves the first matching document.

Projection, sort(), limit(), skip(), count(), toArray() 

$and, $or, $not, $nor, $exists, $type: Logical operators to combine multiple conditions.
$gt, $lt, $gte, $lte, $ne: Comparison operators for range queries.
$in, $all, $size, $elemMatch: Array query operators.
$regex: Performs regular expression search on string fields.



db.users.find({ age:  18  })

db.users.find().pretty();

db.users.find({ age:  18 , status: "active" })

db.collection.find({status.desc:"on time"}) 
db.collection.find({status.hobbies:"cricket"} )  // it search in array 
db.collection.find({status.hobbies:["cricket"]} )  // it search exact array  array

Example with Projection:
db.users.find({ age:  18  }, { name: 1, age: 1 })

db.users.find({}, { password: 0 })

db.collection.find().sort({ field: 1 or -1 })

db.users.find().sort({ age: 1 }).count()

db.users.find().limit(5)

db.users.find().skip(5)

db.users.find({ status: 'active' }).count();


db.users.findOne({ email: "johndoe@example.com" })

// Find all documents and return them as an array
db.users.find().toArray();

// Find all documents and apply a function to each of them
db.users.find().toArray().forEach(function(doc) {
    // Your logic here, for example:
    print(doc.name);
});


const user = await User.findOneAndUpdate(
  { name: 'raj' }, 
  { $set: { age: 35 } },
  { new: true }
);
console.log(user);




const count = await User.countDocuments({ age: { $gt: 30 } });
console.log(count);


const distinctNames = await User.distinct('name');
console.log(distinctNames);



// Get only the name and age of all users
const users = await User.find({}, 'name age');
console.log(users);




// Get users whose name starts with 'A'
const users = await User.find({ name: { $regex: /^A/, $options: 'i' } });
console.log(users); // 'i' makes the regex case-insensitive



// Get users who are older than 25 and have the name "Alice"
const users = await User.find({ age: { $gt: 25 }, name: "Alice" });
console.log(users);



// Get users created in the last 7 days
const users = await User.find({
  createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
});
console.log(users);











logical Operator 

/ logical operator

// $and: All conditions must be true
{
  "$and": [
    { "age": { "$gte": 25 } },
    { "status": "active" }
  ]
}

// $or: At least one condition must be true
{
  "$or": [
    { "age": { "$lte": 20 } },
    { "status": "inactive" }
  ]
}

// $nor: None of the conditions must be true
{
  "$nor": [
    { "age": { "$lte": 20 } },
    { "status": "inactive" }
  ]
}

// $not: Negates the condition
{
  "age": { "$not": { "$gte": 30 } }
}

// $exists: Checks if a field exists
{
  "address": { "$exists": true }
}

// $type: Checks the type of a field
{
  "age": { "$type": "int" }
}

// Combining $and and $or
{
  "$and": [
    { "age": { "$gt": 25 } },
    {
      "$or": [
        { "status": "active" },
        { "status": "pending" }
      ]
    }
  ]
}



db.users.find({
  $and: [
    { age: { $gt: 25 } },
    { status: "active" }
  ]
})


db.users.find({
  $or: [
    { age: { $lt: 18 } },
    { status: "inactive" }
  ]
})

db.users.find({
  $nor: [
    { age: { $gt: 25 } },
    { status: "active" }
  ]
})


db.users.find({
  age: { $not: { $gt: 25 } }
})







// elements operator

/ element operator
{
  "$exists": { "age": { "$exists": true } },  // Field Existence
  "$type": { "age": { "$type": "int" } }      // Field Type
}


db.users.find({
  email: { $exists: true }
})


db.users.find({
  phone: { $exists: false }
})


db.articles.find({
  age: { $type: "string" }
})


db.articles.find({
  age: { $type: ['int' , 'string'] }
})









comparison operator


/ comparison operator 

{
  "$eq": { "age": { "$eq": 30 } },            // Equal
  "$ne": { "age": { "$ne": 30 } },            // Not Equal
  "$gt": { "age": { "$gt": 30 } },            // Greater Than
  "$gte": { "age": { "$gte": 30 } },          // Greater Than or Equal
  "$lt": { "age": { "$lt": 30 } },            // Less Than
  "$lte": { "age": { "$lte": 30 } },          // Less Than or Equal
  "$in": { "status": { "$in": ["active", "pending"] } }, // In Array
  "$nin": { "status": { "$nin": ["inactive", "suspended"] } }, // Not In Array
}



db.users.find({
  status: { $eq: "active" }
})


db.users.find({
  status: { $ne: "inactive" }
})


db.users.find({
  age: { $gt: 25 }
})


db.users.find({
  age: { $gte: 18 }
})


db.users.find({
  age: { $lt: 30 }
})


db.users.find({
  age: { $lte: 60 }
})


db.users.find({
  status: { $in: ["active", "pending"] }
})

db.users.find({
  status: { $nin: ["active", "inactive"] }
})

db.users.find({
  name: { $regex: /John/ }
})


db.users.find({
  name: { $regex: /^John/ }
})


db.posts.find({
  tags: { $all: ["mongodb", "database"] }
})


db.posts.find({
  comments: { $elemMatch: { author: "John", message: /great/ } }
})





db.users.find({
  score: { $mod: [5, 0] }
})








// array operator



/ array operator

// $elemMatch: Match array elements that meet specific criteria
{
  "orders": { "$elemMatch": { "item": "Laptop", "quantity": { "$gt": 1 } } }
}

// $all: Match documents where an array contains all specified values
{
  "tags": { "$all": ["electronics", "sale"] }
}

// $size: Match documents where the array size matches a specified value
{
  "orders": { "$size": 2 }
}

// $slice: Limit the number of array elements returned in a query or projection
{
  "orders": { "$slice": 2 }
}

// $push: Append a value to an array
{
  "$push": { "orders": { "item": "Phone", "quantity": 1 } }
}

// $addToSet: Add a value to an array only if it doesn't already exist
{
  "$addToSet": { "tags": "new" }
}

// $pop: Remove the first or last element of an array
{
  "$pop": { "orders": 1 }
}

// $pop: Remove the first element of an array
{
  "$pop": { "orders": -1 }
}

// $pull: Remove elements from an array that match a condition
{
  "$pull": { "orders": { "item": "Phone" } }
}

// $pullAll: Remove all specified values from an array
{
  "$pullAll": { "tags": ["electronics", "sale"] }
}

// $unwind: Deconstruct an array into separate documents (aggregation)
[
  { "$unwind": "$orders" }
]

// $arrayElemAt: Get an element at a specified index in an array (aggregation)
[
  { "$project": { "firstOrder": { "$arrayElemAt": ["$orders", 0] } } }
]

// $filter: Filter elements in an array based on a condition (aggregation)
[
  {
    "$project": {
      "filteredOrders": {
        "$filter": {
          "input": "$orders",
          "as": "order",
          "cond": { "$gt": ["$$order.quantity", 1] }
        }
      }
    }
  }
]

// $map: Apply an expression to each element in an array (aggregation)
[
  {
    "$project": {
      "orderPrices": {
        "$map": {
          "input": "$orders",
          "as": "order",
          "in": { "$multiply": ["$$order.price", "$$order.quantity"] }
        }
      }
    }
  }
]

// $reduce: Accumulate a single value by iterating over an array (aggregation)
[
  {
    "$project": {
      "totalQuantity": {
        "$reduce": {
          "input": "$orders",
          "initialValue": 0,
          "in": { "$add": ["$$value", "$$this.quantity"] }
        }
      }
    }
  }
]

// $concatArrays: Concatenate two or more arrays (aggregation)
[
  {
    "$project": {
      "allTags": { "$concatArrays": ["$tags", ["sale", "electronics"]] }
    }
  }
]

// $arrayToObject: Convert an array of key-value pairs into an object (aggregation)
[
  {
    "$project": {
      "orderObject": { "$arrayToObject": "$orders" }
    }
  }
]



db.collection.find({status.hobbies:"cricket"} )  // it search in array 
db.collection.find({status.hobbies:["cricket"]} )  // it search exact array

db.collection.find({status.hobbies:{title:sport , test:2 }} )  // if array contains objects  , it check same 
db.collection.find({status.hobbies:{title:sport  }} )  // if array contains objects  , it check same 



db.users.find({
  status: { $in: ["active", "pending"] }  // acitve or pending it find 
})


db.users.find({
  status: { $nin: ["inactive", "banned"] }   // it will find the value don't it have 
})


db.orders.find({
  items: { $elemMatch: { productId: "1234", quantity: { $gte: 2 } } } // it search same object which match these quontion 
})


db.posts.find({
  tags: { $size: 3 }  // it find the length equal 3 
})



db.users.find({
  roles: { $all: ["admin", "editor"] }  // it find the array which have two this value order is not matter 
})




// evalution operator 


/ evalution operator 


// $expr: Use aggregation expressions within a query
{
  "$expr": { "$gt": ["$price", "$cost"] }
}

// $jsonSchema: Validate documents against a JSON schema
{
  "$jsonSchema": {
    "bsonType": "object",
    "required": ["name", "age"],
    "properties": {
      "name": { "bsonType": "string" },
      "age": { "bsonType": "int" }
    }
  }
}

// $text: Perform a text search on text-indexed fields
{
  "$text": { "$search": "MongoDB" }
}

// $mod: Perform a modulo operation
{
  "number": { "$mod": [3, 0] }
}

// $regex: Match strings against a regular expression
{
  "name": { "$regex": "^Alice" }
}

// $where: Use JavaScript expressions for evaluation
{
  "$where": "this.price > this.cost"
}

// $textScore: Sort documents by text search relevance score
{
  "$text": { "$search": "MongoDB" },
  "$sort": { "score": { "$meta": "textScore" } }
}

// $elemMatch: Query embedded arrays with multiple conditions
{
  "orders": { "$elemMatch": { "item": "Laptop", "quantity": { "$gt": 1 } } }
}

// $all: Match documents where an array contains all specified values
{
  "tags": { "$all": ["electronics", "sale"] }
}

// $size: Match documents where the size of an array is equal to a specified value
{
  "orders": { "$size": 2 }
}

// $geoIntersects: Match documents where a geometry intersects a specified geometry
{
  "location": { "$geoIntersects": { "$geometry": { "type": "Polygon", "coordinates": [[[-73.97, 40.77], [-73.95, 40.77], [-73.95, 40.75], [-73.97, 40.75], [-73.97, 40.77]]] } } }
}

// $geoWithin: Match documents where a geometry is within a specified geometry
{
  "location": { "$geoWithin": { "$geometry": { "type": "Polygon", "coordinates": [[[-73.97, 40.77], [-73.95, 40.77], [-73.95, 40.75], [-73.97, 40.75], [-73.97, 40.77]]] } } }
}

// $sum (Aggregation operator): Calculate the sum of numeric values in an array
[
  { "$unwind": "$orders" },
  { "$group": { "_id": null, "totalPrice": { "$sum": "$orders.price" } } }
]

// $avg (Aggregation operator): Calculate the average of numeric values in an array
[
  { "$unwind": "$orders" },
  { "$group": { "_id": null, "averagePrice": { "$avg": "$orders.price" } } }
]



db.users.find({ $text: { $search: "Alice" } });





db.orders.find({
  $expr: { $gt: ["$totalAmount", "$discount"] }   // it use to compare two field inside the document 
})


db.users.find({
  name: { $regex: "^John", $options: "i" }  // search for the text , not efficient 
})

db.users.find({
  name: { $regex: /^john/i }
})


db.articles.find({
  $text: { $search: "mongodb database" }
})


db.articles.find({
  $text: { $search: "MongoDB database" }
})



db.numbers.find({
  number: { $mod: [3, 0] }
})



db.products.find({
  $where: "this.price > this.discountedPrice"
})



$add: Adds numbers.
$subtract: Subtracts numbers.
$multiply: Multiplies numbers.
$divide: Divides numbers.


db.transactions.find({db.users.find({
  $expr: { $eq: [{ $ifNull: ["$middleName", ""] }, ""] }
})

  $expr: { $gt: [{ $add: ["$amount", "$tax"] }, 100] }
})



db.products.find({
  $expr: { $lte: [{ $multiply: ["$price", "$quantity"] }, 500] }
})



db.orders.find({
  $expr: { $eq: [{ $arrayElemAt: ["$items", 0] }, "item123"] }
})


db.orders.find({
  $expr: { $eq: [{ $literal: 100 }, "$totalAmount"] }
})



db.products.aggregate([
  { $project: { randomScore: { $rand: {} } } }
])



db.users.findOneAndUpdate(
  { username: "john_doe" }, // Filter condition to find the document
  { $set: { status: "inactive" } }, // Update operation
  { returnDocument: "before" } // Return the document before the update
)


db.users.findOneAndUpdate(
  { username: "john_doe" }, // Filter condition to find the document
  { $set: { age: 30 } }, // Update operation
  { returnDocument: "after" } // Return the document after the update
)



db.users.findOneAndReplace(
  { username: "john_doe" }, // Filter to find the document
  { username: "john_doe", age: 30, status: "active" }, // Replacement document
  { returnDocument: "before" } // Return the document before the replacement
)


db.users.findOneAndDelete(
  { username: "john_doe" } // Filter to find the document to delete
)








// array operator 

db.users.find({ tags: { $all: ["electronics", "computer"] } });


db.users.find({ specs: { $elemMatch: { processor: "Intel i7", memory: "16GB" } } });



db.users.find({ tags: { $size: 3 } }); // Matches arrays with exactly 3 elements





















// update 

a-updateOne()
b-updateMany()

// learn about the array updation 

MongoDB provides several update operators to modify specific fields in a document.
 Common update operators include:

$set: Sets the value of a field.
$unset: Removes a field.
$rename: Renames a field in a document.
$setOnInsert: Sets the value of a field only if the document is being inserted (used in upserts).

$push: Adds an element to an array.
$pull: Removes an element from an array.
$addToSet: Adds a value to an array only if it doesn't already exist.
$pop: Removes the first or last element from an array.
$pullAll: Removes multiple specific values from an array.
$slice: Limits the number of elements in an array.

$inc: Increments a numeric field.
$mul: Multiplies the value of a field by a specified number.
$min: Updates the field only if the specified value is less than the current value.
$max: Updates the field only if the specified value is greater than the current value.

$currentDate: Sets the value of a field to the current date or timestamp.

$bit: Performs a bitwise operation on an integer field (AND, OR, XOR).












// Update a single document
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  { $set: { age: 31 } } // Update operation
);

db.users.updateOne({ name: "Alice" }, { $unset: { address: "" } });

// Update multiple documents
const result = await collection.updateMany(
  { age: { $gte: 30 } }, // Filter: age greater than or equal to 30
  { $set: { status: "Senior" } } // Update operation: add status field
);

// Update a document or insert if not exists
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Query
  { $set: { name: "John Doe", age: 30 } }, // Update
  { upsert: true } // Create if not exists
);

// Replace a document completely
const result = await collection.replaceOne(
  { email: "johndoe@example.com" }, // Filter
  {
    name: "John Smith",
    age: 32,
    email: "johndoe@example.com",
    status: "Active",
  } // New document
);

db.users.findOneAndUpdate(
  { _id: ObjectId("5f9d9f7c8c5f3b6db7d6f0c5") },
  { $set: { age: 35 } }
);


db.users.bulkWrite([
  { updateOne: { filter: { name: "John Doe" }, update: { $set: { age: 40 } } } },
  { updateMany: { filter: { status: "inactive" }, update: { $set: { status: "active" } } } }
]);

db.collection.update(
  { _id: 1 },
  { 
    $setOnInsert: { createdAt: new Date() },
    $set: { name: "John" }
  },
  { upsert: true }
);
// If the document with _id: 1 doesn't exist, it will be inserted with "createdAt" set to current date.
// If the document exists, only "name" will be updated.


db.collection.update(
  { _id: 1 },
  { $currentDate: { lastModified: true } }
);
// Sets "lastModified" to the current date and time.


db.users.findOneAndUpdate(
  { 
    "_id": 1, 
    "user.address.street": "456 Oak St"  // Condition to find the nested address
  },
  { 
    $set: { 
      "user.address.$.city": "Los Angeles"  // Update the city of the matching address
    }
  },
  { 
    returnDocument: "after"  // Option to return the updated document, use 'before' for the original one
  }
)



db.collection.update(
  { _id: 1 },
  { $rename: { "oldFieldName": "newFieldName" } }
);
// Renames "oldFieldName" to "newFieldName" in the document.


// Update a field with a condition using the `$cond` operator (e.g., conditionally set a value based on another field)
db.users.updateOne(
  { age: { $gt: 18 } }, 
  { $set: { status: { $cond: { if: { $gt: ["$age", 18] }, then: "adult", else: "minor" } } } }
);











// array

// Push a new hobby to the hobbies array
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  { $push: { hobbies: "Reading" } } // Add 'Reading' to hobbies array
);


// Remove a hobby from the hobbies array
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  { $pull: { hobbies: "Reading" } } // Remove 'Reading' from hobbies array
);


db.collection.update(
  { _id: 1 },
  { $pop: { tags: 1 } }
);
// Removes the last element from the "tags" array.


db.collection.update(
  { _id: 1 },
  { $pop: { tags: -1 } }
);
// Removes the first element from the "tags" array.


db.collection.update(
  { _id: 1 },
  { $pullAll: { tags: ["mongodb", "nosql"] } }
);
// Removes both "mongodb" and "nosql" from the "tags" array.



db.collection.update(
  { _id: 1 },
  { $slice: { comments: 5 } }
);
// Limits the "comments" array to the first 5 elements.


db.collection.update(
  { _id: 1 },
  { $addToSet: { tags: "mongodb" } }
);
// Adds "mongodb" to the "tags" array only if it's not already present.


// push object in array 
db.users.updateOne(
  { "_id": 1 },
  {
    $push: {
      "user.address": {
        "street": "789 Pine St",
        "city": "New York",
        "zip": "10001"
      }
    }
  }
)












// math 

// Update using $set and $inc operators
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  {
    $set: { status: "Active" }, // Set status to 'Active'
    $inc: { age: 1 }, // Increment age by 1
  }
);


db.collection.update(
  { _id: 1 },
  { $mul: { price: 1.1 } }
);
// Multiplies the value of "price" by 1.1.


db.collection.update(
  { _id: 1 },
  { $min: { age: 25 } }
);


db.collection.update(
  { _id: 1 },
  { $max: { age: 40 } }
);




db.users.find({ tags: { $size: 3 } }); // Matches arrays with exactly 3 elements



const updateData = await User.findOneAndUpdate({"orders.payment": "yes"}, { $set: { "orders.$.payment": "no" } }, {new:true});



    const updateData = await User.findOneAndUpdate(
        { 
          name: "raj" 
        },
        { 
          $pull: {
            orders: { 
              name: "raj",
              payment: { $exists: false } // Ensure it doesn't have the 'payment' field
            }
          }
        },
        { new: true }  // This ensures the document is returned after the update
      )


db.users.find({ specs: { $elemMatch: { processor: "Intel i7", memory: "16GB" } } });





    const updateData = await User.findOneAndUpdate(  { 
        orders: { 
          $elemMatch: { 
            name:"raj",
            "payment":"3000"

          }
        }
      }, { $set: { "orders.$.payment": "4500" } }, {new:true})




          const updateData = await User.findOneAndUpdate(
        { 
          name: "raj" 
        },
        { 
          $push: {
            orders: { 
              name: "raj",
              payment: "3000"
            }
          }
        },
        { new: true }  // This ensures the document is returned after the update
      )


    const updateData = await User.findOneAndUpdate(  { 
        orders: { 
          $elemMatch: { 
            name:"raj",
            "payment":"6000"

          }
        }
      }, { $set: { "orders.$.payment": "6000" , "orders.$.status": false } }, {new:true})




















































// Delete 
a-deleteOne()
b-findOneAndDelete()
c-deleteMany()



db.users.deleteOne({ name: "John Doe" })
db.users.findOneAndDelete({ _id: ObjectId("5f9d9f7c8c5f3b6db7d6f0c5") })

db.users.deleteMany({});

db.orders.deleteMany({
  status: "cancelled",
  orderDate: { $lt: new Date("2023-01-01") }
})

db.users.bulkWrite([
  { deleteOne: { filter: { name: "John Doe" } } },
  { deleteMany: { filter: { status: "cancelled" } } }
]);


db.users.drop();  // Deletes the entire "users" collection






















