

// create index 

db.collection.createIndex({ fieldName: 1 }); // 1 for ascending, -1 for descending

db.collection.createIndex({ field: 1 }, { unique: true });


db.collection.createIndex({ field: 1 }, { partialFilterExpression: { condition } });


db.users.createIndex(
  { lastLogin: 1 },
  { partialFilterExpression: { status: "active" } }
);





db.collection.dropIndex({ field: 1 });

// compound index  

db.collection.createIndex({ field1: 1, field2: -1 });


// multikey index

db.collection.createIndex({ arrayField: 1 });




// check  the current which index we are using it 

db.collection.getIndexes();





// default index 

When you create a collection, MongoDB automatically adds the _id index. 
You can see it using the getIndexes() method:

db.collection.getIndexes();



// partial index 

db.users.createIndex(
  { email: 1 }, // Index on the `email` field
  { partialFilterExpression: { isActive: true } } // Only include active users
);












// Basic Usage of explain()

The explain() method in MongoDB is a powerful tool for analyzing query performance. 
It provides detailed information about how MongoDB executes a query, including whether 
it uses an index, how many documents it scans, and how long it takes to execute. This information 
is crucial for optimizing queries and improving database performance.


db.collection.find({ fieldName: "value" }).explain();

Verbosity Modes

The explain() method supports different verbosity modes to control the amount of information returned:

queryPlanner (default): Provides information about the query plan without executing the query.

executionStats: Executes the query and returns statistics about its execution.

allPlansExecution: Provides detailed information about all possible query plans.


db.collection.find({ fieldName: "value" }).explain("executionStats");




7. Tips for Using explain()
Always use executionStats or allPlansExecution for accurate performance analysis.

Compare the output before and after adding indexes to measure their impact.

Use hint() to force MongoDB to use a specific index and analyze its performance.




db.users.find({ age: 25 }).hint({ age: 1 }).explain("executionStats");






























db.collection.find(query, projection).explain(verbosity)

db.contact.find({ age: { $gte: 30 } }).explain();

{
  "queryPlanner": {
    "plannerVersion": 1,
    "namespace": "test.contact",
    "indexFilterSet": false,
    "parsedQuery": { "age": { "$gte": 30 } },
    "winningPlan": {
      "stage": "COLLSCAN",  // Collection scan
      "filter": { "age": { "$gte": 30 } },
      "direction": "forward"
    },
    "rejectedPlans": []
  },
  "ok": 1
}


db.contact.find({ city: "San Francisco" }).explain("executionStats");

{
  "queryPlanner": { /* similar to queryPlanner output above */ },
  "executionStats": {
    "executionSuccess": true,
    "nReturned": 1,  // Number of documents returned
    "executionTimeMillis": 0,
    "totalKeysExamined": 0, // No indexes used
    "totalDocsExamined": 3  // Scanned all 3 documents
  },
  "ok": 1
}




// create index 

db.contact.createIndex({ age: 1 });

db.contact.find({ age: { $gte: 30 } }).explain("executionStats");

{
  "queryPlanner": {
    "winningPlan": {
      "stage": "IXSCAN",  // Index scan
      "keyPattern": { "age": 1 },
      "indexName": "age_1",
      "direction": "forward"
    }
  },
  "executionStats": {
    "totalKeysExamined": 2, // Only 2 index entries were scanned
    "totalDocsExamined": 2,
    "executionTimeMillis": 0
  },
  "ok": 1
}


// dropindex











// compound index 

db.collection.createIndex({ field1: order, field2: order, ... });


db.products.createIndex({ category: 1, price: -1 });


db.products.find({ category: "Electronics" }).sort({ price: -1 });
















// TTL time to live 

How to Use TTL Index in MongoDB

A TTL (Time-To-Live) Index in MongoDB is used to automatically remove documents from a 
collection after a certain period. This is useful for expiring data like logs, sessions, and temporary records.


1. Add a Field with an Expiration Time
Before creating a TTL index, your documents must have a field that stores a timestamp. Usually, this field is of type Date.

db.logs.insertOne({
  message: "This is a temporary log",
  createdAt: new Date()  // The expiration time will be based on this field
});


db.logs.createIndex({ createdAt: 1 }, { expireAfterSeconds: 3600 });







// Connect to MongoDB (Node.js example)
const { MongoClient } = require("mongodb");

async function run() {
  const client = new MongoClient("mongodb://localhost:27017");
  await client.connect();
  const db = client.db("testDB");
  const collection = db.collection("users");

  // Sample Data
  await collection.insertMany([
    { name: "Alice", age: 25, email: "alice@example.com" },
    { name: "Bob", age: 30, email: "bob@example.com" },
    { name: "Charlie", age: 35, email: "charlie@example.com" }
  ]);

  // 1. Single Field Index (Speeds up searching by 'name')
  await collection.createIndex({ name: 1 }); // 1 = Ascending order

  // 2. Compound Index (Speeds up queries using both 'name' & 'age')
  await collection.createIndex({ name: 1, age: -1 }); // -1 = Descending order

  // 3. Multikey Index (For arrays inside documents)
  await collection.insertOne({ name: "David", tags: ["developer", "mongodb", "nodejs"] });
  await collection.createIndex({ tags: 1 }); // Helps in searching inside 'tags' array

  // 4. Text Index (Full-text search on 'name' & 'email')
  await collection.createIndex({ name: "text", email: "text" });
  const searchResult = await collection.find({ $text: { $search: "Alice" } }).toArray();

  // 5. Hashed Index (For evenly distributed sharding)
  await collection.createIndex({ email: "hashed" });

  // 6. TTL Index (Auto-delete documents after 60 seconds)
  await collection.insertOne({ createdAt: new Date() });
  await collection.createIndex({ createdAt: 1 }, { expireAfterSeconds: 60 });

  // 7. Geospatial Index (Find nearby locations)
  const places = db.collection("places");
  await places.insertOne({
    name: "Central Park",
    location: { type: "Point", coordinates: [-73.9654, 40.7829] }
  });
  await places.createIndex({ location: "2dsphere" });

  // 8. Unique Index (Ensure unique values, e.g., email should be unique)
  await collection.createIndex({ email: 1 }, { unique: true });

  // 9. Sparse Index (Only indexes documents that have the field)
  await collection.createIndex({ optionalField: 1 }, { sparse: true });

  // 10. Partial Index (Index only documents that match a condition)
  await collection.createIndex(
    { status: 1 },
    { partialFilterExpression: { status: { $exists: true } } }
  );

  // Finding all indexes
  console.log(await collection.indexes());

  await client.close();
}

run();
