// create DB and collection 

// to make mongo connection 
>mongosh 

// to clear terminal 
>ctrl + L 

// to see all db list 
> show dbs 

// how to create db 
> use dbName 

// how to delete db
> db.dropDatabase()


// how to create collection 
> db.createCollection("student");

// how to see the collection 
> show collections 

// how to rename collection
> db.students.renameCollection("newName")

// how to drop the collection
> db.collName.drop()



















































// Create  data 

a-insertOne()
b-insertMany()


const result = await collection.insertOne({
  name: "John Doe",
  age: 30,
  email: "johndoe@example.com",
});

// Insert multiple documents
const result = await collection.insertMany([
  { name: "Alice", age: 25, email: "alice@example.com" },
  { name: "Bob", age: 35, email: "bob@example.com" },
]);

// Bulk insert operations
const result = await collection.bulkWrite([
  {
    insertOne: { document: { name: "Tom", age: 28, email: "tom@example.com" } },
  },
  {
    insertOne: {
      document: { name: "Jerry", age: 30, email: "jerry@example.com" },
    },
  },
]);

// Insert multiple documents and continue the operation even if one document fails (ordered: false)
db.collname.insertMany(
  [
    { field1: "value1", field2: "value2" },
    { field1: "value3", field2: "value4" },
  ],
  { ordered: false }
);

// Insert a single document with write concern (waiting for majority acknowledgment from replica set members)
db.collname.insertOne(
  { field1: "value1", field2: "value2" },
  { writeConcern: { w: "majority" } }
);

// Insert a single document and bypass document validation rules if validation is enabled
db.collname.insertOne(
  { field1: "value1", field2: "value2" },
  { bypassDocumentValidation: true }
);

// Insert a document with a custom `_id` (you can specify the _id manually)
db.collname.insertOne({ _id: 1001, name: "ajay" });

// Insert multiple documents with a custom `_id`
db.collname.insertMany([
  { _id: 1001, name: "ajay" },
  { _id: 1002, name: "raj" },
]);

// Insert a document with embedded arrays or objects
db.collname.insertOne({
  name: "ajay",
  hobbies: ["reading", "coding"],
  address: { city: "Delhi", country: "India" },
});








































// Read 

a-find()
b-findOne()

find(): Retrieves all matching documents.
findOne(): Retrieves the first matching document.

Projection, sort(), limit(), skip(), count(), toArray() 

$and, $or, $not, $nor, $exists, $type: Logical operators to combine multiple conditions.
$gt, $lt, $gte, $lte, $ne: Comparison operators for range queries.
$in, $all, $size, $elemMatch: Array query operators.
$regex: Performs regular expression search on string fields.




db.users.find({ age:  18  })

db.users.find().pretty();

db.users.find({ age:  18 , status: "active" })

db.collection.find({status.desc:"on time"}) 

Example with Projection:
db.users.find({ age:  18  }, { name: 1, age: 1 })

db.users.find({}, { password: 0 })

db.collection.find().sort({ field: 1 or -1 })

db.users.find().sort({ age: 1 }).count()

db.users.find().limit(5)

db.users.find().skip(5)

db.users.find({ status: 'active' }).count();


db.users.findOne({ email: "johndoe@example.com" })

// Find all documents and return them as an array
db.users.find().toArray();

// Find all documents and apply a function to each of them
db.users.find().toArray().forEach(function(doc) {
    // Your logic here, for example:
    print(doc.name);
});












logical Operator 

db.users.find({
  $and: [
    { age: { $gt: 25 } },
    { status: "active" }
  ]
})


db.users.find({
  $or: [
    { age: { $lt: 18 } },
    { status: "inactive" }
  ]
})

db.users.find({
  $nor: [
    { age: { $gt: 25 } },
    { status: "active" }
  ]
})


db.users.find({
  age: { $not: { $gt: 25 } }
})


db.users.find({
  email: { $exists: true }
})


db.users.find({
  phone: { $exists: false }
})


db.products.find({
  price: { $type: "double" }
})









comparison operator

db.users.find({
  status: { $eq: "active" }
})


db.users.find({
  status: { $ne: "inactive" }
})


db.users.find({
  age: { $gt: 25 }
})


db.users.find({
  age: { $gte: 18 }
})


db.users.find({
  age: { $lt: 30 }
})


db.users.find({
  age: { $lte: 60 }
})


db.users.find({
  status: { $in: ["active", "pending"] }
})

db.users.find({
  status: { $nin: ["active", "inactive"] }
})

db.users.find({
  name: { $regex: /John/ }
})


db.users.find({
  name: { $regex: /^John/ }
})


db.posts.find({
  tags: { $all: ["mongodb", "database"] }
})


db.posts.find({
  comments: { $elemMatch: { author: "John", message: /great/ } }
})


db.posts.find({
  tags: { $size: 3 }
})


db.users.find({
  score: { $mod: [5, 0] }
})










// array operator

db.users.find({
  status: { $in: ["active", "pending"] }
})


db.users.find({
  status: { $nin: ["inactive", "banned"] }
})


db.orders.find({
  items: { $elemMatch: { productId: "1234", quantity: { $gte: 2 } } }
})



db.users.find({
  roles: { $all: ["admin", "editor"] }
})


db.users.find({
  name: { $regex: /^john/i }
})


db.articles.find({
  $text: { $search: "mongodb database" }
})



db.articles.find({
  age: { $type: "string" }
})


db.articles.find({
  age: { $type: ['int' , 'string'] }
})




// evalution operator 

db.orders.find({
  $expr: { $gt: ["$totalAmount", "$discount"] }
})


db.users.find({
  name: { $regex: "^John", $options: "i" }
})


db.articles.find({
  $text: { $search: "MongoDB database" }
})



db.numbers.find({
  number: { $mod: [3, 0] }
})



db.products.find({
  $where: "this.price > this.discountedPrice"
})



$add: Adds numbers.
$subtract: Subtracts numbers.
$multiply: Multiplies numbers.
$divide: Divides numbers.


db.transactions.find({db.users.find({
  $expr: { $eq: [{ $ifNull: ["$middleName", ""] }, ""] }
})

  $expr: { $gt: [{ $add: ["$amount", "$tax"] }, 100] }
})



db.products.find({
  $expr: { $lte: [{ $multiply: ["$price", "$quantity"] }, 500] }
})



db.orders.find({
  $expr: { $eq: [{ $arrayElemAt: ["$items", 0] }, "item123"] }
})


db.orders.find({
  $expr: { $eq: [{ $literal: 100 }, "$totalAmount"] }
})



db.products.aggregate([
  { $project: { randomScore: { $rand: {} } } }
])



db.users.findOneAndUpdate(
  { username: "john_doe" }, // Filter condition to find the document
  { $set: { status: "inactive" } }, // Update operation
  { returnDocument: "before" } // Return the document before the update
)


db.users.findOneAndUpdate(
  { username: "john_doe" }, // Filter condition to find the document
  { $set: { age: 30 } }, // Update operation
  { returnDocument: "after" } // Return the document after the update
)



db.users.findOneAndReplace(
  { username: "john_doe" }, // Filter to find the document
  { username: "john_doe", age: 30, status: "active" }, // Replacement document
  { returnDocument: "before" } // Return the document before the replacement
)


db.users.findOneAndDelete(
  { username: "john_doe" } // Filter to find the document to delete
)




















































// update 

a-updateOne()
b-updateMany()


MongoDB provides several update operators to modify specific fields in a document.
 Common update operators include:

$set: Sets the value of a field.
$unset: Removes a field.
$rename: Renames a field in a document.
$setOnInsert: Sets the value of a field only if the document is being inserted (used in upserts).

$push: Adds an element to an array.
$pull: Removes an element from an array.
$addToSet: Adds a value to an array only if it doesn't already exist.
$pop: Removes the first or last element from an array.
$pullAll: Removes multiple specific values from an array.
$slice: Limits the number of elements in an array.

$inc: Increments a numeric field.
$mul: Multiplies the value of a field by a specified number.
$min: Updates the field only if the specified value is less than the current value.
$max: Updates the field only if the specified value is greater than the current value.

$currentDate: Sets the value of a field to the current date or timestamp.

$bit: Performs a bitwise operation on an integer field (AND, OR, XOR).












// Update a single document
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  { $set: { age: 31 } } // Update operation
);

db.users.updateOne({ name: "Alice" }, { $unset: { address: "" } });

// Update multiple documents
const result = await collection.updateMany(
  { age: { $gte: 30 } }, // Filter: age greater than or equal to 30
  { $set: { status: "Senior" } } // Update operation: add status field
);

// Update a document or insert if not exists
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Query
  { $set: { name: "John Doe", age: 30 } }, // Update
  { upsert: true } // Create if not exists
);

// Replace a document completely
const result = await collection.replaceOne(
  { email: "johndoe@example.com" }, // Filter
  {
    name: "John Smith",
    age: 32,
    email: "johndoe@example.com",
    status: "Active",
  } // New document
);

db.users.findOneAndUpdate(
  { _id: ObjectId("5f9d9f7c8c5f3b6db7d6f0c5") },
  { $set: { age: 35 } }
);


db.users.bulkWrite([
  { updateOne: { filter: { name: "John Doe" }, update: { $set: { age: 40 } } } },
  { updateMany: { filter: { status: "inactive" }, update: { $set: { status: "active" } } } }
]);

db.collection.update(
  { _id: 1 },
  { 
    $setOnInsert: { createdAt: new Date() },
    $set: { name: "John" }
  },
  { upsert: true }
);
// If the document with _id: 1 doesn't exist, it will be inserted with "createdAt" set to current date.
// If the document exists, only "name" will be updated.


db.collection.update(
  { _id: 1 },
  { $currentDate: { lastModified: true } }
);
// Sets "lastModified" to the current date and time.


db.users.findOneAndUpdate(
  { 
    "_id": 1, 
    "user.address.street": "456 Oak St"  // Condition to find the nested address
  },
  { 
    $set: { 
      "user.address.$.city": "Los Angeles"  // Update the city of the matching address
    }
  },
  { 
    returnDocument: "after"  // Option to return the updated document, use 'before' for the original one
  }
)



db.collection.update(
  { _id: 1 },
  { $rename: { "oldFieldName": "newFieldName" } }
);
// Renames "oldFieldName" to "newFieldName" in the document.


// Update a field with a condition using the `$cond` operator (e.g., conditionally set a value based on another field)
db.users.updateOne(
  { age: { $gt: 18 } }, 
  { $set: { status: { $cond: { if: { $gt: ["$age", 18] }, then: "adult", else: "minor" } } } }
);











// array

// Push a new hobby to the hobbies array
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  { $push: { hobbies: "Reading" } } // Add 'Reading' to hobbies array
);


// Remove a hobby from the hobbies array
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  { $pull: { hobbies: "Reading" } } // Remove 'Reading' from hobbies array
);


db.collection.update(
  { _id: 1 },
  { $pop: { tags: 1 } }
);
// Removes the last element from the "tags" array.


db.collection.update(
  { _id: 1 },
  { $pop: { tags: -1 } }
);
// Removes the first element from the "tags" array.


db.collection.update(
  { _id: 1 },
  { $pullAll: { tags: ["mongodb", "nosql"] } }
);
// Removes both "mongodb" and "nosql" from the "tags" array.



db.collection.update(
  { _id: 1 },
  { $slice: { comments: 5 } }
);
// Limits the "comments" array to the first 5 elements.


db.collection.update(
  { _id: 1 },
  { $addToSet: { tags: "mongodb" } }
);
// Adds "mongodb" to the "tags" array only if it's not already present.


// push object in array 
db.users.updateOne(
  { "_id": 1 },
  {
    $push: {
      "user.address": {
        "street": "789 Pine St",
        "city": "New York",
        "zip": "10001"
      }
    }
  }
)












// math 

// Update using $set and $inc operators
const result = await collection.updateOne(
  { email: "johndoe@example.com" }, // Filter
  {
    $set: { status: "Active" }, // Set status to 'Active'
    $inc: { age: 1 }, // Increment age by 1
  }
);


db.collection.update(
  { _id: 1 },
  { $mul: { price: 1.1 } }
);
// Multiplies the value of "price" by 1.1.


db.collection.update(
  { _id: 1 },
  { $min: { age: 25 } }
);


db.collection.update(
  { _id: 1 },
  { $max: { age: 40 } }
);



















































// Delete 
a-deleteOne()
b-findOneAndDelete()
c-deleteMany()



db.users.deleteOne({ name: "John Doe" })
db.users.findOneAndDelete({ _id: ObjectId("5f9d9f7c8c5f3b6db7d6f0c5") })

db.users.deleteMany({});

db.orders.deleteMany({
  status: "cancelled",
  orderDate: { $lt: new Date("2023-01-01") }
})

db.users.bulkWrite([
  { deleteOne: { filter: { name: "John Doe" } } },
  { deleteMany: { filter: { status: "cancelled" } } }
]);


db.users.drop();  // Deletes the entire "users" collection

