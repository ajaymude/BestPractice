

// introduction



// meta data 

static meta data 

import { Metadata } from "next";

// âœ… Static Metadata (Predefined)
export const metadata: Metadata = {
  title: "Next.js Metadata Example",
  description: "Learn how to use metadata in Next.js for SEO and social sharing.",
  keywords: ["Next.js", "SEO", "Metadata", "Web Development"],
  authors: [{ name: "John Doe", url: "https://johndoe.com" }],
  robots: "index, follow",
  openGraph: {
    title: "Next.js Metadata Guide",
    description: "A complete guide on how to use metadata in Next.js.",
    url: "https://example.com",
    siteName: "My Next.js Site",
    images: [
      {
        url: "https://example.com/og-image.jpg",
        width: 1200,
        height: 630,
        alt: "Next.js Metadata",
      },
    ],
    locale: "en_US",
    type: "website",
  },
  twitter: {
    card: "summary_large_image",
    title: "Next.js Metadata Guide",
    description: "A complete guide on how to use metadata in Next.js.",
    images: ["https://example.com/twitter-image.jpg"],
  },
  viewport: "width=device-width, initial-scale=1",
  themeColor: "#ffffff",
  icons: "/favicon.ico",
};

export default function HomePage() {
  return (
    <main className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <h1 className="text-3xl font-bold">Welcome to Next.js Metadata Example</h1>
      <p className="text-lg mt-2 text-gray-700">
        This page includes SEO-friendly metadata using Next.js 13+ App Router.
      </p>
    </main>
  );
}








// dynamic meta data

import { Metadata } from "next";

// âœ… Dynamic Metadata (Fetched from API)
export async function generateMetadata(): Promise<Metadata> {
  const post = await fetch("https://jsonplaceholder.typicode.com/posts/1").then((res) => res.json());

  return {
    title: post.title,
    description: post.body,
    openGraph: {
      title: post.title,
      description: post.body,
      url: `https://example.com/posts/${post.id}`,
      siteName: "My Blog",
      images: [
        {
          url: "https://example.com/default-image.jpg",
          width: 800,
          height: 600,
          alt: "Blog Post Image",
        },
      ],
      type: "article",
    },
  };
}

export default function BlogPage() {
  return (
    <main className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <h1 className="text-3xl font-bold">Blog Post</h1>
      <p className="text-lg mt-2 text-gray-700">This page fetches metadata dynamically from an API.</p>
    </main>
  );
}






// app router is yes 

signup / page.js   == route is signup 


app/
 â”œâ”€â”€ layout.tsx     (Main layout)
 â”œâ”€â”€ page.tsx       (Homepage - `/`)
 â”œâ”€â”€ about/
 â”‚   â”œâ”€â”€ page.tsx   (About page - `/about`)
 â”œâ”€â”€ contact/
 â”‚   â”œâ”€â”€ page.tsx   (Contact page - `/contact`)




// dyanamic routing 

app/
 â”œâ”€â”€ blog/
 â”‚   â”œâ”€â”€ [id]/
 â”‚   â”‚   â”œâ”€â”€ page.tsx   (Dynamic route - `/blog/:id`)




// app/blog/[id]/page.tsx
export default function BlogPost({ params }: { params: { id: string } }) {
  return <h1>Blog Post ID: {params.id}</h1>;
}
 



// pages/blog/[id].tsx
import { useRouter } from "next/router";

export default function BlogPost() {
  const router = useRouter();
  return <h1>Blog Post ID: {router.query.id}</h1>;
}



// multiple params 

// app/blog/[category]/[id]/page.tsx
export default function BlogPost({ params }: { params: { category: string; id: string } }) {
  return (
    <h1>
      Blog Category: {params.category}, Post ID: {params.id}
    </h1>
  );
}


// catch all route slug
app/
 â”œâ”€â”€ docs/
 â”‚   â”œâ”€â”€ [...slug]/     (Handles `/docs/*`)
 â”‚   â”‚   â”œâ”€â”€ page.tsx


// app/docs/[...slug]/page.tsx
export default function DocsPage({ params }: { params: { slug: string[] } }) {
  return <h1>Docs Path: {params.slug?.join("/")}</h1>;
}










// catch all routes 

app/
 â”œâ”€â”€ docs/
 â”‚   â”œâ”€â”€ [...slug]/
 â”‚   â”‚   â”œâ”€â”€ page.tsx   (Handles `/docs/*`)





// navigation between the pages in the nextjs 


import Link from "next/link";

export default function HomePage() {
  return (
    <div>
      <h1>Welcome</h1>
      <Link href="/about">Go to About Page</Link>
    </div>
  );
}




// layout 



export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <header>
          <nav>
            <a href="/">Home</a> | <a href="/about">About</a> | <a href="/contact">Contact</a>
          </nav>
        </header>
        <main>{children}</main>
        <footer>Â© 2025 My Website</footer>
      </body>
    </html>
  );
}


















// "use server "  , "use client" 












// page  not found 


export default function NotFoundPage() {
  return (
    <div style={{ textAlign: "center", padding: "50px" }}>
      <h1>404 - Page Not Found</h1>
      <p>Oops! The page youâ€™re looking for doesnâ€™t exist.</p>
      <a href="/" style={{ color: "blue" }}>Go Back Home</a>
    </div>
  );
}








//  handle not found dynamic 


import { notFound } from "next/navigation";

export default function BlogPost({ params }: { params: { id: string } }) {
  if (parseInt(params.id) > 100) {
    notFound(); // ðŸš€ Redirects to `not-found.tsx`
  }

  return <h1>Blog Post ID: {params.id}</h1>;
}








//  custom not found pages 

export default function Custom404() {
  return <h1>404 - This page could not be found.</h1>;
}








// loading page 

app/
 â”œâ”€â”€ dashboard/
 â”‚   â”œâ”€â”€ loading.tsx  (Only for `/dashboard`)
 â”‚   â”œâ”€â”€ page.tsx     (Dashboard page)




export default function Loading() {
  return (
    <div style={{ textAlign: "center", padding: "50px" }}>
      <h1>Loading...</h1>
    </div>
  );
}









// error Page

app/
 â”œâ”€â”€ layout.tsx
 â”œâ”€â”€ error.tsx   (Handles errors globally)
 â”œâ”€â”€ page.tsx
 â”œâ”€â”€ dashboard/
 â”‚   â”œâ”€â”€ page.tsx




"use client"; // Required for error boundaries

import { useEffect } from "react";

export default function GlobalError({ error, reset }: { error: Error; reset: () => void }) {
  useEffect(() => {
    console.error("Error:", error);
  }, [error]);

  return (
    <div style={{ textAlign: "center", padding: "50px" }}>
      <h1>Something went wrong!</h1>
      <p>{error.message}</p>
      <button onClick={reset} style={{ padding: "10px", cursor: "pointer" }}>
        Try Again
      </button>
    </div>
  );
}






















// learn about the dynamic route 





// generate static params 





// npm i prisma 
// npx prisma init --datasource-provider sqlite 