// content 

// 1 terminal command 
// 2 - git introduction - vcs  
// 3 gitignore 
// 4 Branch 
// 5 - Diff
// 6 - clone










// 1 terminal command 

### **File and Directory Navigation**
explorer.exe .              # Open current path in file explorer 
ls  , ls -a                 # List directory contents , -a show the hidden folder
cd <directory>              # Change directory
cd ..                       # Go up one directory
pwd                         # Print current working directory
mkdir <directory_name>      # Create a new directory
rmdir <directory_name>      # Remove an empty directory
rm -r <directory>           # Remove a directory and its contents recursively
touch <file_name>           # Create an empty file or update timestamp
cp <source> <destination>   # Copy files or directories
mv <source> <destination>   # Move or rename files or directories
rm <file_name>              # Remove a file
cat <file_name>             # Display file contents
less <file_name>            # View file contents page by page
head <file_name>            # Show the first 10 lines of a file
tail <file_name>            # Show the last 10 lines of a file
nano <file_name>            # Open a file in the nano text editor

### **File Permissions**
chmod <permissions> <file_name>   # Change file permissions
chown <user>:<group> <file_name>  # Change file owner and group
ls -l                       # List files with detailed permissions

### **Search and Find Files**
find <path> -name <file_name>      # Search for files by name
grep "<pattern>" <file_name>      # Search for text pattern within files

### **System Monitoring**
top                         # Display real-time system processes and resource usage
ps                          # Display running processes
df                          # Show disk space usage
free                        # Show memory usage
uptime                      # Show how long the system has been running

### **File Compression and Archiving**
tar -czf <archive_name>.tar.gz <directory_or_file>  # Create a compressed archive (gzip)
tar -xzf <archive_name>.tar.gz  # Extract a compressed archive (gzip)
zip <archive_name>.zip <file_or_directory>  # Create a zip archive
unzip <archive_name>.zip       # Extract a zip archive

### **Networking**
ping <host>                 # Check if a host is reachable
curl <url>                  # Fetch contents from a URL
wget <url>                  # Download a file from a URL
ifconfig                   # Display network interface configuration (older command)
ip a                        # Display network interfaces (modern alternative)

### **File System Navigation**
mount <device> <mount_point>  # Mount a device or filesystem
umount <mount_point>         # Unmount a filesystem

### **Process Management**
kill <pid>                 # Terminate a process by its process ID
killall <process_name>      # Terminate all processes with a given name
bg                          # Resume a paused job in the background
fg                          # Bring a background job to the foreground

### **Others**
history                    # Display command history
clear                      # Clear the terminal screen
exit                       # Exit the terminal session










// 2 - git introduction - vcs  

git --version 

git config --global user.name "Your Name"
git config --global user.email "youremail@example.com"

git config --list



// initialize git repo

git init 

git status 

git add .

git add text.txt
git add text.txt text1.txt 

git rm text.txt

git commit -m "message"

git commit -a -m "Update file.txt with new content"



/// working directories ///
add . 
/// staging area ///
git commit 
/// repository ///
git push 
/// github///



git log 
git log --oneline 


/ amending the commit  // with this we can amend previous commit 

git commit --amend










// 3 gitignore 










// 4 Branch 

/ main head branch 

/ to the branch 
git branch 

/ create new branch or the switch 
git branch newBranchName     

// it delete the branch , but this command give the 
   warning if the code is not merge  
git branch -d branch_name
git branch -r 

// force full delete 
git branch -D branch_name



git switch branchName 

// it create the branch and the switch the branch 
git switch 
git switch -c branchName







git checkout branchName 

/create and switch
git checkout -b branchName

 git checkout origin/main 





// force full delete 
git branch -D branch_name


git push origin --delete branch_name

git branch -r



// rename the branch 
git branch -m new-branch-name
git branch -M <new-branch-name>  // force full 



git branch -m old-branch-name new-branch-name

git push origin new-branch-name
mm










// Merge 


/ types of merge 
/ 1 - fast farward merge - parent have no additional commit 
/ 2 - recursive merge - both branch have the change but not in same file , if it have the have the
      change in the same file but not in the same line of code . thats why it will not create any 
      merge conflict   , it give the message of auto merge by the git 
/ 3 - you will get conflict when changes have on same file and same line 


/ merge in current branch , otherBranch 
git merge otherBranch











// 5 - Diff

// compare staging area to working directories
git diff 

git diff --cached

git diff branch1..branch2

git diff <commit1> <commit2> -- <file_path>

git diff a1b2c3d4 e5f6g7h8 -- src/app.js










// Stash 

git stash 

git stash pop

git stash list

git stash apply stash@{1}

git stash clear











// clone 

git clone https://github.com/username/repository.git

/ clone Specific branch 
git clone -b branch_name https://github.com/username/repository.git


/ remote command 

git remote 
git remote -v // list of all remote origin 
git remote add <remote-name> <remote-url>

/ change the url of the remote origin 
git remote set-url <remote-name> <new-remote-url>
git remote set-url origin https://github.com/username/new-repo.git

/Removing a Remote Repository
git remote remove <remote-name>
git remote remove origin

/Renaming a Remote
git remote rename <old-name> <new-name>
git remote rename origin upstream



/  Fetching Changes from a Remote
git fetch <remote-name>
git fetch origin

/Pushing Changes to a Remote Repository
git push <remote-name> <branch-name>
git push origin main

git push <remote-name> <source-branch>:<destination-branch>

git push -u <remote-name> <local-branch>




/ Pulling Changes from a Remote Repository
git pull <remote-name> <branch-name>
git pull origin main







// git time travellig

git checkout dfd43g  // detach head


/ one commit back 
git checkout HEAD~1

/ back to top at current branch 
git switch - 


// it remove the all unadded changes  like before the git add .

git checkout head index.js





// restore 

/before add command , means only change not add file  
git restore index.js

git restore --staged <file_name>

git restore .

git restore --source=<commit_hash> <file_name>


/ if you accidently added a file by git add . and want to remove from the staging area 

git restore --staged <file_name>
git restore --staged example.txt




// reset 

/ want to remove the only commits not changes 
git reset --soft <commit_hash>


/mix

git reset <commit_hash>


/ hard

git reset --hard <commit_hash>


git reset --hard abc1234

git reset --hard feature-branch

git reset <file_name>




// revert 

git revert HEAD


git revert abc1234


































