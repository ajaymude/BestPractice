// React Router dom

 // src/index.js or src/App.js

import React from 'react';
import ReactDOM from 'react-dom';
import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import Home from './Home'; // Import the components
import About from './About';
import NotFound from './NotFound';

// Create the browser router with routes
const router = createBrowserRouter([
  {
    path: "/",
    element: <Home />, // The component for the home route
    errorElement: <ErrorPage />, // The fallback error component for this route
    children: [
      {
        index: true, 
        element: <Dashboard />, // The dashboard component as the default child route
      },
      {
        path: "/", 
        element: <Dashboard />, // The dashboard component as the default child route
      },
      {
        path: "/settings",
        element: <Settings />,  // The settings page nested under the main layout
      },
            {
        path: "/settings/:id",
        element: <Settings2 />,  // The settings page nested under the main layout
      },
      {
        path: "/user/:userId/post/:postId", // Define two dynamic parameters
        element: <UserPost />,
      },
    ]
  },
  {
    path: "/about",
    element: <About />, // The component for the about route
  },
  {
    path: "*", // This catches all other routes (404)
    element: <NotFound />,
  }
]);

// Render the application with RouterProvider and pass the router
ReactDOM.render(
  <RouterProvider router={router} />,
  document.getElementById('root')
);




// main route
// src/MainLayout.js
import React from 'react';
import { Link, Outlet } from 'react-router-dom';

function MainLayout() {
  return (
    <div>
      <header>
        <h1>My App</h1>
        <nav>
          <ul>
            <li>
              <Link to="/">Dashboard</Link>
            </li>
            <li>
              <Link to="/settings">Settings</Link>
            </li>
          </ul>
        </nav>
      </header>
      
      <main>
        {/* This is where the nested routes will render */}
        <Outlet />
      </main>
    </div>
  );
}

export default MainLayout;





















// useParams

// src/Post.js
import React from 'react';
import { useParams } from 'react-router-dom';

function Post() {
  const { id } = useParams(); // Accessing the dynamic 'id' parameter
  const { userId, postId } = useParams(); // Accessing both dynamic parameters

  return (
    <div>
      <h1>Post {id}</h1>
      <p>Here is the content for the post with ID {id}</p>
    </div>
  );
}

export default Post;



















// loader and useLoaderData

// src/loaders.js
export async function postsLoader() {
  const response = await fetch('https://jsonplaceholder.typicode.com/posts');
  const data = await response.json();
  return data;
}


// src/Posts.js
import React from 'react';
import { useLoaderData } from 'react-router-dom';

function Posts() {
  const posts = useLoaderData(); // Get the loaded data (posts)

  return (
    <div>
      <h1>Posts</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>
            <h2>{post.title}</h2>
            <p>{post.body}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default Posts;



// src/index.js or src/App.js
import React from 'react';
import ReactDOM from 'react-dom';
import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import Posts from './Posts';
import { postsLoader } from './loaders'; // Import the loader function

// Create the browser router with the loader function
const router = createBrowserRouter([
  {
    path: "/posts", // Define the path for the posts route
    element: <Posts />,
    loader: postsLoader, // Attach the loader function to fetch data before rendering
  },
]);

ReactDOM.render(
  <RouterProvider router={router} />,
  document.getElementById('root')
);




// form 

// src/Search.js
import React, { useState } from 'react';
import { Form, useNavigate } from 'react-router-dom';

function Search() {
  const [query, setQuery] = useState('');
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    // Here you could navigate to the results page or handle any other logic
    console.log("Search Query:", query);
    // For now, just navigating to the /search page after submit
    navigate(`/search?query=${query}`);
  };

  return (
    <div>
      <h1>Search Form</h1>
      <Form method="post" onSubmit={handleSubmit}>
        <label>
          Search Query:
          <input
            type="text"
            name="query"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
          />
        </label>
        <button type="submit">Search</button>
      </Form>
    </div>
  );
}

export default Search;



// src/actions.js
export async function saveSearchData({ request }) {
  // Parse the form data
  const formData = new URLSearchParams(await request.text());
  const query = formData.get('query');

  // Perform your data saving logic here (e.g., saving to a server or database)
  console.log("Saving search query:", query);

  // You can also perform validation or other actions here if needed
  // Redirecting to a different page after form submission, like displaying results
  return { query };
}



// src/App.js
import React from 'react';
import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import Search from './Search';
import { saveSearchData } from './actions'; // Import the action function

const router = createBrowserRouter([
  {
    path: "/search",
    element: <Search />,
    action: saveSearchData, // Add the action to handle form submissions
  },
]);

function App() {
  return (
    <RouterProvider router={router} />
  );
}

export default App;






import { NavLink } from "react-router";

export function MyAppNav() {
  return (
    <nav>
      <NavLink to="/" end>
        Home
      </NavLink>
      <NavLink to="/trending" end>
        Trending Concerts
      </NavLink>
      <NavLink to="/concerts">All Concerts</NavLink>
      <NavLink to="/account">Account</NavLink>
    </nav>
  );
}





a.active {
  color: red;
}

a.pending {
  animate: pulse 1s infinite;
}

a.transitioning {
  /* css transition is running */
}




// Browser navigation 

import React from 'react';
import { useNavigate } from 'react-router-dom';

const NavigateExample = () => {
  const navigate = useNavigate();

  const handleNavigate = () => {
    // Navigate to the About page
    navigate('/about');
  };

  return (
    <div>
      <h1>Navigate Example</h1>
      <button onClick={handleNavigate}>Go to About</button>
    </div>
  );
};

export default NavigateExample;





import React from 'react';
import { useNavigate } from 'react-router-dom';

const NavigateExample = () => {
  const navigate = useNavigate();

  const handleBack = () => {
    // Go back one step in the history stack
    navigate(-1);
  };

  return (
    <div>
      <h1>Navigate Example</h1>
      <button onClick={handleBack}>Go Back</button>
    </div>
  );
};

export default NavigateExample;



