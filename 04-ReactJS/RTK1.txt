

redux installation 

npm install @reduxjs/toolkit react-redux



/ 1 - steps to use redux toolkit

import { configureStore } from '@reduxjs/toolkit';

const store = configureStore({
  reducer: {} // We'll add reducers later
});

export default store;







/ 2 - create the slice for the store 

import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  value: 0
};

const counterSlice = createSlice({
  name: 'counter', // Slice name
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    }
  }
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export default counterSlice.reducer;






/ 3 - configure the slice in the store 

import { configureStore } from '@reduxjs/toolkit';
import counterReducer from './counterSlice';

const store = configureStore({
  reducer: {
    counter: counterReducer
  }
});

export default store;





/ 4 - connecting the store to the react 

import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import store from './store';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={store}>
    <App />
  </Provider>
);






/ 5 - access the store in the react component 

import React from 'react';
import { useSelector } from 'react-redux';

const App = () => {
  const count = useSelector((state) => state.counter.value);

  return (
    <div>
      <h1>Counter: {count}</h1>
    </div>
  );
};

export default App;






/ 6 - dispatch the value in the store  , call the function 

import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement, incrementByAmount } from './counterSlice';

const App = () => {
  const count = useSelector((state) => state.counter.value);
  const dispatch = useDispatch();

  return (
    <div>
      <h1>Counter: {count}</h1>
      <button onClick={() => dispatch(increment())}>Increment</button>
      <button onClick={() => dispatch(decrement())}>Decrement</button>
      <button onClick={() => dispatch(incrementByAmount(5))}>
        Increment by 5
      </button>
    </div>
  );
};

export default App;






/ 7 - use the asyncthunk in redux slice 


import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';



/ with the try catch 


// API URL
const API_URL = 'https://jsonplaceholder.typicode.com/users';

// Step 1: Define an async thunk with try/catch for error handling
export const fetchUsers = createAsyncThunk('users/fetchUsers', async (_, { rejectWithValue }) => {
  try {
    const response = await fetch(API_URL);
    
    // Step 2: Check if response is NOT okay (e.g., 404, 500 errors)
    if (!response.ok) {
      throw new Error(`Error ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    // Step 3: Return a rejected value with a custom error message
    return rejectWithValue(error.message);
  }
});






// Step 2: Define the async function using createAsyncThunk
export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {
  const response = await fetch('https://jsonplaceholder.typicode.com/users');
  return response.json(); // Redux Toolkit automatically returns the data as the payload
});




// Step 3: Define the initial state
const initialState = {
  users: [],
  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
  error: null,
};

// Step 4: Create the user slice
const userSlice = createSlice({
  name: 'users',
  initialState,
  reducers: {}, // No reducers needed for async thunk
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsers.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchUsers.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.users = action.payload; // Store fetched users in state
      })
      .addCase(fetchUsers.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      });
  },
});

export default userSlice.reducer;



import { configureStore } from '@reduxjs/toolkit';
import userReducer from './userSlice';

const store = configureStore({
  reducer: {
    users: userReducer,
  },
});

export default store;






/ 8 - use the asyncthunk in the react componet 



import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { fetchUsers } from './userSlice';

const UsersList = () => {
  const dispatch = useDispatch();
  const users = useSelector((state) => state.users.users);
  const status = useSelector((state) => state.users.status);
  const error = useSelector((state) => state.users.error);

  useEffect(() => {
    if (status === 'idle') {
      dispatch(fetchUsers()); // Dispatch the async thunk
    }
  }, [status, dispatch]);

  if (status === 'loading') return <p>Loading...</p>;
  if (status === 'failed') return <p>Error: {error}</p>;

  return (
    <div>
      <h2>User List</h2>
      <ul>
        {users.map((user) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default UsersList;




import React from 'react';
import UsersList from './UsersList';

const App = () => {
  return (
    <div>
      <h1>Redux Toolkit Async Example</h1>
      <UsersList />
    </div>
  );
};

export default App;


























/ 9 - rtk query in react , create the api 


import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const usersApi = createApi({
  reducerPath: 'usersApi',
  baseQuery: fetchBaseQuery({ baseUrl: 'https://jsonplaceholder.typicode.com/' }),
  endpoints: (builder) => ({
    getUsers: builder.query({
      query: () => 'users',
      keepUnusedDataFor: 60, // Cache data for 60 seconds before removing it
    }),
  }),
});

export const { useGetUsersQuery } = usersApi;






/ 10 - add the api to the store 

import { configureStore } from '@reduxjs/toolkit';
import { usersApi } from './usersApi';

const store = configureStore({
  reducer: {
    [usersApi.reducerPath]: usersApi.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(usersApi.middleware),
});

export default store;






/ 10 - use the data in the react component 


import React from 'react';
import { useGetUsersQuery } from './usersApi';

const UsersList = () => {
  const { data: users, error, isLoading } = useGetUsersQuery();

  if (isLoading) return <p>Loading...</p>;
  if (error) return <p>Error: {error.message}</p>;

  return (
    <div>
      <h2>User List</h2>
      <ul>
        {users.map((user) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default UsersList;







/ 12 -  npm i react-spinners react spinners 

import React from 'react';
import { useGetUsersQuery } from './usersApi';
import ClipLoader from 'react-spinners/ClipLoader'; // Import spinner

const UsersList = () => {
  const { data: users, error, isLoading } = useGetUsersQuery();

  if (isLoading) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>
        <ClipLoader color="#36d7b7" size={50} />
      </div>
    );
  }

  if (error) return <p style={{ color: 'red' }}>Error: {error.message}</p>;

  return (
    <div>
      <h2>User List</h2>
      <ul>
        {users.map((user) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default UsersList;





/ 13 - addin the spinner in react component 


import React from 'react';
import { useGetUsersQuery } from './usersApi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';

const UsersList = () => {
  const { data: users, error, isLoading } = useGetUsersQuery();

  if (isLoading) {
    return (
      <div>
        <h2><Skeleton width={200} /></h2>
        <ul>
          {[...Array(5)].map((_, index) => (
            <li key={index} style={{ marginBottom: '10px' }}>
              <Skeleton width={150} height={20} />
            </li>
          ))}
        </ul>
      </div>
    );
  }

  if (error) return <p style={{ color: 'red' }}>Error: {error.message}</p>;

  return (
    <div>
      <h2>User List</h2>
      <ul>
        {users.map((user) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default UsersList;






/ 

















































// rtk 



/ 1 - create the api for fetch the data of the send the data 

import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

// Define the API slice
export const apiSlice = createApi({
  reducerPath: 'api',  // Name of the slice in the Redux store
  baseQuery: fetchBaseQuery({ baseUrl: 'https://jsonplaceholder.typicode.com' }), // Base API URL
  endpoints: (builder) => ({
    getPosts: builder.query({
      query: () => '/posts',  // API endpoint
    }),
  }),
});

// Export the generated hook for the query
export const { useGetPostsQuery } = apiSlice;





/ 2 - adding the api to the slice store 

import { configureStore } from '@reduxjs/toolkit';
import { apiSlice } from './apiSlice';

export const store = configureStore({
  reducer: {
    [apiSlice.reducerPath]: apiSlice.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(apiSlice.middleware),
});






/ 3 - use the api in the react component 


import React from 'react';
import { useGetPostsQuery } from './apiSlice';

const PostsList = () => {
  const { data: posts, error, isLoading } = useGetPostsQuery();

  if (isLoading) return <p>Loading...</p>;
  if (error) return <p>Error fetching posts.</p>;

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  );
};

export default PostsList;






/ 4 - crud with the rtk create the api for the rtk



import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

// Define the API slice
export const apiSlice = createApi({
  reducerPath: 'api',
  baseQuery: fetchBaseQuery({ baseUrl: 'https://jsonplaceholder.typicode.com' }),
  endpoints: (builder) => ({
    // GET request (query)
    getPosts: builder.query({
      query: () => '/posts',
    }),

    // POST request (create new post)
    addPost: builder.mutation({
      query: (newPost) => ({
        url: '/posts',
        method: 'POST',
        body: newPost,
      }),
    }),

    // PUT request (update post)
    updatePost: builder.mutation({
      query: ({ id, ...updatedData }) => ({
        url: `/posts/${id}`,
        method: 'PUT',
        body: updatedData,
      }),
    }),

    // DELETE request (delete post)
    deletePost: builder.mutation({
      query: (id) => ({
        url: `/posts/${id}`,
        method: 'DELETE',
      }),
    }),
  }),
});

// Export hooks
export const { 
  useGetPostsQuery, 
  useAddPostMutation, 
  useUpdatePostMutation, 
  useDeletePostMutation 
} = apiSlice;




/ 5 - use the api in the react component 

import React, { useState } from 'react';
import { useAddPostMutation } from './apiSlice';

const AddPost = () => {
  const [addPost] = useAddPostMutation();
  const [title, setTitle] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    await addPost({ title, body: 'This is a new post', userId: 1 });
    setTitle('');
  };

  return (
    <form onSubmit={handleSubmit}>
      <input 
        type="text" 
        value={title} 
        onChange={(e) => setTitle(e.target.value)} 
        placeholder="Enter title"
      />
      <button type="submit">Add Post</button>
    </form>
  );
};

export default AddPost;


/ update 

import React, { useState } from 'react';
import { useUpdatePostMutation } from './apiSlice';

const UpdatePost = () => {
  const [updatePost] = useUpdatePostMutation();
  const [postId, setPostId] = useState('');
  const [newTitle, setNewTitle] = useState('');

  const handleUpdate = async () => {
    await updatePost({ id: postId, title: newTitle, body: 'Updated post content' });
    setPostId('');
    setNewTitle('');
  };

  return (
    <div>
      <input 
        type="text" 
        value={postId} 
        onChange={(e) => setPostId(e.target.value)} 
        placeholder="Post ID"
      />
      <input 
        type="text" 
        value={newTitle} 
        onChange={(e) => setNewTitle(e.target.value)} 
        placeholder="New Title"
      />
      <button onClick={handleUpdate}>Update Post</button>
    </div>
  );
};

export default UpdatePost;




/ delete 

import React, { useState } from 'react';
import { useDeletePostMutation } from './apiSlice';

const DeletePost = () => {
  const [deletePost] = useDeletePostMutation();
  const [postId, setPostId] = useState('');

  const handleDelete = async () => {
    await deletePost(postId);
    setPostId('');
  };

  return (
    <div>
      <input 
        type="text" 
        value={postId} 
        onChange={(e) => setPostId(e.target.value)} 
        placeholder="Post ID to delete"
      />
      <button onClick={handleDelete}>Delete Post</button>
    </div>
  );
};

export default DeletePost;



