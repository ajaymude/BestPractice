

redux installation 

npm install @reduxjs/toolkit react-redux



/ 1 - steps to use redux toolkit

import { configureStore } from '@reduxjs/toolkit';

const store = configureStore({
  reducer: {} // We'll add reducers later
});

export default store;







/ 2 - create the slice for the store 

import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  value: 0
};

const counterSlice = createSlice({
  name: 'counter', // Slice name
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    }
  }
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export default counterSlice.reducer;






/ 3 - configure the slice in the store 

import { configureStore } from '@reduxjs/toolkit';
import counterReducer from './counterSlice';

const store = configureStore({
  reducer: {
    counter: counterReducer
  }
});

export default store;





/ 4 - connecting the store to the react 

import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import store from './store';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={store}>
    <App />
  </Provider>
);






/ 5 - access the store in the react component 

import React from 'react';
import { useSelector } from 'react-redux';

const App = () => {
  const count = useSelector((state) => state.counter.value);

  return (
    <div>
      <h1>Counter: {count}</h1>
    </div>
  );
};

export default App;






/ 6 - dispatch the value in the store  , call the function 

import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement, incrementByAmount } from './counterSlice';

const App = () => {
  const count = useSelector((state) => state.counter.value);
  const dispatch = useDispatch();

  return (
    <div>
      <h1>Counter: {count}</h1>
      <button onClick={() => dispatch(increment())}>Increment</button>
      <button onClick={() => dispatch(decrement())}>Decrement</button>
      <button onClick={() => dispatch(incrementByAmount(5))}>
        Increment by 5
      </button>
    </div>
  );
};

export default App;






/ 7 - use the asyncthunk in redux slice 


import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';



/ with the try catch 


// API URL
const API_URL = 'https://jsonplaceholder.typicode.com/users';

// Step 1: Define an async thunk with try/catch for error handling
export const fetchUsers = createAsyncThunk('users/fetchUsers', async (_, { rejectWithValue }) => {
  try {
    const response = await fetch(API_URL);
    
    // Step 2: Check if response is NOT okay (e.g., 404, 500 errors)
    if (!response.ok) {
      throw new Error(`Error ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    // Step 3: Return a rejected value with a custom error message
    return rejectWithValue(error.message);
  }
});






// Step 2: Define the async function using createAsyncThunk
export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {
  const response = await fetch('https://jsonplaceholder.typicode.com/users');
  return response.json(); // Redux Toolkit automatically returns the data as the payload
});




// Step 3: Define the initial state
const initialState = {
  users: [],
  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
  error: null,
};

// Step 4: Create the user slice
const userSlice = createSlice({
  name: 'users',
  initialState,
  reducers: {}, // No reducers needed for async thunk
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsers.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchUsers.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.users = action.payload; // Store fetched users in state
      })
      .addCase(fetchUsers.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      });
  },
});

export default userSlice.reducer;



import { configureStore } from '@reduxjs/toolkit';
import userReducer from './userSlice';

const store = configureStore({
  reducer: {
    users: userReducer,
  },
});

export default store;






/ 8 - use the asyncthunk in the react componet 



import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { fetchUsers } from './userSlice';

const UsersList = () => {
  const dispatch = useDispatch();
  const users = useSelector((state) => state.users.users);
  const status = useSelector((state) => state.users.status);
  const error = useSelector((state) => state.users.error);

  useEffect(() => {
    if (status === 'idle') {
      dispatch(fetchUsers()); // Dispatch the async thunk
    }
  }, [status, dispatch]);

  if (status === 'loading') return <p>Loading...</p>;
  if (status === 'failed') return <p>Error: {error}</p>;

  return (
    <div>
      <h2>User List</h2>
      <ul>
        {users.map((user) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default UsersList;




import React from 'react';
import UsersList from './UsersList';

const App = () => {
  return (
    <div>
      <h1>Redux Toolkit Async Example</h1>
      <UsersList />
    </div>
  );
};

export default App;







/ 9 - 