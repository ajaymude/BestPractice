// folder structure 

// - src 
       - public 
       - assets 
       - utils 
            - constant.js 
       - store
            - api 
            - slice
            - rootReducer.js
            -store.js 
       - pages 
       - component
       - sckeleton
       - Layout.js 
       - MainRoute.js





// use the react toast to notify the user 














// notes

- Keep Your Components Small and Focused.

- component only has a single responsibility.

- Use React Fragments to Avoid Unnecessary Wrappers.

- Leverage the Power of React Hooks

- create seperate file for the route 

- create a variable for the css 

- create seperate file for the react router dom 

- In react screen handdle 3 conditions
  1- loading screen or waiting for api response 
  2 - error screen  or error in api response 
  3 - api response or data from the api

- use axios with abort 

- Never mix UI with the logic 

- 

















// creating the component 
handle the loading 
handle error 
handle data 

// calling the api handle 
loading 
error 
is data correct commign 



 (
            Array.from({ length: 8 }).map((_, index) => (
              <CourseSkeleton key={index} />
            ))




const appRouter = createBrowserRouter([
  {
    path: "/",
    element: <MainLayout />,
    children: [
      {
        path: "/",
        element: (
          <>
            <HeroSection />
            <Courses />
          </>
        ),
      },
      {
        path: "login",
        element: (
          <AuthenticatedUser>
            <Login />
          </AuthenticatedUser>
        ),
      },
      {
        path: "my-learning",
        element: (
          <ProtectedRoute>
            <MyLearning />
          </ProtectedRoute>
        ),
      },
      {
        path: "profile",
        element: (
          <ProtectedRoute>
            <Profile />
          </ProtectedRoute>
        ),
      },
      {
        path: "course/search",
        element: (
          <ProtectedRoute>
            <SearchPage />
          </ProtectedRoute>
        ),
      },
      {
        path: "course-detail/:courseId",
        element: (
          <ProtectedRoute>
            <CourseDetail />
          </ProtectedRoute>
        ),
      },
      {
        path: "course-progress/:courseId",
        element: (
          <ProtectedRoute>
            <PurchaseCourseProtectedRoute>
            <CourseProgress />
            </PurchaseCourseProtectedRoute>
          </ProtectedRoute>
        ),
      },

      // admin routes start from here
      {
        path: "admin",
        element: (
          <AdminRoute>
            <Sidebar />
          </AdminRoute>
        ),
        children: [
          {
            path: "dashboard",
            element: <Dashboard />,
          },
          {
            path: "course",
            element: <CourseTable />,
          },
          {
            path: "course/create",
            element: <AddCourse />,
          },
          {
            path: "course/:courseId",
            element: <EditCourse />,
          },
          {
            path: "course/:courseId/lecture",
            element: <CreateLecture />,
          },
          {
            path: "course/:courseId/lecture/:lectureId",
            element: <EditLecture />,
          },
        ],
      },
    ],
  },
]);