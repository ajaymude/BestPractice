// ‚úÖ React.js Full Syllabus (Beginner to Expert)

// üìò BASICS & SETUP
// 01 - What is React and why use it?
// 02 - React vs Vanilla JS vs Frameworks
// 03 - Setting up React with Vite / CRA (Create React App)
// 04 - Folder structure and entry point (index.js/main.jsx)
// 05 - JSX syntax and rules

// üîß COMPONENTS IN REACT
// 06 - Functional Components
// 07 - Class Components (for comparison)
// 08 - Component Naming Conventions
// 09 - Component Composition (children)
// 10 - Fragments (<> </>)

// üì¶ PROPS AND STATE
// 11 - Props basics (data from parent to child)
// 12 - Default props
// 13 - Prop types validation
// 14 - useState hook ‚Äì syntax, updates, patterns
// 15 - Initial state from props or external data

// üîÅ HANDLING EVENTS
// 16 - Event handlers in React
// 17 - Passing arguments to event handlers
// 18 - Handling forms and input fields
// 19 - Controlled vs Uncontrolled components
// 20 - Keyboard and mouse events

// üéØ CONDITIONAL RENDERING
// 21 - Using if, ternary, and && in JSX
// 22 - Rendering fallback UI
// 23 - Showing/hiding elements

// üî¢ LISTS AND KEYS
// 24 - Rendering lists using .map()
// 25 - Using keys correctly
// 26 - Conditional rendering with lists
// 27 - Nested list rendering

// üîÑ HOOKS (FUNDAMENTALS)
// 28 - useState
// 29 - useEffect
// 30 - useRef
// 31 - useContext
// 32 - Custom Hooks
// 33 - Rules of Hooks

// üß† COMPONENT LIFECYCLE
// 34 - Lifecycle phases
// 35 - Replacing lifecycle methods with Hooks
// 36 - Cleanup functions in useEffect

// üåê REACT ROUTER
// 37 - Installing React Router
// 38 - Route, Link, and BrowserRouter
// 39 - useParams, useNavigate
// 40 - Nested Routes
// 41 - Redirects and NotFound pages

// üí¨ CONTEXT API
// 42 - Creating and using context
// 43 - useContext hook
// 44 - Sharing global data
// 45 - Updating context values

// üîß FORMS AND VALIDATION
// 46 - Controlled inputs
// 47 - Form submission handling
// 48 - Validating input manually
// 49 - Using libraries: Formik / React Hook Form
// 50 - Error messages and UX

// üì° HTTP REQUESTS & APIs
// 51 - Fetching data with fetch()
// 52 - Axios integration
// 53 - useEffect with fetch
// 54 - useState + useEffect pattern for API
// 55 - Async/await with API calls
// 56 - Loader and error states

// üß© STATE MANAGEMENT ADVANCED
// 57 - Lifting state up
// 58 - Prop drilling problem
// 59 - Global state with Context
// 60 - useReducer hook
// 61 - Intro to Redux Toolkit

// üß∞ REDUX TOOLKIT
// 62 - Setting up Redux in React
// 63 - Creating slices and store
// 64 - useSelector and useDispatch
// 65 - Async actions with createAsyncThunk
// 66 - Redux DevTools

// üé® STYLING IN REACT
// 67 - Inline styling
// 68 - CSS Modules
// 69 - Styled-components
// 70 - Tailwind CSS in React
// 71 - Classname conditionals (clsx, classnames)

// üìÅ CODE ARCHITECTURE & BEST PRACTICES
// 72 - Smart vs Dumb components
// 73 - Container vs Presentational
// 74 - Folder structure for scaling
// 75 - Custom Hooks and separation of logic

// üß™ TESTING IN REACT
// 76 - Testing basics with Jest
// 77 - React Testing Library
// 78 - Unit testing components
// 79 - Mocking API requests

// üöÄ PERFORMANCE OPTIMIZATION
// 80 - Memoization with React.memo
// 81 - useMemo and useCallback
// 82 - Lazy loading and Suspense
// 83 - Code splitting with React.lazy
// 84 - Virtualized lists (react-window)

// ‚öõÔ∏è REACT AND TYPESCRIPT (Optional Advanced)
// 85 - Adding TypeScript to React
// 86 - Typing props and state
// 87 - Typing event handlers
// 88 - Using generics

// üß± REACT NATIVE BASICS (Bonus)
// 89 - What is React Native?
// 90 - Setting up a basic app
// 91 - Core components and styling
// 92 - Navigation in RN

// üß† EXPERT-LEVEL CONCEPTS
// 93 - Refs and DOM access
// 94 - Forwarding refs
// 95 - Portals in React
// 96 - Error boundaries
// 97 - Render props and HOCs
// 98 - Compound components pattern
// 99 - Declarative animations (Framer Motion)
// 100 - Server components (React 19+ preview)







/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////










// 01 - installation 
// npm create vite@latest
// npm create vite@latest foldername -- --template  react 



// 02 - component





// 03 - data 
// create a data for the list like nav list or link this can make your code cleaner 
// always map your data , don't hard code every time 




// 04 - short circuit 

function WelcomeMessage({ isLoggedIn }) {
    return (
      <div>
        <h1>Welcome to the App</h1>
        {isLoggedIn && <p>You are logged in!</p>}
      </div>
    );
  }

  

function Greeting({ name }) {
  return <h1>Hello, {name || "Guest"}!</h1>;
}



//Short-Circuit vs Ternary (? :)
{isLoggedIn ? <p>You are logged in!</p> : <p>Please log in.</p>}

