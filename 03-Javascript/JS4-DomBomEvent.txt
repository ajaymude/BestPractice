// list of event 

1. Mouse Events
click: Fired when the mouse is clicked on an element.
dblclick: Fired when the mouse is double-clicked on an element.
mousedown: Fired when a mouse button is pressed on an element.
mouseup: Fired when a mouse button is released on an element.
mouseenter: Fired when the mouse enters an element (does not bubble).
mouseleave: Fired when the mouse leaves an element (does not bubble).
mousemove: Fired when the mouse pointer moves over an element.
mouseover: Fired when the mouse enters an element or its child elements.
mouseout: Fired when the mouse leaves an element or its child elements.
contextmenu: Fired when the right mouse button is clicked.

2. Keyboard Events
keydown: Fired when a key is pressed down.
keypress: Fired when a key is pressed (deprecated in some cases).
keyup: Fired when a key is released.

3. Focus Events
focus: Fired when an element gains focus.
blur: Fired when an element loses focus.
focusin: Fired when an element or its children gain focus (bubbles).
focusout: Fired when an element or its children lose focus (bubbles).

4. Form Events
submit: Fired when a form is submitted.
change: Fired when the value of an input element is changed.
input: Fired when the value of an input element is being modified.
reset: Fired when a form is reset.
select: Fired when some text inside an input or textarea is selected.
invalid: Fired when an input element's value is invalid.

5. Window Events
load: Fired when the entire page and its resources have finished loading.
resize: Fired when the window is resized.
scroll: Fired when the user scrolls the page or an element.
unload: Fired when the document or a child resource is being unloaded.
beforeunload: Fired before the page is unloaded (used to warn users).
orientationchange: Fired when the orientation of the device changes.

6. Touch Events (for mobile devices)
touchstart: Fired when the user touches an element.
touchmove: Fired when the user moves their finger across the screen.
touchend: Fired when the user stops touching an element.
touchcancel: Fired when the touch event is interrupted.

7. Clipboard Events
copy: Fired when the user copies content to the clipboard.
cut: Fired when the user cuts content to the clipboard.
paste: Fired when the user pastes content from the clipboard.
8. Media Events
play: Fired when a media element starts playing.
pause: Fired when the media element is paused.
ended: Fired when the media element has finished playing.
volumechange: Fired when the volume is changed.
timeupdate: Fired when the current playback position is updated.

9. Drag and Drop Events
drag: Fired when an element is being dragged.
dragstart: Fired when the drag operation starts.
dragend: Fired when the drag operation ends.
dragenter: Fired when the dragged element enters a valid drop target.
dragover: Fired when the dragged element is over a valid drop target.
dragleave: Fired when the dragged element leaves a valid drop target.
drop: Fired when the dragged element is dropped onto a valid drop target.

10. Animation Events
animationstart: Fired when a CSS animation starts.
animationend: Fired when a CSS animation ends.
animationiteration: Fired when a CSS animation repeats.

11. Transition Events
transitionstart: Fired when a CSS transition starts.
transitionend: Fired when a CSS transition ends.
transitioncancel: Fired when a CSS transition is canceled.

12. Other Events
error: Fired when an error occurs while loading a resource (e.g., image or script).
resize: Fired when an element or window is resized.
input: Fired when a user interacts with an <input> or <textarea> field.









// methods 

// 1. getElementById()
let element = document.getElementById('myId');
console.log(element);  // Output: <div id="myId">...</div>

// 2. getElementsByClassName()
let elements = document.getElementsByClassName('myClass');
console.log(elements);  // Output: HTMLCollection of elements with class "myClass"

// 3. getElementsByTagName()
let elements = document.getElementsByTagName('p');
console.log(elements);  // Output: HTMLCollection of <p> elements

// 4. querySelector()
let element = document.querySelector('.myClass');
console.log(element);  // Output: First element with class "myClass"

// 5. querySelectorAll()
let elements = document.querySelectorAll('p.myClass');
console.log(elements);  // Output: NodeList of all <p> elements with class "myClass"

// 6. getAttribute()
let element = document.getElementById('myId');
let value = element.getAttribute('class');
console.log(value);  // Output: Value of the class attribute of the element

// 7. setAttribute()
let element = document.getElementById('myId');
element.setAttribute('class', 'newClass');
console.log(element);  // Output: <div id="myId" class="newClass">...</div>

// 8. removeAttribute()
let element = document.getElementById('myId');
element.removeAttribute('class');
console.log(element);  // Output: <div id="myId">...</div>

// 9. classList.add()
let element = document.getElementById('myId');
element.classList.add('newClass');
console.log(element.classList);  // Output: DOMTokenList ["myClass", "newClass"]

// 10. classList.remove()
let element = document.getElementById('myId');
element.classList.remove('oldClass');
console.log(element.classList);  // Output: DOMTokenList (updated classes)

// 11. classList.toggle()
let element = document.getElementById('myId');
element.classList.toggle('active');
console.log(element.classList);  // Output: DOMTokenList with or without "active"

// 12. classList.contains()
let element = document.getElementById('myId');
let hasClass = element.classList.contains('active');
console.log(hasClass);  // Output: true or false

// 13. parentNode
let element = document.getElementById('myId');
let parent = element.parentNode;
console.log(parent);  // Output: Parent element of the element with id "myId"

// 14. childNodes
let element = document.getElementById('myId');
let children = element.childNodes;
console.log(children);  // Output: NodeList of child nodes

// 15. children
let element = document.getElementById('myId');
let children = element.children;
console.log(children);  // Output: HTMLCollection of child elements

// 16. firstChild
let element = document.getElementById('myId');
let firstChild = element.firstChild;
console.log(firstChild);  // Output: The first child node of the element

// 17. firstElementChild
let element = document.getElementById('myId');
let firstElementChild = element.firstElementChild;
console.log(firstElementChild);  // Output: The first child element

// 18. lastChild
let element = document.getElementById('myId');
let lastChild = element.lastChild;
console.log(lastChild);  // Output: The last child node of the element

// 19. lastElementChild
let element = document.getElementById('myId');
let lastElementChild = element.lastElementChild;
console.log(lastElementChild);  // Output: The last child element

// 20. nextSibling
let element = document.getElementById('myId');
let nextSibling = element.nextSibling;
console.log(nextSibling);  // Output: The next sibling node

// 21. nextElementSibling
let element = document.getElementById('myId');
let nextElementSibling = element.nextElementSibling;
console.log(nextElementSibling);  // Output: The next sibling element

// 22. previousSibling
let element = document.getElementById('myId');
let previousSibling = element.previousSibling;
console.log(previousSibling);  // Output: The previous sibling node

// 23. previousElementSibling
let element = document.getElementById('myId');
let previousElementSibling = element.previousElementSibling;
console.log(previousElementSibling);  // Output: The previous sibling element

// 24. createElement()
let newElement = document.createElement('div');
console.log(newElement);  // Output: <div></div>

// 25. createTextNode()
let textNode = document.createTextNode('Hello, World!');
console.log(textNode);  // Output: "Hello, World!"

// 26. appendChild()
let parent = document.getElementById('parent');
let newElement = document.createElement('p');
newElement.textContent = 'New Paragraph';
parent.appendChild(newElement);

// 27. insertBefore()
let parent = document.getElementById('parent');
let newElement = document.createElement('p');
newElement.textContent = 'New Paragraph';
let referenceElement = document.getElementById('reference');
parent.insertBefore(newElement, referenceElement);

// 28. removeChild()
let parent = document.getElementById('parent');
let child = document.getElementById('child');
parent.removeChild(child);

// 29. replaceChild()
let parent = document.getElementById('parent');
let newElement = document.createElement('p');
newElement.textContent = 'New Paragraph';
let oldElement = document.getElementById('child');
parent.replaceChild(newElement, oldElement);

// 30. focus()
let input = document.getElementById('myInput');
input.focus();

// 31. blur()
let input = document.getElementById('myInput');
input.blur();







// 1. setAttribute()
let element = document.getElementById('myId');
element.setAttribute('class', 'newClass');
console.log(element);  // Output: <div id="myId" class="newClass">...</div>

// 2. innerHTML
let element = document.getElementById('myId');
element.innerHTML = '<p>New content inside the div</p>';
console.log(element.innerHTML);  // Output: <p>New content inside the div</p>

// 3. textContent
let element = document.getElementById('myId');
element.textContent = 'This is some text content';
console.log(element.textContent);  // Output: This is some text content

// 4. classList.add()
let element = document.getElementById('myId');
element.classList.add('newClass');
console.log(element.classList);  // Output: DOMTokenList ["existingClass", "newClass"]

// 5. classList.remove()
let element = document.getElementById('myId');
element.classList.remove('oldClass');
console.log(element.classList);  // Output: DOMTokenList ["existingClass"]

// 6. classList.toggle()
let element = document.getElementById('myId');
element.classList.toggle('active');
console.log(element.classList);  // Output: DOMTokenList ["existingClass", "active"]

// 7. classList.contains()
let element = document.getElementById('myId');
let hasClass = element.classList.contains('active');
console.log(hasClass);  // Output: true or false

// 8. style
let element = document.getElementById('myId');
element.style.backgroundColor = 'blue';
element.style.color = 'white';
console.log(element.style.backgroundColor);  // Output: blue

// 9. setInterval()
let counter = 0;
let intervalId = setInterval(() => {
    counter++;
    console.log('Interval:', counter);
    if (counter === 5) clearInterval(intervalId);
}, 1000);

// 10. setTimeout()
setTimeout(() => {
    console.log('This message appears after 2 seconds');
}, 2000);

// 11. appendChild()
let parent = document.getElementById('parent');
let newElement = document.createElement('p');
newElement.textContent = 'New Paragraph';
parent.appendChild(newElement);

// 12. insertBefore()
let parent = document.getElementById('parent');
let newElement = document.createElement('p');
newElement.textContent = 'New Paragraph';
let referenceElement = document.getElementById('reference');
parent.insertBefore(newElement, referenceElement);

// 13. replaceChild()
let parent = document.getElementById('parent');
let newElement = document.createElement('p');
newElement.textContent = 'Replaced Paragraph';
let oldElement = document.getElementById('child');
parent.replaceChild(newElement, oldElement);

// 14. removeChild()
let parent = document.getElementById('parent');
let child = document.getElementById('child');
parent.removeChild(child);

// 15. remove()
let element = document.getElementById('myId');
element.remove();

// 16. createElement()
let newElement = document.createElement('div');
newElement.textContent = 'This is a new div element';
document.body.appendChild(newElement);

// 17. createTextNode()
let textNode = document.createTextNode('This is a new text node');
document.body.appendChild(textNode);

// 18. focus()
let input = document.getElementById('myInput');
input.focus();

// 19. blur()
let input = document.getElementById('myInput');
input.blur();

// 20. scrollIntoView()
let element = document.getElementById('myId');
element.scrollIntoView({ behavior: 'smooth' });

// 21. setCustomValidity()
let input = document.getElementById('myInput');
input.setCustomValidity('Please enter a valid email address');

// 22. focus() and blur() combined (to manage active state)
let element = document.getElementById('myId');

// Focus event
element.addEventListener('focus', function() {
    element.style.border = '2px solid green';
});

// Blur event
element.addEventListener('blur', function() {
    element.style.border = '1px solid gray';
});






// traversal method 

// 1. parentNode
let element = document.getElementById('myId');
let parent = element.parentNode;
console.log(parent);  // Output: Parent node of the element

// 2. parentElement
let element = document.getElementById('myId');
let parentElement = element.parentElement;
console.log(parentElement);  // Output: Parent element of the element

// 3. childNodes
let element = document.getElementById('myId');
let childNodes = element.childNodes;
console.log(childNodes);  // Output: NodeList of all child nodes (includes text and comment nodes)

// 4. children
let element = document.getElementById('myId');
let children = element.children;
console.log(children);  // Output: HTMLCollection of child elements (ignores text and comment nodes)

// 5. firstChild
let element = document.getElementById('myId');
let firstChild = element.firstChild;
console.log(firstChild);  // Output: The first child node of the element

// 6. firstElementChild
let element = document.getElementById('myId');
let firstElementChild = element.firstElementChild;
console.log(firstElementChild);  // Output: The first child element (ignores text nodes)

// 7. lastChild
let element = document.getElementById('myId');
let lastChild = element.lastChild;
console.log(lastChild);  // Output: The last child node of the element

// 8. lastElementChild
let element = document.getElementById('myId');
let lastElementChild = element.lastElementChild;
console.log(lastElementChild);  // Output: The last child element (ignores text nodes)

// 9. nextSibling
let element = document.getElementById('myId');
let nextSibling = element.nextSibling;
console.log(nextSibling);  // Output: The next sibling node of the element (includes text nodes)

// 10. nextElementSibling
let element = document.getElementById('myId');
let nextElementSibling = element.nextElementSibling;
console.log(nextElementSibling);  // Output: The next sibling element (ignores text nodes)

// 11. previousSibling
let element = document.getElementById('myId');
let previousSibling = element.previousSibling;
console.log(previousSibling);  // Output: The previous sibling node of the element (includes text nodes)

// 12. previousElementSibling
let element = document.getElementById('myId');
let previousElementSibling = element.previousElementSibling;
console.log(previousElementSibling);  // Output: The previous sibling element (ignores text nodes)

// 13. querySelector()
let element = document.querySelector('#myId');
console.log(element);  // Output: The first element matching the selector

// 14. querySelectorAll()
let elements = document.querySelectorAll('.myClass');
console.log(elements);  // Output: NodeList of all elements matching the selector

// 15. matches()
let element = document.getElementById('myId');
let isMatch = element.matches('.myClass');
console.log(isMatch);  // Output: true or false (whether the element matches the selector)

// 16. closest()
let element = document.getElementById('myId');
let closestElement = element.closest('.parentClass');
console.log(closestElement);  // Output: The closest ancestor element matching the selector





// dom create method 

// 1. createElement()
let newElement = document.createElement('div');
newElement.textContent = 'This is a new div element';
document.body.appendChild(newElement);

// 2. createTextNode()
let textNode = document.createTextNode('This is a new text node');
document.body.appendChild(textNode);

// 3. createComment()
let comment = document.createComment('This is a comment node');
document.body.appendChild(comment);

// 4. createDocumentFragment()
let fragment = document.createDocumentFragment();
let newElement1 = document.createElement('p');
newElement1.textContent = 'Paragraph inside fragment';
fragment.appendChild(newElement1);
document.body.appendChild(fragment);

// 5. createAttribute()
let newAttribute = document.createAttribute('class');
newAttribute.value = 'newClass';
let element = document.getElementById('myId');
element.setAttributeNode(newAttribute);

// 6. createCDATASection()
let cdata = document.createCDATASection('This is a CDATA section');
document.body.appendChild(cdata);

// 7. createProcessingInstruction()
let pi = document.createProcessingInstruction('xml-stylesheet', 'type="text/css" href="style.css"');
document.body.appendChild(pi);




// dom all append method 
// 1. appendChild()
let parent = document.getElementById('parent');
let newElement = document.createElement('p');
newElement.textContent = 'This is a new paragraph.';
parent.appendChild(newElement);

// 2. append()
let parent = document.getElementById('parent');
let newElement = document.createElement('div');
newElement.textContent = 'This is a new div element.';
parent.append(newElement);

// 3. insertAdjacentElement()
let parent = document.getElementById('parent');
let newElement = document.createElement('p');
newElement.textContent = 'This is a new paragraph (inserted).';
parent.insertAdjacentElement('beforeend', newElement);

// 4. insertAdjacentHTML()
let parent = document.getElementById('parent');
parent.insertAdjacentHTML('beforeend', '<p>This is a new paragraph (HTML).</p>');

// 5. insertAdjacentText()
let parent = document.getElementById('parent');
parent.insertAdjacentText('beforeend', 'This is a new text node (inserted).');

// 6. replaceChild()
let parent = document.getElementById('parent');
let oldElement = document.getElementById('oldElement');
let newElement = document.createElement('div');
newElement.textContent = 'This is the new element replacing the old one.';
parent.replaceChild(newElement, oldElement);

// 7. prepend()
let parent = document.getElementById('parent');
let newElement = document.createElement('div');
newElement.textContent = 'This is a new div element (prepended).';
parent.prepend(newElement);

// 8. before()
let referenceNode = document.getElementById('reference');
let newElement = document.createElement('p');
newElement.textContent = 'This is a new paragraph (before reference).';
referenceNode.before(newElement);

// 9. after()
let referenceNode = document.getElementById('reference');
let newElement = document.createElement('p');
newElement.textContent = 'This is a new paragraph (after reference).';
referenceNode.after(newElement);










































// BOM

// 1. window.alert() - Displays an alert box with a specified message
window.alert('This is an alert box!');

// 2. window.confirm() - Displays a dialog box with OK and Cancel buttons
let result = window.confirm('Do you want to proceed?');
console.log(result); // Returns true if OK is clicked, false if Cancel is clicked

// 3. window.prompt() - Displays a prompt box that asks for user input
let name = window.prompt('What is your name?', 'John Doe');
console.log('User Name:', name); // Displays the name entered by the user

// 4. window.open() - Opens a new browser window with the specified URL
let newWindow = window.open('https://www.example.com', '_blank');
newWindow.focus();  // Focus on the newly opened window

// 5. window.close() - Closes the current browser window
// window.close();  // Uncomment this to close the current window (works only if the window was opened by JavaScript)

// 6. window.location - Accesses the current page's URL and allows manipulation of the browser's location
console.log(window.location.href);  // Prints the current URL of the page

// 7. window.location.assign() - Loads a new document
// window.location.assign('https://www.example.com');  // Uncomment to navigate to the specified URL

// 8. window.location.replace() - Replaces the current document with a new one (no history entry)
window.location.replace('https://www.example.com');  // Navigates to a new URL without keeping the current URL in history

// 9. window.history - Provides access to the browser's history
console.log(window.history.length); // Outputs the number of entries in the browser's history

// 10. window.history.back() - Navigates back one step in the browser's history
// window.history.back();  // Uncomment this to go back one page

// 11. window.history.forward() - Navigates forward one step in the browser's history
// window.history.forward();  // Uncomment this to go forward one page

// 12. window.history.go() - Moves to a specific point in the history list
// window.history.go(-1);  // Uncomment this to go back one page (same as history.back())

// 13. window.navigator - Accesses information about the browser
console.log(window.navigator.userAgent);  // Prints the browser's user-agent string

// 14. window.screen - Provides information about the screen's dimensions
console.log('Screen width:', window.screen.width);  // Screen width
console.log('Screen height:', window.screen.height); // Screen height

// 15. window.setTimeout() - Executes a function after a specified time interval (in milliseconds)
let timeoutId = window.setTimeout(() => {
    console.log('This message appears after 2 seconds.');
}, 2000);

// 16. window.clearTimeout() - Clears a timeout set by setTimeout()
window.clearTimeout(timeoutId);  // Cancels the timeout

// 17. window.setInterval() - Repeatedly executes a function at a specified time interval
let intervalId = window.setInterval(() => {
    console.log('This message appears every 3 seconds.');
}, 3000);

// 18. window.clearInterval() - Clears an interval set by setInterval()
window.clearInterval(intervalId);  // Stops the repeated execution

// 19. window.localStorage - Allows to store data locally in the browser (persists even after page reload)
localStorage.setItem('username', 'JohnDoe');
let storedUsername = localStorage.getItem('username');
console.log('Stored username:', storedUsername);

// 20. window.sessionStorage - Stores data for the duration of the page session (cleared when the tab is closed)
sessionStorage.setItem('sessionData', 'Some session data');
let sessionData = sessionStorage.getItem('sessionData');
console.log('Session data:', sessionData);

// 21. window.screen.width and window.screen.height - Returns the width and height of the screen
console.log('Screen width:', window.screen.width);
console.log('Screen height:', window.screen.height);


// Scroll to a specific position
window.scroll(0, 500);  // Scroll to 500px vertically

// Scroll by a relative amount
window.scrollBy(0, 200);  // Scroll down by 200px


window.resizeTo(800, 600);  // Resize window to 800px by 600px
window.resizeBy(100, 100);  // Resize window by 100px horizontally and vertically


// Scroll to 500px horizontally and 1000px vertically
window.scrollTo(500, 1000);


window.scrollBy(x, y);



// Smoothly scroll to 500px horizontally and 1000px vertically
window.scrollTo({
  top: 1000,
  left: 500,
  behavior: "smooth"
});



// location 

// 1. Get the current URL
console.log(window.location.href);  // Output: current URL of the page

// 2. Set a new URL (navigates to a new page)
window.location.href = "https://www.example.com";  // Redirects to the specified URL

// 3. Get the protocol (http, https, etc.)
console.log(window.location.protocol);  // Output: "https:"

// 4. Get the host (domain and port if specified)
console.log(window.location.host);  // Output: "www.example.com" or "localhost:8080"

// 5. Get the hostname (domain only)
console.log(window.location.hostname);  // Output: "www.example.com"

// 6. Get the pathname (path after the domain)
console.log(window.location.pathname);  // Output: "/index.html" or "/about"

// 7. Get the query string (everything after ?)
console.log(window.location.search);  // Output: "?id=123&name=JohnDoe"

// 8. Get the fragment identifier (everything after #)
console.log(window.location.hash);  // Output: "#section2"

// 9. Reload the current page
window.location.reload();  // Refreshes the page

// 10. Force reload from the server (ignores cache)
window.location.reload(true);  // Refreshes the page from the server

// 11. Navigate to a new URL (assign method)
window.location.assign("https://www.example.com");  // Redirects to the new URL

// 12. Replace the current page without creating a history entry
window.location.replace("https://www.example.com");  // Navigates without saving current page in history

// 13. Get the origin (protocol, hostname, and port)
console.log(window.location.origin);  // Output: "https://www.example.com"

// 14. Get the port number (if specified)
console.log(window.location.port);  // Output: "8080" (if the port is specified)

// 15. Get the entire URL as a string
console.log(window.location.toString());  // Output: "https://www.example.com/index.html"

// 16. Using URL Parameters (`window.location.search`)
const queryParams = window.location.search;
console.log(queryParams);  // Output: "?id=123&name=JohnDoe"

const urlParams = new URLSearchParams(queryParams);
console.log(urlParams.get("id"));    // Output: "123"
console.log(urlParams.get("name"));  // Output: "JohnDoe"

// 17. Change the URL without reloading the page (Single Page Application)
window.history.pushState({page: 1}, "title 1", "?page=1");

// Modify the current history entry
window.history.replaceState({page: 2}, "title 2", "?page=2");

// 18. Handle hash changes
window.addEventListener("hashchange", function() {
    console.log("The hash has changed!");
});

// Change the hash in the URL
window.location.hash = "#newSection";  // URL will be updated to the new hash







// history 

// 1. history.back()
// Goes back one step in the session history (same as clicking the back button).
history.back(); // Equivalent to clicking the browser's "Back" button.

// 2. history.forward()
// Goes forward one step in the session history (same as clicking the forward button).
history.forward(); // Equivalent to clicking the browser's "Forward" button.

// 3. history.go()
// Moves the session history by a specified number of steps. Positive numbers go forward, negative numbers go backward.
history.go(-1);  // Goes back one page (equivalent to history.back())
history.go(1);   // Goes forward one page (equivalent to history.forward())
history.go(0);   // Reloads the current page

// 4. history.pushState(state, title, url)
// Adds a new entry to the browser's session history stack, allowing navigation without a page reload.
history.pushState({ page: 1 }, "Page 1", "?page=1");
// This method modifies the browser's URL without reloading the page.

// 5. history.replaceState(state, title, url)
// Modifies the current history entry (does not create a new entry), allowing navigation without a page reload.
history.replaceState({ page: 2 }, "Page 2", "?page=2");
// This method replaces the current URL with a new one without adding a new entry to the history stack.

// 6. history.state
// Returns the state object of the current history entry.
console.log(history.state);  // Output: { page: 2 } (or whatever state object was set with pushState or replaceState)







// page 

// 1. Get the current horizontal scroll position (pageXOffset)
console.log(window.pageXOffset);  // Output: Horizontal scroll position in pixels (e.g., 0 or a positive number)

// 2. Get the current vertical scroll position (pageYOffset)
console.log(window.pageYOffset);  // Output: Vertical scroll position in pixels (e.g., 0 or a positive number)

// 3. Scroll the page vertically by a specific number of pixels (e.g., 100px)
window.scrollTo(0, 100);  // Scrolls the page down by 100px

// 4. Scroll the page horizontally and vertically (e.g., 100px right and 200px down)
window.scrollTo(100, 200);  // Scrolls the page right by 100px and down by 200px

// 5. Scroll the page smoothly to a specific position (e.g., 200px down)
window.scrollTo({
  top: 200,  // Scroll down 200px
  left: 0,   // No horizontal scroll
  behavior: 'smooth'  // Smooth scrolling
});

// 6. Check the scroll position in real-time (for example, on a scroll event)
window.addEventListener('scroll', function() {
  let scrollX = window.pageXOffset;  // Current horizontal scroll position
  let scrollY = window.pageYOffset;  // Current vertical scroll position
  console.log("Current scroll position: X = " + scrollX + ", Y = " + scrollY);
});

// 7. Scroll to the top of the page (reset the vertical scroll to 0)
window.scrollTo(0, 0);  // Scrolls the page to the top

// 8. Scroll to the bottom of the page (by setting vertical scroll position to a large value)
window.scrollTo(0, document.body.scrollHeight);  // Scrolls to the bottom of the page

// 9. Get the horizontal and vertical scroll position after a scroll event
window.addEventListener('scroll', function() {
  let currentScrollX = window.pageXOffset;  // Horizontal scroll position
  let currentScrollY = window.pageYOffset;  // Vertical scroll position
  console.log("Scroll position: X = " + currentScrollX + ", Y = " + currentScrollY);
});









// offsetopt and offsetleft

// 1. Getting the vertical position of an element relative to its offset parent (top)
let element = document.getElementById("myElement");
console.log(element.offsetTop);  // Output: Vertical distance from the top of its offset parent in pixels

// 2. Getting the horizontal position of an element relative to its offset parent (left)
console.log(element.offsetLeft);  // Output: Horizontal distance from the left of its offset parent in pixels

// 3. Getting the position of a child element inside a container (relative to the container)
let container = document.getElementById("container");
let childElement = container.querySelector(".child");

console.log(childElement.offsetTop);  // Output: Position of the child element from the top of the container
console.log(childElement.offsetLeft); // Output: Position of the child element from the left of the container

// 4. Calculating the total distance of an element from the top-left corner of the document
let totalOffsetTop = 0;
let totalOffsetLeft = 0;
let currentElement = element;

// Loop through all the offset parents to calculate the position relative to the document
while (currentElement) {
  totalOffsetTop += currentElement.offsetTop;
  totalOffsetLeft += currentElement.offsetLeft;
  currentElement = currentElement.offsetParent;
}

console.log("Total distance from the top: " + totalOffsetTop);
console.log("Total distance from the left: " + totalOffsetLeft);

// 5. Listening for the mouse position relative to an element
element.addEventListener('mousemove', function(event) {
  let mouseX = event.offsetX;  // Horizontal mouse position inside the element
  let mouseY = event.offsetY;  // Vertical mouse position inside the element
  console.log("Mouse X: " + mouseX + ", Mouse Y: " + mouseY);
});

// 6. Using offsetTop and offsetLeft to create a simple drag functionality
let dragElement = document.getElementById("draggable");

dragElement.onmousedown = function(event) {
  let shiftX = event.clientX - dragElement.getBoundingClientRect().left;
  let shiftY = event.clientY - dragElement.getBoundingClientRect().top;

  document.onmousemove = function(event) {
    dragElement.style.left = event.pageX - shiftX + 'px';
    dragElement.style.top = event.pageY - shiftY + 'px';
  };

  document.onmouseup = function() {
    document.onmousemove = null;
    document.onmouseup = null;
  };
};















// scrollTop and scrollleft

// 1. Get the vertical scroll position of an element
let element = document.getElementById("myElement");
console.log(element.scrollTop);  // Output: The number of pixels the content is scrolled vertically (top)


// 2. Get the horizontal scroll position of an element
console.log(element.scrollLeft);  // Output: The number of pixels the content is scrolled horizontally (left)


// 3. Set the vertical scroll position of an element
element.scrollTop = 100;  // Set the scroll position to 100px from the top

// 4. Set the horizontal scroll position of an element
element.scrollLeft = 200;  // Set the scroll position to 200px from the left

// 5. Get the scroll position of the document (window)
console.log(window.scrollY);  // Returns the vertical scroll position of the entire document
console.log(window.scrollX);  // Returns the horizontal scroll position of the entire document


// 6. Scroll an element to the top of its scrollable content
element.scrollTop = 0;  // Scrolls the element to the top (vertical scroll)

// 7. Scroll an element to the left of its scrollable content
element.scrollLeft = 0;  // Scrolls the element to the left (horizontal scroll)


// 8. Automatically scroll an element to the bottom (vertically)
element.scrollTop = element.scrollHeight;  // Scrolls the element to the bottom

// 9. Automatically scroll an element to the right (horizontally)
element.scrollLeft = element.scrollWidth;  // Scrolls the element to the right


// 10. Scroll an element by a specific number of pixels (vertical)
element.scrollBy(0, 50);  // Scrolls the element vertically by 50px (downward)

// 11. Scroll an element by a specific number of pixels (horizontal)
element.scrollBy(50, 0);  // Scrolls the element horizontally by 50px (rightward)


// 12. Smooth scrolling to a specific position (vertical)
element.scrollTo({
  top: 500,       // Vertical scroll position
  left: 0,        // Horizontal scroll position (optional)
  behavior: 'smooth'  // Smooth scrolling
});

// 13. Smooth scrolling to a specific position (horizontal)
element.scrollTo({
  top: 0,         // Vertical scroll position (optional)
  left: 500,      // Horizontal scroll position
  behavior: 'smooth'  // Smooth scrolling
});


// 14. Listening for a scroll event on an element
element.addEventListener('scroll', function() {
  let currentScrollTop = element.scrollTop;  // Current vertical scroll position
  let currentScrollLeft = element.scrollLeft;  // Current horizontal scroll position
  console.log("Vertical Scroll: " + currentScrollTop);
  console.log("Horizontal Scroll: " + currentScrollLeft);
});


// 15. Checking if the element is scrolled to the top
if (element.scrollTop === 0) {
  console.log("The element is scrolled to the top!");
}

// 16. Checking if the element is scrolled to the left
if (element.scrollLeft === 0) {
  console.log("The element is scrolled to the left!");
}

// 17. Checking if the element is scrolled to the bottom
if (element.scrollTop + element.clientHeight === element.scrollHeight) {
  console.log("The element is scrolled to the bottom!");
}

// 18. Checking if the element is scrolled to the right
if (element.scrollLeft + element.clientWidth === element.scrollWidth) {
  console.log("The element is scrolled to the right!");
}






// Examples of Using scrollWidth and scrollHeight

// Example 1: Getting the scrollHeight of an element (total content height)
let element = document.getElementById("myElement");
console.log(element.scrollHeight);  // Output: Total height of the element's content (including hidden content)

// Example 2: Getting the scrollWidth of an element (total content width)
console.log(element.scrollWidth);  // Output: Total width of the element's content (including hidden content)

// Example 3: Checking if an element is overflowing vertically (scrollHeight > clientHeight)
if (element.scrollHeight > element.clientHeight) {
  console.log("The element's content overflows vertically.");
} else {
  console.log("The element's content fits within the visible area.");
}

// Example 4: Checking if an element is overflowing horizontally (scrollWidth > clientWidth)
if (element.scrollWidth > element.clientWidth) {
  console.log("The element's content overflows horizontally.");
} else {
  console.log("The element's content fits within the visible area.");
}

// Example 5: Automatically scrolling an element to the bottom (use scrollHeight)
element.scrollTop = element.scrollHeight;  // Scrolls the element to the bottom (vertical scroll)

// Example 6: Scroll to the right of an element (use scrollWidth)
element.scrollLeft = element.scrollWidth;  // Scrolls the element to the far right (horizontal scroll)

// Example 7: Dynamically loading content when the user scrolls to the bottom of a container
element.addEventListener('scroll', function() {
  // Check if the user has scrolled to the bottom
  if (element.scrollTop + element.clientHeight >= element.scrollHeight) {
    console.log("User has reached the bottom of the container.");
    // Load more content here
  }
});

// Example 8: Adding a fixed header while scrolling a content container
let container = document.getElementById("contentContainer");
let header = document.getElementById("header");

container.addEventListener('scroll', function() {
  // Make header fixed at the top when the container scrolls
  if (container.scrollTop > 50) {
    header.style.position = "fixed";
    header.style.top = "0";
  } else {
    header.style.position = "relative";
    header.style.top = "auto";
  }
});

// Example 9: Check if the content of an element is fully scrolled horizontally
if (element.scrollLeft + element.clientWidth === element.scrollWidth) {
  console.log("The element is scrolled to the rightmost edge.");
}

// Example 10: Detecting scrolling direction (up/down) by comparing scrollTop and previous scrollTop
let previousScrollTop = 0;
element.addEventListener('scroll', function() {
  if (element.scrollTop > previousScrollTop) {
    console.log("Scrolling down");
  } else {
    console.log("Scrolling up");
  }
  previousScrollTop = element.scrollTop;
});

// Example 11: Smooth scrolling to the bottom of the content
element.scrollTo({
  top: element.scrollHeight,  // Scroll to the bottom vertically
  left: 0,                    // No horizontal scroll
  behavior: 'smooth'          // Smooth scrolling behavior
});

// Example 12: Smooth scrolling to the right of the content
element.scrollTo({
  top: 0,                      // No vertical scroll
  left: element.scrollWidth,   // Scroll to the rightmost position horizontally
  behavior: 'smooth'           // Smooth scrolling behavior
});







// Examples of offsetWidth and offsetHeight

// Example 1: Getting the offsetWidth (width) of an element
let element = document.getElementById("myElement");
console.log("Offset Width:", element.offsetWidth);  // Output: Width of the element including padding, border, and scrollbar

// Example 2: Getting the offsetHeight (height) of an element
console.log("Offset Height:", element.offsetHeight);  // Output: Height of the element including padding, border, and scrollbar

// Example 3: Checking if an element has been resized by checking its width and height
if (element.offsetWidth > 500) {
  console.log("The element's width is greater than 500px.");
} else {
  console.log("The element's width is less than or equal to 500px.");
}

// Example 4: Dynamically resizing an element and checking its offsetWidth and offsetHeight
element.style.width = "600px";  // Change the width dynamically
element.style.height = "300px"; // Change the height dynamically
console.log("New Offset Width:", element.offsetWidth);  // Output: New width after resizing
console.log("New Offset Height:", element.offsetHeight);  // Output: New height after resizing

// Example 5: Using offsetWidth and offsetHeight for positioning elements
let container = document.getElementById("container");
let newElement = document.createElement("div");
newElement.style.width = "200px";
newElement.style.height = "100px";
newElement.style.position = "absolute";

// Position the new element based on the container's dimensions
newElement.style.top = container.offsetHeight / 2 + "px";  // Position vertically in the middle of the container
newElement.style.left = container.offsetWidth / 2 + "px";  // Position horizontally in the middle of the container

container.appendChild(newElement);  // Append the new element to the container

// Example 6: Check the dimensions of a hidden element (visibility: hidden)
let hiddenElement = document.getElementById("hiddenElement");
console.log("Hidden Element Width:", hiddenElement.offsetWidth);  // Output: Width of hidden element
console.log("Hidden Element Height:", hiddenElement.offsetHeight);  // Output: Height of hidden element

// Example 7: Track element size change during window resize
window.addEventListener('resize', function() {
  console.log("Element Width on Resize:", element.offsetWidth);  // Output: Width of the element after window resize
  console.log("Element Height on Resize:", element.offsetHeight);  // Output: Height of the element after window resize
});

// Example 8: Using offsetWidth and offsetHeight to make responsive design adjustments
if (element.offsetWidth < 400) {
  element.style.fontSize = "14px";  // Decrease font size for smaller width
} else {
  element.style.fontSize = "18px";  // Increase font size for larger width
}

// Example 9: Calculating total width and height including the scrollbars
let box = document.getElementById("box");
console.log("Box Width (with scrollbar if any):", box.offsetWidth);  // Total width including borders and scrollbar
console.log("Box Height (with scrollbar if any):", box.offsetHeight);  // Total height including borders and scrollbar

// Example 10: Comparing the element's clientWidth and offsetWidth
let clientWidth = element.clientWidth;  // Width excluding borders and scrollbars
let offsetWidth = element.offsetWidth;  // Width including borders and scrollbars
console.log("Client Width:", clientWidth);
console.log("Offset Width:", offsetWidth);



//
// Example 1: Getting the clientWidth of an element (content width without borders and scrollbars)
let element = document.getElementById("myElement");
console.log("Client Width:", element.clientWidth);  // Output: The width of the content area excluding borders, scrollbars, and margins

// Example 2: Getting the clientHeight of an element (content height without borders and scrollbars)
console.log("Client Height:", element.clientHeight);  // Output: The height of the content area excluding borders, scrollbars, and margins

// Example 3: Check if an element has overflow content horizontally (i.e., it needs scrolling)
if (element.scrollWidth > element.clientWidth) {
  console.log("The element is overflowing horizontally and has a horizontal scrollbar.");
} else {
  console.log("The element does not overflow horizontally.");
}

// Example 4: Check if an element has overflow content vertically (i.e., it needs scrolling)
if (element.scrollHeight > element.clientHeight) {
  console.log("The element is overflowing vertically and has a vertical scrollbar.");
} else {
  console.log("The element does not overflow vertically.");
}

// Example 5: Dynamically resize an element and log its clientWidth and clientHeight
element.style.width = "500px";  // Set the width dynamically
element.style.height = "300px"; // Set the height dynamically
console.log("New Client Width:", element.clientWidth);  // Output: New content width
console.log("New Client Height:", element.clientHeight);  // Output: New content height

// Example 6: Checking clientWidth and clientHeight of the document body
console.log("Body Client Width:", document.body.clientWidth);  // Body's content width (without borders and scrollbars)
console.log("Body Client Height:", document.body.clientHeight);  // Body's content height (without borders and scrollbars)

// Example 7: Using clientWidth and clientHeight to position an element inside a container
let container = document.getElementById("container");
let newElement = document.createElement("div");
newElement.style.width = "200px";
newElement.style.height = "100px";
newElement.style.position = "absolute";

// Position the new element based on the container's client dimensions
newElement.style.top = container.clientHeight / 2 + "px";  // Position vertically in the middle of the container
newElement.style.left = container.clientWidth / 2 + "px";  // Position horizontally in the middle of the container

container.appendChild(newElement);  // Append the new element to the container

// Example 8: Track changes in clientWidth and clientHeight during window resizing
window.addEventListener('resize', function() {
  console.log("Client Width on Resize:", element.clientWidth);  // Output: Content width after window resize
  console.log("Client Height on Resize:", element.clientHeight);  // Output: Content height after window resize
});

// Example 9: Handling responsive design with clientWidth and clientHeight
if (element.clientWidth < 500) {
  element.style.fontSize = "14px";  // Apply smaller font size if width is less than 500px
} else {
  element.style.fontSize = "18px";  // Apply larger font size if width is greater than 500px
}





// Examples of clientWidth and clientHeight:

// Example 1: Getting the clientWidth of an element (content width without borders and scrollbars)
let element = document.getElementById("myElement");
console.log("Client Width:", element.clientWidth);  // Output: The width of the content area excluding borders, scrollbars, and margins

// Example 2: Getting the clientHeight of an element (content height without borders and scrollbars)
console.log("Client Height:", element.clientHeight);  // Output: The height of the content area excluding borders, scrollbars, and margins

// Example 3: Check if an element has overflow content horizontally (i.e., it needs scrolling)
if (element.scrollWidth > element.clientWidth) {
  console.log("The element is overflowing horizontally and has a horizontal scrollbar.");
} else {
  console.log("The element does not overflow horizontally.");
}

// Example 4: Check if an element has overflow content vertically (i.e., it needs scrolling)
if (element.scrollHeight > element.clientHeight) {
  console.log("The element is overflowing vertically and has a vertical scrollbar.");
} else {
  console.log("The element does not overflow vertically.");
}

// Example 5: Dynamically resize an element and log its clientWidth and clientHeight
element.style.width = "500px";  // Set the width dynamically
element.style.height = "300px"; // Set the height dynamically
console.log("New Client Width:", element.clientWidth);  // Output: New content width
console.log("New Client Height:", element.clientHeight);  // Output: New content height

// Example 6: Checking clientWidth and clientHeight of the document body
console.log("Body Client Width:", document.body.clientWidth);  // Body's content width (without borders and scrollbars)
console.log("Body Client Height:", document.body.clientHeight);  // Body's content height (without borders and scrollbars)

// Example 7: Using clientWidth and clientHeight to position an element inside a container
let container = document.getElementById("container");
let newElement = document.createElement("div");
newElement.style.width = "200px";
newElement.style.height = "100px";
newElement.style.position = "absolute";

// Position the new element based on the container's client dimensions
newElement.style.top = container.clientHeight / 2 + "px";  // Position vertically in the middle of the container
newElement.style.left = container.clientWidth / 2 + "px";  // Position horizontally in the middle of the container

container.appendChild(newElement);  // Append the new element to the container

// Example 8: Track changes in clientWidth and clientHeight during window resizing
window.addEventListener('resize', function() {
    
  console.log("Client Width on Resize:", element.clientWidth);  // Output: Content width after window resize
  console.log("Client Height on Resize:", element.clientHeight);  // Output: Content height after window resize
});

// Example 9: Handling responsive design with clientWidth and clientHeight
if (element.clientWidth < 500) {
  element.style.fontSize = "14px";  // Apply smaller font size if width is less than 500px
} else {
  element.style.fontSize = "18px";  // Apply larger font size if width is greater than 500px
}




// 
Here are all the important examples of clientX and clientY in a single screen:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>clientX and clientY Examples</title>
  <style>
    #myElement {
      width: 300px;
      height: 300px;
      background-color: lightblue;
      margin: 50px;
    }
    #displayBox {
      position: fixed;
      top: 10px;
      left: 10px;
      background-color: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 5px;
    }
    #myCanvas {
      border: 1px solid black;
      margin-top: 20px;
    }
    #customContextMenu {
      position: absolute;
      display: none;
      background-color: #f0f0f0;
      border: 1px solid #ccc;
      padding: 10px;
    }
    #draggable {
      width: 100px;
      height: 100px;
      background-color: coral;
      position: absolute;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <!-- Example 1: Element to track mouse move -->
  <div id="myElement">Move the mouse over me!</div>

  <!-- Example 2: Display mouse position -->
  <div id="displayBox">X: 0 Y: 0</div>

  <!-- Example 3: Canvas for drawing with mouse -->
  <canvas id="myCanvas" width="500" height="500"></canvas>

  <!-- Example 5: Custom Context Menu -->
  <div id="customContextMenu">Custom Context Menu</div>

  <!-- Example 6: Draggable element -->
  <div id="draggable">Drag me!</div>

  <script>
    // Example 1: Tracking Mouse Position on Mouse Move
    let element = document.getElementById("myElement");
    element.addEventListener("mousemove", function(event) {
      let x = event.clientX;
      let y = event.clientY;
      console.log("Mouse X: " + x + ", Mouse Y: " + y);
    });

    // Example 2: Display Mouse Position
    let displayBox = document.getElementById("displayBox");
    document.addEventListener("mousemove", function(event) {
      let x = event.clientX;
      let y = event.clientY;
      displayBox.textContent = "X: " + x + " Y: " + y;
    });

    // Example 3: Drawing on Canvas Based on Mouse Position
    let canvas = document.getElementById("myCanvas");
    let ctx = canvas.getContext("2d");
    canvas.addEventListener("mousemove", function(event) {
      let x = event.clientX - canvas.offsetLeft;
      let y = event.clientY - canvas.offsetTop;
      ctx.fillStyle = "red";
      ctx.beginPath();
      ctx.arc(x, y, 5, 0, 2 * Math.PI);
      ctx.fill();
    });

    // Example 5: Right-Click Context Menu Position
    let customContextMenu = document.getElementById("customContextMenu");
    document.addEventListener("contextmenu", function(event) {
      event.preventDefault();
      let x = event.clientX;
      let y = event.clientY;
      customContextMenu.style.left = x + "px";
      customContextMenu.style.top = y + "px";
      customContextMenu.style.display = "block";
    });
    document.addEventListener("click", function() {
      customContextMenu.style.display = "none";
    });

    // Example 6: Draggable Element
    let draggableElement = document.getElementById("draggable");
    let isDragging = false;
    let offsetX, offsetY;

    draggableElement.addEventListener("mousedown", function(event) {
      isDragging = true;
      offsetX = event.clientX - draggableElement.offsetLeft;
      offsetY = event.clientY - draggableElement.offsetTop;
    });

    document.addEventListener("mousemove", function(event) {
      if (isDragging) {
        let x = event.clientX - offsetX;
        let y = event.clientY - offsetY;
        draggableElement.style.left = x + "px";
        draggableElement.style.top = y + "px";
      }
    });

    document.addEventListener("mouseup", function() {
      isDragging = false;
    });
  </script>
</body>
</html>









// Here are important examples of pageX and pageY in a single screen:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>pageX and pageY Examples</title>
  <style>
    #myElement {
      width: 300px;
      height: 300px;
      background-color: lightblue;
      margin: 50px;
    }
    #displayBox {
      position: fixed;
      top: 10px;
      left: 10px;
      background-color: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 5px;
    }
    #myCanvas {
      border: 1px solid black;
      margin-top: 20px;
    }
    #customContextMenu {
      position: absolute;
      display: none;
      background-color: #f0f0f0;
      border: 1px solid #ccc;
      padding: 10px;
    }
    #draggable {
      width: 100px;
      height: 100px;
      background-color: coral;
      position: absolute;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <!-- Example 1: Element to track mouse move -->
  <div id="myElement">Move the mouse over me!</div>

  <!-- Example 2: Display mouse position -->
  <div id="displayBox">X: 0 Y: 0</div>

  <!-- Example 3: Canvas for drawing with mouse -->
  <canvas id="myCanvas" width="500" height="500"></canvas>

  <!-- Example 5: Custom Context Menu -->
  <div id="customContextMenu">Custom Context Menu</div>

  <!-- Example 6: Draggable element -->
  <div id="draggable">Drag me!</div>

  <script>
    // Example 1: Tracking Mouse Position on Mouse Move (Using pageX and pageY)
    let element = document.getElementById("myElement");
    element.addEventListener("mousemove", function(event) {
      let x = event.pageX;  // Horizontal position of mouse relative to the document
      let y = event.pageY;  // Vertical position of mouse relative to the document
      console.log("Mouse X: " + x + ", Mouse Y: " + y);
    });

    // Example 2: Display Mouse Position (Using pageX and pageY)
    let displayBox = document.getElementById("displayBox");
    document.addEventListener("mousemove", function(event) {
      let x = event.pageX;
      let y = event.pageY;
      displayBox.textContent = "X: " + x + " Y: " + y;
    });

    // Example 3: Drawing on Canvas Based on Mouse Position (Using pageX and pageY)
    let canvas = document.getElementById("myCanvas");
    let ctx = canvas.getContext("2d");
    canvas.addEventListener("mousemove", function(event) {
      let x = event.pageX - canvas.offsetLeft;
      let y = event.pageY - canvas.offsetTop;
      ctx.fillStyle = "red";
      ctx.beginPath();
      ctx.arc(x, y, 5, 0, 2 * Math.PI);
      ctx.fill();
    });

    // Example 5: Right-Click Context Menu Position (Using pageX and pageY)
    let customContextMenu = document.getElementById("customContextMenu");
    document.addEventListener("contextmenu", function(event) {
      event.preventDefault();
      let x = event.pageX;
      let y = event.pageY;
      customContextMenu.style.left = x + "px";
      customContextMenu.style.top = y + "px";
      customContextMenu.style.display = "block";
    });
    document.addEventListener("click", function() {
      customContextMenu.style.display = "none";
    });

    // Example 6: Draggable Element (Using pageX and pageY)
    let draggableElement = document.getElementById("draggable");
    let isDragging = false;
    let offsetX, offsetY;

    draggableElement.addEventListener("mousedown", function(event) {
      isDragging = true;
      offsetX = event.pageX - draggableElement.offsetLeft;
      offsetY = event.pageY - draggableElement.offsetTop;
    });

    document.addEventListener("mousemove", function(event) {
      if (isDragging) {
        let x = event.pageX - offsetX;
        let y = event.pageY - offsetY;
        draggableElement.style.left = x + "px";
        draggableElement.style.top = y + "px";
      }
    });

    document.addEventListener("mouseup", function() {
      isDragging = false;
    });
  </script>
</body>
</html>








// 
Here are all the important examples of screenX and screenY in a single screen:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>screenX and screenY Examples</title>
  <style>
    #myElement {
      width: 300px;
      height: 300px;
      background-color: lightblue;
      margin: 50px;
    }
    #displayBox {
      position: fixed;
      top: 10px;
      left: 10px;
      background-color: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 5px;
    }
    #myCanvas {
      border: 1px solid black;
      margin-top: 20px;
    }
    #customContextMenu {
      position: absolute;
      display: none;
      background-color: #f0f0f0;
      border: 1px solid #ccc;
      padding: 10px;
    }
    #draggable {
      width: 100px;
      height: 100px;
      background-color: coral;
      position: absolute;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <!-- Example 1: Element to track mouse move -->
  <div id="myElement">Move the mouse over me!</div>

  <!-- Example 2: Display mouse position -->
  <div id="displayBox">X: 0 Y: 0</div>

  <!-- Example 3: Canvas for drawing with mouse -->
  <canvas id="myCanvas" width="500" height="500"></canvas>

  <!-- Example 5: Custom Context Menu -->
  <div id="customContextMenu">Custom Context Menu</div>

  <!-- Example 6: Draggable element -->
  <div id="draggable">Drag me!</div>

  <script>
    // Example 1: Tracking Mouse Position on Mouse Move (Using screenX and screenY)
    let element = document.getElementById("myElement");
    element.addEventListener("mousemove", function(event) {
      let x = event.screenX;  // Horizontal position of mouse relative to the screen
      let y = event.screenY;  // Vertical position of mouse relative to the screen
      console.log("Mouse X: " + x + ", Mouse Y: " + y);
    });

    // Example 2: Display Mouse Position (Using screenX and screenY)
    let displayBox = document.getElementById("displayBox");
    document.addEventListener("mousemove", function(event) {
      let x = event.screenX;
      let y = event.screenY;
      displayBox.textContent = "X: " + x + " Y: " + y;
    });

    // Example 3: Drawing on Canvas Based on Mouse Position (Using screenX and screenY)
    let canvas = document.getElementById("myCanvas");
    let ctx = canvas.getContext("2d");
    canvas.addEventListener("mousemove", function(event) {
      let x = event.screenX - window.screenX - canvas.offsetLeft;
      let y = event.screenY - window.screenY - canvas.offsetTop;
      ctx.fillStyle = "red";
      ctx.beginPath();
      ctx.arc(x, y, 5, 0, 2 * Math.PI);
      ctx.fill();
    });

    // Example 5: Right-Click Context Menu Position (Using screenX and screenY)
    let customContextMenu = document.getElementById("customContextMenu");
    document.addEventListener("contextmenu", function(event) {
      event.preventDefault();
      let x = event.screenX;
      let y = event.screenY;
      customContextMenu.style.left = x + "px";
      customContextMenu.style.top = y + "px";
      customContextMenu.style.display = "block";
    });
    document.addEventListener("click", function() {
      customContextMenu.style.display = "none";
    });

    // Example 6: Draggable Element (Using screenX and screenY)
    let draggableElement = document.getElementById("draggable");
    let isDragging = false;
    let offsetX, offsetY;

    draggableElement.addEventListener("mousedown", function(event) {
      isDragging = true;
      offsetX = event.screenX - draggableElement.offsetLeft;
      offsetY = event.screenY - draggableElement.offsetTop;
    });

    document.addEventListener("mousemove", function(event) {
      if (isDragging) {
        let x = event.screenX - offsetX;
        let y = event.screenY - offsetY;
        draggableElement.style.left = x + "px";
        draggableElement.style.top = y + "px";
      }
    });

    document.addEventListener("mouseup", function() {
      isDragging = false;
    });
  </script>
</body>
</html>








// key c s a meta windows 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mouse Button Click Detection</title>
  <style>
    button {
      margin: 10px;
      padding: 10px;
    }
  </style>
</head>
<body>

  <button id="button1">Button 1</button>
  <button id="button2">Button 2</button>
  <button id="button3">Button 3</button>

  <script>
    // Function to find which button is clicked
    function detectMouseButton(event) {
      switch (event.button) {
        case 0:
          console.log("Left button clicked");
          break;
        case 1:
          console.log("Middle button (scroll wheel) clicked");
          break;
        case 2:
          console.log("Right button clicked");
          break;
        default:
          console.log("Unknown button clicked");
      }
    }

    // Attach event listeners to the buttons
    document.getElementById("button1").addEventListener("mousedown", function(event) {
      detectMouseButton(event);
    });

    document.getElementById("button2").addEventListener("mousedown", function(event) {
      detectMouseButton(event);
    });

    document.getElementById("button3").addEventListener("mousedown", function(event) {
      detectMouseButton(event);
    });
  </script>

</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Modifier Key Detection</title>
  <style>
    button {
      margin: 10px;
      padding: 10px;
    }
  </style>
</head>
<body>

  <button id="button1">Button 1</button>
  <button id="button2">Button 2</button>
  <button id="button3">Button 3</button>

  <script>
    // Function to detect the mouse button and modifier keys (Alt, Shift, Ctrl)
    function detectMouseButtonAndModifiers(event) {
      let buttonText = '';
      
      // Check mouse button
      switch (event.button) {
        case 0:
          buttonText = "Left button clicked";
          break;
        case 1:
          buttonText = "Middle button (scroll wheel) clicked";
          break;
        case 2:
          buttonText = "Right button clicked";
          break;
        default:
          buttonText = "Unknown button clicked";
      }

      // Check if any modifier keys are pressed
      if (event.altKey) {
        buttonText += " with Alt key";
      }
      if (event.ctrlKey) {
        buttonText += " with Control key";
      }
      if (event.shiftKey) {
        buttonText += " with Shift key";
      }

      console.log(buttonText);
    }

    // Attach event listeners to the buttons
    document.getElementById("button1").addEventListener("mousedown", function(event) {
      detectMouseButtonAndModifiers(event);
    });

    document.getElementById("button2").addEventListener("mousedown", function(event) {
      detectMouseButtonAndModifiers(event);
    });

    document.getElementById("button3").addEventListener("mousedown", function(event) {
      detectMouseButtonAndModifiers(event);
    });
  </script>

</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mouse Button Detection</title>
  <style>
    button {
      margin: 10px;
      padding: 10px;
    }
  </style>
</head>
<body>

  <button id="button1">Button 1</button>
  <button id="button2">Button 2</button>
  <button id="button3">Button 3</button>

  <script>
    // Function to detect mouse button and extra buttons (if any)
    function detectMouseButton(event) {
      let buttonText = '';
      
      switch (event.button) {
        case 0:
          buttonText = "Left button clicked";
          break;
        case 1:
          buttonText = "Middle button (scroll wheel) clicked";
          break;
        case 2:
          buttonText = "Right button clicked";
          break;
        case 3:
          buttonText = "Button 4 (extra button) clicked";
          break;
        case 4:
          buttonText = "Button 5 (extra button) clicked";
          break;
        default:
          buttonText = "Unknown button clicked";
      }

      console.log(buttonText);
    }

    // Attach event listeners to the buttons
    document.getElementById("button1").addEventListener("mousedown", function(event) {
      detectMouseButton(event);
    });

    document.getElementById("button2").addEventListener("mousedown", function(event) {
      detectMouseButton(event);
    });

    document.getElementById("button3").addEventListener("mousedown", function(event) {
      detectMouseButton(event);
    });
  </script>

</body>
</html>


e.key






// oncut oncopy onpaste

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>oncopy, oncut, onpaste Example</title>
  <style>
    textarea {
      width: 300px;
      height: 150px;
      margin-top: 20px;
    }
    #info {
      margin-top: 10px;
      color: green;
    }
  </style>
</head>
<body>

  <h3>Try the oncopy, oncut, and onpaste events</h3>

  <textarea id="textArea" placeholder="Copy, Cut, or Paste text here."></textarea>

  <div id="info"></div>

  <script>
    // Function to handle copy event
    function handleCopy(event) {
      document.getElementById("info").textContent = "Content was copied!";
      console.log("Content was copied to clipboard.");
    }

    // Function to handle cut event
    function handleCut(event) {
      document.getElementById("info").textContent = "Content was cut!";
      console.log("Content was cut from the input.");
    }

    // Function to handle paste event
    function handlePaste(event) {
      document.getElementById("info").textContent = "Content was pasted!";
      console.log("Content was pasted into the input.");
    }

    // Attach event listeners to the textarea
    const textArea = document.getElementById("textArea");

    textArea.addEventListener("copy", handleCopy);
    textArea.addEventListener("cut", handleCut);
    textArea.addEventListener("paste", handlePaste);
  </script>

</body>
</html>




// ononline onoffline

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>onOnline and onOffline Example</title>
  <style>
    #status {
      font-size: 20px;
      margin-top: 20px;
    }
  </style>
</head>
<body>

  <h3>Network Status Detection</h3>
  <div id="status">Checking network status...</div>

  <script>
    // Function to handle the online event
    function handleOnline() {
      document.getElementById("status").textContent = "You are online!";
      console.log("The browser is online.");
    }

    // Function to handle the offline event
    function handleOffline() {
      document.getElementById("status").textContent = "You are offline!";
      console.log("The browser is offline.");
    }

    // Event listeners for online and offline events
    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);
  </script>

</body>
</html>

navigator.online // to is network is on 
