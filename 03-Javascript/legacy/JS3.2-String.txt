



1Ô∏è‚É£ String Length & Character Access
length ‚Äì Returns the number of characters in a string.
charAt(index) ‚Äì Returns the character at a specified index.
charCodeAt(index) ‚Äì Returns the Unicode of the character at a given index.
codePointAt(index) ‚Äì Returns the Unicode point value at a given index.
2Ô∏è‚É£ Case Conversion
toUpperCase() ‚Äì Converts the string to uppercase.
toLowerCase() ‚Äì Converts the string to lowercase.
3Ô∏è‚É£ Searching & Indexing
indexOf(value, start) ‚Äì Returns the first index of a value.
lastIndexOf(value, start) ‚Äì Returns the last index of a value.
includes(value, start) ‚Äì Checks if a substring exists inside a string.
startsWith(value, start) ‚Äì Checks if a string starts with a specified substring.
endsWith(value, length) ‚Äì Checks if a string ends with a specified substring.
search(regex) ‚Äì Searches for a match using a regex and returns the first match index.
4Ô∏è‚É£ String Modification & Replacement
replace(pattern, replacement) ‚Äì Replaces a substring or pattern.
replaceAll(pattern, replacement) ‚Äì Replaces all occurrences of a substring or pattern.
padStart(targetLength, padString) ‚Äì Pads a string at the start to a given length.
padEnd(targetLength, padString) ‚Äì Pads a string at the end to a given length.
trim() ‚Äì Removes whitespace from both ends of a string.
trimStart() / trimLeft() ‚Äì Removes whitespace from the start.
trimEnd() / trimRight() ‚Äì Removes whitespace from the end.
5Ô∏è‚É£ Extracting Substrings
slice(start, end) ‚Äì Extracts and returns a portion of a string.
substring(start, end) ‚Äì Returns a substring between two indices.
substr(start, length) (Deprecated but still supported) ‚Äì Extracts a substring based on start position and length.
6Ô∏è‚É£ Splitting & Joining
split(separator, limit) ‚Äì Splits a string into an array of substrings.
concat(string1, string2, ...) ‚Äì Concatenates multiple strings into one.
7Ô∏è‚É£ Repetition & Formatting
repeat(count) ‚Äì Returns a new string repeated a given number of times.
toLocaleUpperCase(locale) ‚Äì Converts string to uppercase based on locale.
toLocaleLowerCase(locale) ‚Äì Converts string to lowercase based on locale.
8Ô∏è‚É£ Regular Expressions & Matching
match(regex) ‚Äì Returns an array of matches for a regex.
matchAll(regex) ‚Äì Returns an iterator of all regex matches.
9Ô∏è‚É£ Unicode & Character Encoding
fromCharCode(code1, code2, ...) ‚Äì Returns a string created from UTF-16 code units.
fromCodePoint(code1, code2, ...) ‚Äì Returns a string using the given Unicode code points.
üîü String Comparison
localeCompare(compareString, locales, options) ‚Äì Compares two strings based on locale rules.






// 










// 1Ô∏è‚É£ String Length & Character Access
let str = "Hello, World!";
console.log(str.length); // 13
console.log(str.charAt(0)); // H
console.log(str.charCodeAt(0)); // 72
console.log(str.codePointAt(0)); // 72

// 2Ô∏è‚É£ Case Conversion
console.log(str.toUpperCase()); // "HELLO, WORLD!"
console.log(str.toLowerCase()); // "hello, world!"

// 3Ô∏è‚É£ Searching & Indexing
console.log(str.indexOf("o")); // 4
console.log(str.lastIndexOf("o")); // 8
console.log(str.includes("World")); // true
console.log(str.startsWith("Hello")); // true
console.log(str.endsWith("!")); // true
console.log(str.search(/World/)); // 7

// 4Ô∏è‚É£ String Modification & Replacement
console.log(str.replace("World", "JavaScript")); // "Hello, JavaScript!"
console.log(str.replaceAll("o", "0")); // "Hell0, W0rld!"
console.log(str.padStart(15, "*")); // "**Hello, World!"
console.log(str.padEnd(15, "*"); // "Hello, World!**"
console.log("  Hello  ".trim()); // "Hello"
console.log("  Hello  ".trimStart()); // "Hello  "
console.log("  Hello  ".trimEnd()); // "  Hello"

// 5Ô∏è‚É£ Extracting Substrings
console.log(str.slice(0, 5)); // "Hello"
console.log(str.substring(0, 5)); // "Hello"
console.log(str.substr(0, 5)); // "Hello" (Deprecated but still works)

// 6Ô∏è‚É£ Splitting & Joining
console.log(str.split(", ")); // ["Hello", "World!"]
console.log("Hello".concat(", ", "World!")); // "Hello, World!"

// 7Ô∏è‚É£ Repetition & Formatting
console.log("Hi ".repeat(3)); // "Hi Hi Hi "
console.log("hello".toLocaleUpperCase("tr")); // "HELLO" (Locale specific)
console.log("HELLO".toLocaleLowerCase("tr")); // "hello" (Locale specific)

// 8Ô∏è‚É£ Regular Expressions & Matching
console.log("Hello 123".match(/\d+/)); // ["123"]
console.log([..."Hello 123".matchAll(/\d+/g)]); // [["123"]]

// 9Ô∏è‚É£ Unicode & Character Encoding
console.log(String.fromCharCode(72, 101, 108, 108, 111)); // "Hello"
console.log(String.fromCodePoint(128512)); // üòÄ

// üîü String Comparison
console.log("apple".localeCompare("banana")); // -1 (apple comes before banana)
console.log("banana".localeCompare("apple")); // 1 (banana comes after apple)






































// 1 - String length










// 1 - String length


// 1 

// defining a string
let sentence = "I love Programiz.";

// returns number of characters in the sentence string
let len = sentence.length;

console.log(len);

// Output:
// 17

let str = "Hello, World!";
console.log(str.length);  // Output: 13










// 2 - JavaScript String replace()

// 1 

let str = "Hello, world!";
let newStr = str.replace("world", "JavaScript");
console.log(newStr);  // Output: "Hello, JavaScript!"


// 2 

let str = "Hello, world!";
let newStr = str.replace("world", "JavaScript");
console.log(newStr);  // Output: "Hello, JavaScript!"


// 3 

let str = "apple, apple, apple";
let newStr = str.replace(/apple/g, "orange");
console.log(newStr);  // Output: "orange, orange, orange"


// 4 

let str = "Hello, World!";
let newStr = str.replace(/world/i, "JavaScript");
console.log(newStr);  // Output: "Hello, JavaScript!"


// 5 










// 
