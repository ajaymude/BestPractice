//


1. Object Creation and Prototype Management
These methods are used for creating objects, managing prototypes, and inheritance.

Object.create(proto, propertiesObject)
Creates a new object with the specified prototype object and properties.

Object.setPrototypeOf(obj, prototype)
Sets the prototype (i.e., the internal [[Prototype]]) of a specified object.

Object.getPrototypeOf(obj)
Returns the prototype of the specified object.

Object.isPrototypeOf(obj)
Checks if an object exists in another object's prototype chain.

Object.assign(target, ...sources)
Copies all enumerable own properties from one or more source objects to a target object.

Object.fromEntries(iterable)
Transforms a list of key-value pairs (e.g., from a Map) into an object.

2. Property Management
These methods are used to define, modify, or inspect object properties.

Object.defineProperty(obj, prop, descriptor)
Defines a new property directly on an object or modifies an existing property.

Object.defineProperties(obj, props)
Defines new or modifies existing properties directly on an object.

Object.getOwnPropertyDescriptor(obj, prop)
Returns a property descriptor for an own property of an object.

Object.getOwnPropertyDescriptors(obj)
Returns all own property descriptors of an object.

Object.getOwnPropertyNames(obj)
Returns an array of all properties (including non-enumerable ones) found in an object.

Object.getOwnPropertySymbols(obj)
Returns an array of all symbol properties found in an object.

Object.propertyIsEnumerable(prop)
Checks if a property is enumerable.

Object.hasOwnProperty(prop)
Checks if an object has a specific property as its own (not inherited).

3. Object Immutability and Extensibility
These methods are used to control object mutability and extensibility.

Object.freeze(obj)
Freezes an object, preventing new properties from being added and existing properties from being modified or deleted.

Object.isFrozen(obj)
Determines if an object is frozen.

Object.seal(obj)
Seals an object, preventing new properties from being added and marking all existing properties as non-configurable.

Object.isSealed(obj)
Determines if an object is sealed.

Object.preventExtensions(obj)
Prevents new properties from being added to an object.

Object.isExtensible(obj)
Determines if an object is extensible (i.e., whether new properties can be added).

4. Object Inspection and Conversion
These methods are used to inspect or convert objects into other formats.

Object.keys(obj)
Returns an array of an object's own enumerable property names.

Object.values(obj)
Returns an array of an object's own enumerable property values.

Object.entries(obj)
Returns an array of an object's own enumerable property key-value pairs.

Object.toString()
Returns a string representation of the object.

Object.toLocaleString()
Returns a localized string representation of the object.

Object.valueOf()
Returns the primitive value of the specified object.

5. Object Comparison and Equality
These methods are used to compare objects or check for equality.

Object.is(value1, value2)
Determines if two values are the same value (strict equality with special handling for NaN and +0/-0).

6. Advanced Object Manipulation
These methods are used for advanced object manipulation and introspection.

Object.groupBy(array, callback) (Upcoming ES feature)
Groups elements of an array into an object based on the result of a callback function.

Object.groupByToMap(array, callback) (Upcoming ES feature)
Groups elements of an array into a Map based on the result of a callback function.

7. Miscellaneous
These methods don't fit into the above categories but are still useful.

Object.hasOwn(obj, prop) (ES2022)
Checks if an object has a specific property as its own (modern alternative to hasOwnProperty).

Object.isView(obj) (Non-standard, deprecated)
Checks if an object is a typed array view (rarely used).

Total Number of Object Methods: 31





// 1. Object Creation and Prototype Management
// (1)
const person = { name: "Alice" };
const newPerson = Object.create(person, { age: { value: 25 } });
console.log(newPerson.name); // Alice
console.log(newPerson.age); // 25

// (2)
const obj = {};
Object.setPrototypeOf(obj, { greeting: "Hello" });
console.log(obj.greeting); // Hello

// (3)
console.log(Object.getPrototypeOf(newPerson)); // { name: "Alice" }

// (4)
console.log(person.isPrototypeOf(newPerson)); // true

// (5)
const target = { a: 1 };
const source = { b: 2 };
Object.assign(target, source);
console.log(target); // { a: 1, b: 2 }

// (6)
const entries = new Map([["name", "Alice"], ["age", 25]]);
const objFromEntries = Object.fromEntries(entries);
console.log(objFromEntries); // { name: "Alice", age: 25 }

// 2. Property Management
// (7)
const user = {};
Object.defineProperty(user, "id", { value: 101, writable: false });
console.log(user.id); // 101

// (8)
Object.defineProperties(user, {
  name: { value: "Alice", writable: true },
  age: { value: 25, writable: false }
});
console.log(user.name); // Alice

// (9)
console.log(Object.getOwnPropertyDescriptor(user, "name"));

// (10)
console.log(Object.getOwnPropertyNames(user)); // [ 'id', 'name', 'age' ]

// (11)
console.log(Object.getOwnPropertySymbols(user)); // []

// (12)
console.log(user.propertyIsEnumerable("name")); // true

// (13)
console.log(user.hasOwnProperty("id")); // true

// 3. Object Immutability and Extensibility
// (14)
const car = { brand: "Tesla" };
Object.freeze(car);
console.log(Object.isFrozen(car)); // true

// (15)
const house = { type: "Villa" };
Object.seal(house);
console.log(Object.isSealed(house)); // true

// (16)
const bike = {};
Object.preventExtensions(bike);
console.log(Object.isExtensible(bike)); // false

// 4. Object Inspection and Conversion
// (17)
const person2 = { name: "Bob", age: 30 };
console.log(Object.keys(person2)); // [ 'name', 'age' ]

// (18)
console.log(Object.values(person2)); // [ 'Bob', 30 ]

// (19)
console.log(Object.entries(person2)); // [ [ 'name', 'Bob' ], [ 'age', 30 ] ]

// (20)
console.log(person2.toString()); // [object Object]

// (21)
console.log(person2.valueOf()); // { name: 'Bob', age: 30 }

// 5. Object Comparison and Equality
// (22)
console.log(Object.is(0, -0)); // false

// (23)
console.log(Object.is(NaN, NaN)); // true

// 6. Advanced Object Manipulation (Upcoming Features)
// groupBy and groupByToMap not yet available in JavaScript

// 7. Miscellaneous
// (24)
const data = { x: 10 };
console.log(Object.hasOwn(data, "x")); // true

// Deprecated methods
// (25)
const objDeprecated = {
  get prop() {
    return "getter";
  },
  set prop(value) {
    console.log("setter: " + value);
  }
};
console.log(objDeprecated.__lookupGetter__("prop")); // [Function: get prop]

// (26)
console.log(objDeprecated.__lookupSetter__("prop")); // [Function: set prop]

// (27)
console.log(person2.constructor === Object); // true

// (28)
function Person(name) {
  this.name = name;
}
const person3 = new Person("Charlie");
console.log(Person.prototype.isPrototypeOf(person3)); // true



























/ 1 - create the objects
/ 2 - Object Constructor
/ 3 - Accessing Properties in an Object
/ 4 - Bracket Notation
/ 5 - Modifying Properties in an Object
/ 6 - Adding Properties to an Object
/ 7 - Deleting Properties from an Object
/ 8 - Object Methods
/ 9 - Object Properties and Values , key , value , entries 
/ 10 - object literals
/ 11 - freeze
/ 12 -  bind, call, apply
/ 13 - assign
/ 14 - hasOwnProperty
/ 15 - json 
/ 16 - JSON.parse()
/ 17 - JSON.stringify()











/ 1 - create the objects

let person = {
  name: "Alice",
  age: 25,
  gender: "female"
};
console.log(person);  // Output: { name: "Alice", age: 25, gender: "female" }










/ 2 - Object Constructor

let person = new Object();
person.name = "Alice";
person.age = 25;
person.gender = "female";
console.log(person);  // Output: { name: "Alice", age: 25, gender: "female" }











/ 3 - Accessing Properties in an Object

let person = {
  name: "Alice",
  age: 25
};

console.log(person.name);  // Output: "Alice"
console.log(person.age);   // Output: 25











/ 4 - Bracket Notation

let person = {
  name: "Alice",
  age: 25
};

console.log(person["name"]);  // Output: "Alice"
console.log(person["age"]);   // Output: 25










/ 5 - Modifying Properties in an Object

let person = {
  name: "Alice",
  age: 25
};

// Modify using dot notation
person.name = "Bob";

// Modify using bracket notation
person["age"] = 30;

console.log(person);  // Output: { name: "Bob", age: 30 }










/ 6 - Adding Properties to an Object

let person = {
  name: "Alice",
  age: 25
};

// Add a new property using dot notation
person.gender = "female";

// Add a new property using bracket notation
person["country"] = "USA";

console.log(person);
// Output: { name: "Alice", age: 25, gender: "female", country: "USA" }










/ 7 - Deleting Properties from an Object

let person = {
  name: "Alice",
  age: 25
};

// Remove the 'age' property
delete person.age;

console.log(person);  // Output: { name: "Alice" }










/ 8 - Object Methods

let person = {
  name: "Alice",
  age: 25,
  greet: function() {
    console.log("Hello, " + this.name);
  }
};

person.greet();  // Output: "Hello, Alice"










/ 9 - Object Properties and Values , key , value , entries 

let person = {
  name: "Alice",
  age: 25,
  gender: "female"
};

console.log(Object.keys(person));
// Output: ["name", "age", "gender"]


console.log(Object.values(person));
// Output: ["Alice", 25, "female"]

 
console.log(Object.entries(person));
// Output: [["name", "Alice"], ["age", 25], ["gender", "female"]]












// 10 - object literals

const obj = { name:'ajay'}
obj.name
obj["name"]


const user = {
    name: 'John',
    address: {
        city: 'New York',
        zip: '10001'
    }
};

// Accessing a nested property using optional chaining
console.log(user.address?.city);  // Output: "New York"
console.log(user.address?.country);  // Output: undefined (since country is not defined)
console.log(user.profile?.age);  // Output: undefined (profile does not exist)



const person = {
    name: 'Alice',
    age: 25,
    greet: function() {
        console.log(`Hello, my name is ${this.name}`);
    }
};

person.greet(); // Output: Hello, my name is Alice



const calculator = {
    num1: 10,
    num2: 5,
    add() {
        return this.num1 + this.num2;
    },
    subtract() {
        return this.num1 - this.num2;
    }
};

console.log(calculator.add());      // Output: 15
console.log(calculator.subtract()); // Output: 5










/ 11 - freeze
Using Object.freeze() to Prevent Method Modification
You can prevent the modification of object properties
 and methods by using Object.freeze(). This will make the object immutable.

const frozenPerson = Object.freeze({
    name: 'Tom',
    greet() {
        console.log(`Hello, my name is ${this.name}`);
    }
});

frozenPerson.greet(); // Output: Hello, my name is Tom
frozenPerson.greet = function() {
    console.log('This method cannot be changed');
};
frozenPerson.greet(); // Output: Hello, my name is Tom (Method can't be changed)









/ 12 -  bind, call, apply

- Object Methods and bind, call, and apply
You can use bind(), call(), and apply() 
to explicitly set the this value in object methods.

const person = {
    name: 'John',
    greet() {
        console.log(`Hello, my name is ${this.name}`);
    }
};

const newPerson = { name: 'Alice' };

const greetNewPerson = person.greet.bind(newPerson);
greetNewPerson(); // Output: Hello, my name is Alice

person.greet.call(newPerson); // Output: Hello, my name is Alice
person.greet.apply(newPerson); // Output: Hello, my name is Alice









/ 13 - assign

In JavaScript, the Object.assign() method is used to copy the values 
of all enumerable properties from one or more source objects to a target object.
It returns the target object. This is commonly used for merging objects or cloning them.

const person = {
    name: 'Alice',
    age: 25
};

const address = {
    city: 'New York',
    country: 'USA'
};

// Using Object.assign to copy properties of address into person
Object.assign({}, person, address);

console.log(person);
// Output: { name: 'Alice', age: 25, city: 'New York', country: 'USA' }




const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3, d: 4 };
const obj3 = { e: 5, f: 6 };

const mergedObj = Object.assign({}, obj1, obj2, obj3);

console.log(mergedObj);
// Output: { a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 }





Using Object.assign() with Objects Containing getter and setter

const source = {
    get name() {
        return 'John';
    },
    set name(value) {
        console.log(`Setting name to ${value}`);
    }
};

const target = {};

Object.assign(target, source);

console.log(target.name);  // Output: John
target.name = 'Steve';     // Output: Setting name to Steve









/ 14 - hasOwnProperty

In JavaScript, the hasOwnProperty() method is used to check if an object
has a specific property as its own (not inherited).
It returns true if the object has the specified property directly,
 and false if the property is inherited or does not exist.

const person = {
    name: 'John',
    age: 30
};

console.log(person.hasOwnProperty('name'));  // Output: true
console.log(person.hasOwnProperty('city'));  // Output: false



const user = {
    username: 'john_doe',
    password: 'secret123'
};

function validateUser(user) {
    if (!user.hasOwnProperty('username') || !user.hasOwnProperty('password')) {
        console.log('Validation failed: Missing required properties.');
    } else {
        console.log('Validation successful.');
    }
}

validateUser(user);  // Output: Validation successful.










In JavaScript, object destructuring is a shorthand syntax that allows
 you to extract properties from an object and assign them to variables 
 in a more concise and readable way. Here are various examples of how to 
 use object destructuring in JavaScript.



const person = {
    name: 'Alice',
    age: 30,
    city: 'New York'
};

// Destructuring assignment
const { name, age, city } = person;

console.log(name);  // Output: Alice
console.log(age);   // Output: 30
console.log(city);  // Output: New York




const person = {
    name: 'Bob',
    age: 25,
    city: 'Paris'
};

// Destructuring with different variable names
const { name: fullName, age: years, city: location } = person;

console.log(fullName); // Output: Bob
console.log(years);    // Output: 25
console.log(location); // Output: Paris



const person = {
    name: 'Charlie',
    age: 35
};

// Destructuring with default values
const { name, age, city = 'Unknown' } = person;

console.log(name);  // Output: Charlie
console.log(age);   // Output: 35
console.log(city);  // Output: Unknown (because city is undefined in the object)




const person = {
    name: 'David',
    address: {
        street: '123 Main St',
        city: 'Chicago',
        zip: '60601'
    }
};

// Destructuring the nested address object
const { name, address: { street, city, zip } } = person;

console.log(name);    // Output: David
console.log(street);  // Output: 123 Main St
console.log(city);    // Output: Chicago
console.log(zip);     // Output: 60601


const person = {
    name: 'Eve',
    age: 22,
    city: 'San Francisco'
};

// Destructuring in function parameters
function greet({ name, age }) {
    console.log(`Hello, my name is ${name} and I am ${age} years old.`);
}

greet(person);
// Output: Hello, my name is Eve and I am 22 years old.




















/ 15 - json 

{
  "name": "John Doe",
  "age": 30,
  "isStudent": false,
  "address": {
    "street": "123 Main St",
    "city": "Anytown",
    "state": "CA"
  },
  "courses": ["Math", "Science", "History"]
}



/ 16 - JSON.parse()

const jsonString = '{"name": "John", "age": 30}';
const jsonObject = JSON.parse(jsonString);
console.log(jsonObject); // { name: "John", age: 30 }



/ 17 - JSON.stringify()

const obj = { name: "John", age: 30 };
const jsonString = JSON.stringify(obj);
console.log(jsonString); // '{"name":"John","age":30}'


