

// Topic 

// 0 - console
// 1 - Linking a JavaScript File
// 2 - variable
// 3 - Data Types in Variables
// 4 - comments 
// 5 - operator 
// 6 - Operator Precedence in JavaScript (Highest to Lowest)
// 7 - Template String
// 8 - if else statement
// 9 - type conversion and type coercion
// 10 - ternary operator
// 11 - switch statements
// 12 - alert , prompt , confirm
// 13 - setInterval  clearInterval
// 14 - setTimeout clearTimeout
// 15 - rest operator 
// 16 -  Spread Operator (...) 
// 17 - Destrucuring 
// 18 - strict mode in JavaScript








// 0 - console , introduction 

// 1994 by netscape livescript , later know as javascript 



// 1. console.log()
console.log("Hello, world!");

// 2. console.info()
console.info("This is an informational message.");

// 3. console.warn()
console.warn("This is a warning message.");

// 4. console.error()
console.error("This is an error message.");

// 5. console.table()
const people = [
  { name: 'John', age: 28 },
  { name: 'Jane', age: 32 },
  { name: 'Alice', age: 25 }
];
console.table(people);

// 6. console.group() and console.groupEnd()
console.group("User Information");
console.log("Name: John Doe");
console.log("Age: 30");
console.groupEnd();

// 7. console.groupCollapsed()
console.groupCollapsed("Collapsed Group");
console.log("This is inside the collapsed group.");
console.groupEnd();

// 8. console.count()
console.count("Counter");
console.count("Counter");
console.count("Counter");

// 9. console.countReset()
console.count("Counter");
console.countReset("Counter");
console.count("Counter");

// 10. console.assert()
console.assert(1 === 2, "This assertion failed!"); 

// 11. console.dir()
const person = { name: "John", age: 30, profession: "Developer" };
console.dir(person);

// 12. console.trace()
function foo() {
  bar();
}

function bar() {
  console.trace("Trace of the function call.");
}

foo();

// 13. console.time() and console.timeEnd()
console.time("My Timer");
for (let i = 0; i < 1000000; i++) {
  // Some loop operation
}
console.timeEnd("My Timer");

// 14. console.trace() with a label
function a() {
  b();
}

function b() {
  c();
}

function c() {
  console.trace("Tracing the functions");
}

a();

// 15. console.memory (Only works in Chrome DevTools)
console.memory;

// 16. console.clear()
console.clear();











// 1 - Linking a JavaScript File

// a - internal html

<!DOCTYPE html>
<html>
<head>
    <title>Multiple JS Example</title>
</head>
<body>
    <h1>Hello, World!</h1>

    <!-- Inline JS #1 -->
    <script>
        console.log("This is the first JS script.");
    </script>

    <!-- Inline JS #2 -->
    <script>
        console.log("This is the second JS script.");
    </script>
</body>
</html>


// b - external html

<!DOCTYPE html>
<html>
<head>
    <title>Multiple External JS Example</title>
</head>
<body>
    <h1>Hello, World!</h1>

    <!-- External JS #1 -->
    <script src="script1.js"></script>

    <!-- External JS #2 -->
    <script src="script2.js"></script>

    <!-- External JS #3 -->
    <script src="script3.js"></script>
</body>
</html>










// 2 - variable

var name = "Alice";      // declare y // redeclare y // reassign  y   // glolbe scope  
let city = "New York";   // declare y // redeclare n // reassign  y   // block scope
const pi = 3.14159;      // declare y // redeclare n // reassign  n   // block scope   

if block will always replace the glolbe scope 











// 3 - Data Types in Variables

/ primitive data type  

// Boolean
// Number
// String
// Undefined
// Null
// Symbol
// BigInt

/ non primitive data / reference type data 
// Array
// Object


/ falsy value  
1. false
2. 0
3. -0
4. ""
5. null
6. undefined
7. NaN

// Truthy and Falsy Values:
// Truthy values: (Considered "true" in boolean context)
console.log(Boolean(1)); // true
console.log(Boolean("hello")); // true
console.log(Boolean([])); // true
console.log(Boolean({})); // true
console.log(Boolean(Infinity)); // true

// Falsy values: (Considered "false" in boolean context)
console.log(Boolean(0)); // false
console.log(Boolean("")); // false
console.log(Boolean(null)); // false
console.log(Boolean(undefined)); // false
console.log(Boolean(NaN)); // false
console.log(Boolean(false)); // false






// Short-circuit evaluation examples

// 1. AND (&&) Short-circuit
let a = false && "Hello";
console.log("AND Short-circuit:", a); // false (stops at first false value) or return the last true value 

let b = true && "Hello";
console.log("AND Short-circuit:", b); // "Hello" (returns last truthy value)

// 2. OR (||) Short-circuit
let c = true || "World";
console.log("OR Short-circuit:", c); // true (stops at first truthy value) or the last false value 

let d = false || "World";
console.log("OR Short-circuit:", d); // "World" (returns last truthy value)

// 3. Nullish Coalescing Operator (??)
let e = null ?? "Default Value";
console.log("Nullish Coalescing:", e); // "Default Value"





// Example 1: Using nullish coalescing operator
const userAge = null;
const defaultAge = 25;

const age = userAge ?? defaultAge;
console.log(age); // Output: 25 (because userAge is null)

// Example 2: When left-hand side is not null or undefined
const userName = "John";
const defaultName = "Anonymous";

const name = userName ?? defaultName;
console.log(name); // Output: John (because userName is not null or undefined)

// Example 3: Comparing with OR (||) operator
const userScore = 0; // Intentionally 0 (falsy value)
const defaultScore = 10;

// Using OR (||) operator
const scoreUsingOr = userScore || defaultScore;
console.log(scoreUsingOr); // Output: 10 (0 is treated as falsy)

// Using nullish coalescing operator (??)
const scoreUsingNullish = userScore ?? defaultScore;
console.log(scoreUsingNullish); //









// 4 - comments 

// This is a single-line comment
let x = 10; // This is an inline comment

/*
  This is a multi-line comment.
  It can span multiple lines.
*/

  







// 5 - operator 



// List of JavaScript Arithmetic Operators:
// 1. Addition (+)
// 2. Subtraction (-)
// 3. Multiplication (*)
// 4. Division (/)
// 5. Modulus (%)
// 6. Exponentiation (**)
// 7. Increment (++): Post & Pre
// 8. Decrement (--): Post & Pre

// Examples:

// 1. Addition (+)
let sum = 10 + 5;
console.log("Addition:", sum); // 15

// 2. Subtraction (-)
let difference = 10 - 5;
console.log("Subtraction:", difference); // 5

// 3. Multiplication (*)
let product = 10 * 5;
console.log("Multiplication:", product); // 50

// 4. Division (/)
let quotient = 10 / 2;
console.log("Division:", quotient); // 5

// 5. Modulus (%)
let remainder = 10 % 3;
console.log("Modulus:", remainder); // 1

// 6. Exponentiation (**)
let power = 2 ** 3;
console.log("Exponentiation:", power); // 8

// 7. Increment (++): Post & Pre
let num1 = 5;
console.log("Post-Increment:", num1++); // 5 (uses first, then increments)
console.log("After Post-Increment:", num1); // 6

let num2 = 5;
console.log("Pre-Increment:", ++num2); // 6 (increments first, then uses)

// 8. Decrement (--): Post & Pre
let num3 = 5;
console.log("Post-Decrement:", num3--); // 5 (uses first, then decrements)
console.log("After Post-Decrement:", num3); // 4

let num4 = 5;
console.log("Pre-Decrement:", --num4); // 4 (decrements first, then uses)

// Real-world example: Calculate total price including tax
let price = 100;
let tax = 10;
let total = price + tax;
console.log("Total Price:", total); // 110

// Check if a number is even or odd using modulus
let number = 7;
console.log("Number is:", number % 2 === 0 ? "Even" : "Odd"); // Odd










// List of JavaScript Assignment Operators:
// 1. Assign (=)
// 2. Add and Assign (+=)
// 3. Subtract and Assign (-=)
// 4. Multiply and Assign (*=)
// 5. Divide and Assign (/=)
// 6. Modulus and Assign (%=)
// 7. Exponentiation and Assign (**=)

// Examples:

// 1. Assign (=)
let x = 10;
console.log("Assign:", x); // 10

// 2. Add and Assign (+=)
x += 5;
console.log("Add and Assign:", x); // 15

// 3. Subtract and Assign (-=)
x -= 3;
console.log("Subtract and Assign:", x); // 12

// 4. Multiply and Assign (*=)
x *= 2;
console.log("Multiply and Assign:", x); // 24

// 5. Divide and Assign (/=)
x /= 4;
console.log("Divide and Assign:", x); // 6

// 6. Modulus and Assign (%=)
x %= 5;
console.log("Modulus and Assign:", x); // 1

// 7. Exponentiation and Assign (**=)
x **= 3;
console.log("Exponentiation and Assign:", x); // 1






// List of JavaScript Comparison Operators:
// 1. Equal (==)
// 2. Strict Equal (===)
// 3. Not Equal (!=)
// 4. Strict Not Equal (!==)
// 5. Greater Than (>)
// 6. Greater Than or Equal (>=)
// 7. Less Than (<)
// 8. Less Than or Equal (<=)

// Examples:

console.log("Equal:", 5 == "5"); // true (loose comparison)
console.log("Strict Equal:", 5 === "5"); // false (strict comparison)
console.log("Not Equal:", 5 != "5"); // false (loose comparison)
console.log("Strict Not Equal:", 5 !== "5"); // true (strict comparison)
console.log("Greater Than:", 10 > 5); // true
console.log("Greater Than or Equal:", 10 >= 10); // true
console.log("Less Than:", 3 < 5); // true
console.log("Less Than or Equal:", 3 <= 3); // true




// Ternary Operator Example
let age = 18;
let access = age >= 18 ? "Allowed" : "Denied";
console.log("Access:", access); // "Allowed"






// List of JavaScript Logical Operators:
// 1. AND (&&)
// 2. OR (||)
// 3. NOT (!)

// Examples:

// 1. AND (&&)
let isAdult = true;
let hasID = false;
console.log("Can enter club:", isAdult && hasID); // false

// 2. OR (||)
let hasTicket = false;
let isVIP = true;
console.log("Can enter event:", hasTicket || isVIP); // true

// 3. NOT (!)
let isRaining = false;
console.log("Is it sunny?", !isRaining); // true











// 6 - Operator Precedence in JavaScript (Highest to Lowest)

1. ()                   // Grouping expression
2. ++ (Post-increment), -- (Post-decrement)   // Postfix operators
3. ++ (Pre-increment), -- (Pre-decrement), +, -, !, ~, typeof, void   // Unary operators
4. **                    // Exponentiation
5. *, /, %               // Multiplication, Division, Modulo
6. +, -                  // Addition, Subtraction
7. <<, >>, >>>           // Bitwise shift operators
8. <, <=, >, >=, in, instanceof  // Relational operators
9. ==, !=, ===, !==      // Equality and inequality operators
10. &                    // Bitwise AND
11. ^                    // Bitwise XOR
12. |                    // Bitwise OR
13. &&                   // Logical AND
14. ||                   // Logical OR
15. ? :                  // Ternary conditional operator
16. =, +=, -=, *=, /=, %= // Assignment operators
17. ,                    // Comma operator










// 7 -  Template String

const x = 5;
const y = 10;
const sum = `The sum of ${x} and ${y} is ${x + y}.`;

const message = `The current year is ${getYear()}.`;










// 8 - if else statement

let score = 85;

if (score >= 90) {
  console.log('Grade: A');  // If score is 90 or greater
} else if (score >= 80) {
  console.log('Grade: B');  // If score is between 80 and 89
} else if (score >= 70) {
  console.log('Grade: C');  // If score is between 70 and 79
} else if (score >= 60) {
  console.log('Grade: D');  // If score is between 60 and 69
} else {
  console.log('Grade: F');  // If score is less than 60
}










// 9 -  type conversion and type coercion

// Type Conversion Example , by us
let str = "456";
let num = Number(str);  // Explicit conversion
console.log(num); // Output: 456 (number)

// Type Coercion Example , by js
let str2 = "5";
let num2 = 5;
console.log(str2 == num2);  // Output: true (string is coerced to number)










// 10 -ternary operator 

// Example variable
let age = 20;
let result = age >= 18 ? 'Adult' : 'Minor';










// 11 -  switch statements
let day = 3;
let dayName;

switch (day) {
  case 1:
    dayName = 'Monday';
    break;
  case 2:
    dayName = 'Tuesday';
    break;
  case 3:
    dayName = 'Wednesday';
    break;
  case 4:
    dayName = 'Thursday';
    break;
  case 5:
    dayName = 'Friday';
    break;
  case 6:
    dayName = 'Saturday';
    break;
  case 7:
    dayName = 'Sunday';
    break;
  default:
    dayName = 'Invalid day';
}

console.log(dayName);  // Output: 'Wednesday'










// 12 -  alert , prompt , confirm

let age = 16;

if (age < 18) {
  alert("You are a minor.");
} else {
  alert("You are an adult.");
}



let userChoice = confirm("Do you want to proceed?");
if (userChoice) {
  alert("You clicked OK!");
} else {
  alert("You clicked Cancel!");
}



let age = prompt("How old are you?", "25");
alert("You are " + age + " years old.");










// 13 - setInterval  clearInterval

// 1. setInterval() example
let counter = 0;

// Using setInterval to execute a function every 1 second (1000 milliseconds)
let intervalId = setInterval(function() {
    counter++;
    console.log('Counter:', counter);

    // After 5 seconds, clear the interval
    if (counter === 5) {
        clearInterval(intervalId); // This stops the interval
        console.log('Interval cleared after 5 counts');
    }
}, 1000);  // The function is called every 1000 milliseconds (1 second)

// Output:
// Counter: 1
// Counter: 2
// Counter: 3
// Counter: 4
// Counter: 5
// Interval cleared after 5 counts










// 14 - setTimeout clearTimeout


// 1. Using setTimeout() to execute a function after a delay

let timeoutId = setTimeout(function() {
    console.log("This message will appear after 3 seconds.");
}, 3000); // 3000 milliseconds (3 seconds)

// 2. Using clearTimeout() to cancel the timeout before it executes

// Let's cancel the timeout after 1 second
setTimeout(function() {
    clearTimeout(timeoutId);  // Clears the first setTimeout
    console.log("Timeout has been cleared before it ran.");
}, 1000); // 1000 milliseconds (1 second)

// Output:
// "Timeout has been cleared before it ran."
// (The first message won't appear because it was cleared before running)










// 15 - rest operator 

function sum(...numbers) {
  return numbers.reduce((acc, num) => acc + num, 0);
}

console.log(sum(1, 2, 3)); // Output: 6
console.log(sum(10, 20, 30, 40)); // Output: 100



const arr = [1, 2, 3, 4, 5];
const [first, second, ...rest] = arr;

console.log(first);  // Output: 1
console.log(second); // Output: 2
console.log(rest);   // Output: [3, 4, 5]



const person = {
  name: "Alice",
  age: 25,
  country: "USA",
  city: "New York"
};

const { name, age, ...address } = person;

console.log(name);   // Output: Alice
console.log(age);    // Output: 25
console.log(address); // Output: { country: 'USA', city: 'New York' }










// 16 -  Spread Operator (...) 

const arr1 = [1, 2, 3];
const arr2 = [...arr1, 4, 5];
console.log(arr2); // Output: [1, 2, 3, 4, 5]


const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const mergedArray = [...arr1, ...arr2];
console.log(mergedArray); // Output: [1, 2, 3, 4, 5, 6]


const person = { name: "Jane", age: 25 };
const clonedPerson = { ...person };
clonedPerson.age = 26;

console.log(person); // Output: { name: "Jane", age: 25 }
console.log(clonedPerson); // Output: { name: "Jane", age: 26 }









 
// 17 - Destrucuring 

const arr = [1, 2, 3];
const [a, b, c] = arr;
console.log(a); // Output: 1
console.log(b); // Output: 2
console.log(c); // Output: 3


const arr = [1];
const [a, b = 2] = arr;
console.log(a); // Output: 1
console.log(b); // Output: 2


const person = { name: "Alice", age: 25 };
const { name, age } = person;
console.log(name); // Output: Alice
console.log(age);  // Output: 25












// 18 - strict mode in JavaScript

var obj = { a: 1, a: 2 }; // Error in strict mode

"use strict";
var obj = {};
Object.defineProperty(obj, 'x', { value: 42, writable: false });
obj.x = 17; // Error in strict mode






  