
// Old way 
const userName = user && user.info && user.info.name || ‘Anonymous’;

//Modern way using Optional Chaining and Nullish Coalescing 
const userName = user?.info?.name ?? 'Anonymous';




//  Banishing Falsy Values
Filtering out those pesky falsy values (0, undefined, null, false, "", '') is a breeze:
const array = [3, 0, 6, 7, '', false];
array.filter(Boolean); 
// Output: [3, 6, 7] -  Clean and concise!



// 

10 % 3


console.log(Boolean(0));


console.log(undefined + 1);
// NaN



let x;
console.log(x);
// undefined



console.log(true + false);
/ 1 



console.log(null == 0);
null == 0 evaluates to false.


console.log(typeof null);
/object 



console.log([] + []);

When you use the + operator with arrays, JavaScript converts them to strings.
[].toString() results in an empty string.
So, [] + [] becomes "" + "", which results in an empty string ("").



console.log([] + {});  // console.log({} + []);


[].toString() results in an empty string ("").
For an object like {}, {}.toString() results in "[object Object]".
So, [] + {} becomes "" + "[object Object]", which results in "[object Object]".




console.log(+"5" - -"2");
+"5" converts the string "5" into the number 5.
-"2" converts the string "2" into the number -2 (note the negative sign).
The expression becomes 5 - (-2), which simplifies to 5 + 2.
So, the result is 7.



console.log([] == 0);

The == operator performs type coercion.
When comparing an empty array ([]) with 0, JavaScript converts the array to a string first.
[].toString() becomes an empty string ("").
Then, "" is coerced to 0, so the comparison 0 == 0 evaluates to true.




function display({ name, age }) {
  console.log(`Name: ${name}, Age: ${age}`);
}

display({ name: "Alice", age: 30 }); // ?

