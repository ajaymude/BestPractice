

// Number 

// JavaScript Number Methods

let num = 123.456;

// 1. toString() - Converts number to string
console.log(num.toString());  // "123.456"

// 2. toFixed(n) - Formats number with n decimal places
console.log(num.toFixed(2));  // "123.46"

// 3. toPrecision(n) - Formats number with specified length
console.log(num.toPrecision(4));  // "123.5"

// 4. toExponential(n) - Converts to exponential notation
console.log(num.toExponential(2));  // "1.23e+2"

// 5. valueOf() - Returns primitive value of number
console.log(num.valueOf());  // 123.456

// 6. Number() - Converts a value to a number
console.log(Number("100"));  // 100
console.log(Number(true));  // 1

// 7. Number.isInteger(x) - Checks if x is an integer
console.log(Number.isInteger(10));  // true
console.log(Number.isInteger(10.5));  // false

// 8. Number.isFinite(x) - Checks if x is a finite number
console.log(Number.isFinite(1000));  // true
console.log(Number.isFinite(Infinity));  // false

// 9. Number.isNaN(x) - Checks if x is NaN
console.log(Number.isNaN("hello" / 2));  // true
console.log(Number.isNaN(10));  // false

// 10. parseInt(x) - Converts string to integer
console.log(parseInt("100px"));  // 100
console.log(parseInt("10.55"));  // 10

// 11. parseFloat(x) - Converts string to float
console.log(parseFloat("10.55kg"));  // 10.55

// Math Object Methods

// 12. Math.abs(x) - Returns absolute value
console.log(Math.abs(-5));  // 5

// 13. Math.round(x) - Rounds to nearest integer
console.log(Math.round(4.6));  // 5

// 14. Math.floor(x) - Rounds down
console.log(Math.floor(4.9));  // 4

// 15. Math.ceil(x) - Rounds up
console.log(Math.ceil(4.1));  // 5

// 16. Math.trunc(x) - Returns integer part
console.log(Math.trunc(4.9));  // 4

// 17. Math.sqrt(x) - Square root
console.log(Math.sqrt(16));  // 4

// 18. Math.cbrt(x) - Cube root
console.log(Math.cbrt(27));  // 3

// 19. Math.pow(x, y) - Power
console.log(Math.pow(2, 3));  // 8

// 20. Math.max(a, b, ...) - Returns maximum value
console.log(Math.max(10, 20, 30));  // 30

// 21. Math.min(a, b, ...) - Returns minimum value
console.log(Math.min(10, 20, 30));  // 10

// 22. Math.random() - Random number between 0 and 1
console.log(Math.random());  

// 23. Math.sign(x) - Returns 1 for positive, -1 for negative, 0 for zero
console.log(Math.sign(-5));  // -1
console.log(Math.sign(5));   // 1

// 24. Math.log(x) - Natural logarithm (base e)
console.log(Math.log(10));  

// 25. Math.log10(x) - Base-10 logarithm
console.log(Math.log10(100));  // 2

// 26. Math.log2(x) - Base-2 logarithm
console.log(Math.log2(8));  // 3

// 27. Math.sin(x), Math.cos(x), Math.tan(x) - Trigonometric functions
console.log(Math.sin(Math.PI / 2));  // 1
console.log(Math.cos(0));  // 1
console.log(Math.tan(Math.PI / 4));  // 1

// 28. Math.sinh(x), Math.cosh(x), Math.tanh(x) - Hyperbolic functions
console.log(Math.sinh(1));  
console.log(Math.cosh(1));  
console.log(Math.tanh(1));  

// 29. Math.hypot(a, b, ...) - Returns square root of sum of squares
console.log(Math.hypot(3, 4));  // 5

// 30. Math.fround(x) - Returns the nearest single precision float
console.log(Math.fround(1.337));  

// 31. Math.clz32(x) - Count leading zero bits in 32-bit integer
console.log(Math.clz32(1));  // 31

// 32. Math.imul(a, b) - Performs 32-bit integer multiplication
console.log(Math.imul(2, 3));  // 6

// 33. Number.EPSILON - Smallest difference between two numbers
console.log(Number.EPSILON);  

// 34. Number.MAX_SAFE_INTEGER - Largest exact integer in JS
console.log(Number.MAX_SAFE_INTEGER);  

// 35. Number.MIN_SAFE_INTEGER - Smallest exact integer in JS
console.log(Number.MIN_SAFE_INTEGER);  

// 36. Number.MAX_VALUE - Largest possible number in JS
console.log(Number.MAX_VALUE);  

// 37. Number.MIN_VALUE - Smallest possible number in JS
console.log(Number.MIN_VALUE);  






Special Number Properties:
Number.POSITIVE_INFINITY → Represents positive infinity.
Number.NEGATIVE_INFINITY → Represents negative infinity.
Number.MAX_VALUE → The largest positive number JavaScript can represent.
Number.MIN_VALUE → The smallest positive number greater than zero.
Number.MAX_SAFE_INTEGER → The largest integer JavaScript can safely represent.
Number.MIN_SAFE_INTEGER → The smallest integer JavaScript can safely represent.
Number.EPSILON → The smallest possible difference between two floating-point numbers.
NaN (Not a Number) → Represents an invalid number.



console.log(Number.POSITIVE_INFINITY);  // Infinity
console.log(Number.NEGATIVE_INFINITY);  // -Infinity
console.log(Number.MAX_VALUE);          // 1.7976931348623157e+308
console.log(Number.MIN_VALUE);          // 5e-324
console.log(Number.MAX_SAFE_INTEGER);   // 9007199254740991
console.log(Number.MIN_SAFE_INTEGER);   // -9007199254740991
console.log(Number.EPSILON);            // 2.220446049250313e-16
console.log(Number.isNaN(NaN));         // true



































// date 

// 1. new Date() - Creates a new Date object with the current date and time
let currentDate = new Date();
console.log(currentDate);  // Output: Current date and time (e.g., "Sat Dec 22 2024 12:00:00 GMT+0000 (UTC)")

// 2. Date.now() - Returns the current timestamp in milliseconds
let timestamp = Date.now();
console.log(timestamp);  // Output: Current timestamp in milliseconds

// 3. getFullYear() - Gets the year of the Date object
let date1 = new Date();
console.log(date1.getFullYear());  // Output: 2024

// 4. getMonth() - Gets the month of the Date object (0-11)
let date2 = new Date();
console.log(date2.getMonth());  // Output: 11 (December)

// 5. getDate() - Gets the day of the month (1-31)
let date3 = new Date();
console.log(date3.getDate());  // Output: 22

// 6. getDay() - Gets the day of the week (0-6)
let date4 = new Date();
console.log(date4.getDay());  // Output: 6 (Saturday)

// 7. getHours() - Gets the hour (0-23)
let date5 = new Date();
console.log(date5.getHours());  // Output: 12

// 8. getMinutes() - Gets the minutes (0-59)
let date6 = new Date();
console.log(date6.getMinutes());  // Output: 30

// 9. getSeconds() - Gets the seconds (0-59)
let date7 = new Date();
console.log(date7.getSeconds());  // Output: 45

// 10. getMilliseconds() - Gets the milliseconds (0-999)
let date8 = new Date();
console.log(date8.getMilliseconds());  // Output: 500

// 11. getTime() - Gets the time in milliseconds since Jan 1, 1970
let date9 = new Date();
console.log(date9.getTime());  // Output: 1633036800000

// 12. getUTCFullYear() - Gets the UTC year
let date10 = new Date();
console.log(date10.getUTCFullYear());  // Output: 2024

// 13. getUTCMonth() - Gets the UTC month (0-11)
let date11 = new Date();
console.log(date11.getUTCMonth());  // Output: 11

// 14. getUTCDate() - Gets the UTC day of the month (1-31)
let date12 = new Date();
console.log(date12.getUTCDate());  // Output: 22

// 15. getUTCDay() - Gets the UTC day of the week (0-6)
let date13 = new Date();
console.log(date13.getUTCDay());  // Output: 6 (Saturday)

// 16. getUTCHours() - Gets the UTC hour (0-23)
let date14 = new Date();
console.log(date14.getUTCHours());  // Output: 12

// 17. getUTCMinutes() - Gets the UTC minutes (0-59)
let date15 = new Date();
console.log(date15.getUTCMinutes());  // Output: 30

// 18. getUTCSeconds() - Gets the UTC seconds (0-59)
let date16 = new Date();
console.log(date16.getUTCSeconds());  // Output: 45

// 19. setFullYear(year) - Sets the year of the Date object
let date17 = new Date();
date17.setFullYear(2025);
console.log(date17);  // Output: New date with year set to 2025

// 20. setMonth(month) - Sets the month (0-11) of the Date object
let date18 = new Date();
date18.setMonth(11);  // December (0 = January, 11 = December)
console.log(date18);  // Output: Date with month set to December

// 21. setDate(day) - Sets the day of the month (1-31) of the Date object
let date19 = new Date();
date19.setDate(25);
console.log(date19);  // Output: Date with day set to 25

// 22. setHours(hour) - Sets the hour (0-23) of the Date object
let date20 = new Date();
date20.setHours(10);  // 10 AM
console.log(date20);  // Output: Date with hour set to 10

// 23. setMinutes(minutes) - Sets the minutes (0-59) of the Date object
let date21 = new Date();
date21.setMinutes(30);
console.log(date21);  // Output: Date with minutes set to 30

// 24. setSeconds(seconds) - Sets the seconds (0-59) of the Date object
let date22 = new Date();
date22.setSeconds(45);
console.log(date22);  // Output: Date with seconds set to 45

// 25. setMilliseconds(milliseconds) - Sets the milliseconds (0-999) of the Date object
let date23 = new Date();
date23.setMilliseconds(500);
console.log(date23);  // Output: Date with milliseconds set to 500

// 26. setTime(milliseconds) - Sets the time in milliseconds since Jan 1, 1970
let date24 = new Date();
date24.setTime(1633036800000);  // Set to a specific time in milliseconds
console.log(date24);  // Output: Date set to the specific time

// 27. toDateString() - Returns the date part of the Date object as a string
let date25 = new Date();
console.log(date25.toDateString());  // Output: "Sat Dec 22 2024"

// 28. toISOString() - Returns the date in ISO 8601 format (UTC)
let date26 = new Date();
console.log(date26.toISOString());  // Output: "2024-12-22T12:00:00.000Z"

// 29. toJSON() - Returns the Date object in JSON format (same as toISOString)
let date27 = new Date();
console.log(date27.toJSON());  // Output: "2024-12-22T12:00:00.000Z"

// 30. toLocaleDateString() - Returns the date part in the local format
let date28 = new Date();
console.log(date28.toLocaleDateString());  // Output: "12/22/2024" (depends on locale)

// 31. toLocaleString() - Returns the date and time in local format
let date29 = new Date();
console.log(date29.toLocaleString());  // Output: "12/22/2024, 12:00:00 PM"

// 32. toLocaleTimeString() - Returns the time part in local format
let date30 = new Date();
console.log(date30.toLocaleTimeString());  // Output: "12:00:00 PM" (depends on locale)

// 33. toString() - Returns a string representing the Date object
let date31 = new Date();
console.log(date31.toString());  // Output: "Sat Dec 22 2024 12:00:00 GMT+0000 (UTC)"

// 34. valueOf() - Returns the primitive value (milliseconds since 1970)
let date32 = new Date();
console.log(date32.valueOf());  // Output: 1633036800000