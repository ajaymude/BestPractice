// üîå BOM & DOM MANIPULATION
// 70 - Window Object: global scope, alert, prompt, confirm
// 71 - Document Object Model (DOM) tree, nodes vs elements
// 72 - Selecting Elements: getElementById, getElementsByTagName, querySelector, querySelectorAll
// 73 - Modifying Elements: textContent, innerHTML, innerText
// 74 - Changing Element Attributes and Styles: setAttribute, classList, style property
// 75 - Creating, Appending, Removing Nodes: createElement, appendChild, removeChild, replaceChild
// 76 - Traversing the DOM: parentNode, childNodes, nextSibling, previousSibling
// 77 - Event Handling: addEventListener, event object, event propagation (bubbling, capturing), stopPropagation, preventDefault
// 78 - Delegated Event Handling and performance
// 79 - Manipulating Forms: input elements, form elements, form submission, form validation
// 80 - Window events: load, DOMContentLoaded, resize, scroll
// 81 - Timers: setTimeout, setInterval, clearTimeout, clearInterval
// 82 - Location, History, Navigator objects


///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////


/*
70 - Window Object: global scope, alert, prompt, confirm

This note explains:
1. The window object as the global scope in browsers.
2. Using alert() to display messages.
3. Using prompt() to get input from the user.
4. Using confirm() to get boolean confirmation.
5. Best practices and considerations.
*/

// 1. The window object as global scope
// In browsers, global variables and functions are properties of window.
var globalVar = 'I am global';
function globalFunc() {
  console.log('Invoked globalFunc');
}
console.log('window.globalVar:', window.globalVar);
console.log('window.globalFunc === globalFunc:', window.globalFunc === globalFunc);

// 2. alert(): display an informational message
alert('Hello! This is an alert message.');

// 3. prompt(): ask the user for input (returns string or null)
const name = prompt('What is your name?', 'Guest');
console.log('User entered name:', name);

// 4. confirm(): ask a yes/no question (returns boolean)
const proceed = confirm('Do you want to continue?');
console.log('User chose to continue:', proceed);

// 5. Using other window properties
console.log('Window location href:', window.location.href);
console.log('Window innerWidth x innerHeight:', window.innerWidth, 'x', window.innerHeight);

/*
Best Practices:
- Avoid excessive use of alert/confirm/prompt as they block UI.
- For nicer UI, prefer custom modal dialogs in your application.
- Always handle null return from prompt (user pressed ‚ÄúCancel‚Äù).
- Use console methods for debugging rather than alert where possible.
*/

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

/*
71 - Document Object Model (DOM) Tree, Nodes vs Elements

This note explains:
1. What the DOM is and its tree structure.
2. Differences between Node, Element, Text, and other node types.
3. Traversing the DOM: parent, children, and siblings.
4. Selecting nodes vs elements: getElementById, querySelector, childNodes vs children.
5. Creating, adding, and removing elements.
6. Best-practice tips.
*/

// 1. Accessing the root of the DOM
console.log(document.documentElement); // <html> element
console.log(document.childNodes);      // NodeList: [<!DOCTYPE>, html]

// 2. Node vs Element
console.log('document.nodeType:', document.nodeType);                  // 9 (DOCUMENT_NODE)
console.log('document.documentElement.nodeType:', document.documentElement.nodeType); // 1 (ELEMENT_NODE)

const textNode = document.createTextNode('Sample');
console.log('textNode.nodeType:', textNode.nodeType); // 3 (TEXT_NODE)
console.log('textNode.nodeName:', textNode.nodeName); // "#text"

// 3. Traversing the DOM
const body = document.body;
console.log('body.childNodes:', body.childNodes);         // includes text nodes and element nodes
console.log('body.children:', body.children);             // only element nodes
console.log('firstChild of body:', body.firstChild);      // could be a text node
console.log('firstElementChild of body:', body.firstElementChild); // guaranteed element

// Sibling traversal
const firstElem = body.firstElementChild;
console.log('nextElementSibling:', firstElem.nextElementSibling);
console.log('previousElementSibling:', firstElem.previousElementSibling);

// 4. Selecting nodes and elements
const header = document.getElementById('header');         // Element or null
const specialItems = document.querySelectorAll('.item'); // NodeList of Elements
const mainSection = document.querySelector('main');       // first matching Element

// 5. Creating and adding elements
const newDiv = document.createElement('div');             
newDiv.id = 'dynamic';
newDiv.textContent = 'Hello, DOM!';
document.body.appendChild(newDiv);                        // adds to end of body

// 6. Removing elements
const toRemove = document.getElementById('old');
if (toRemove) {
  toRemove.parentNode.removeChild(toRemove);
}

// 7. Best Practices
/*
- Use element-specific properties (children, firstElementChild) to skip text nodes.
- Always null-check results of getElementById or querySelector.
- Prefer querySelector/querySelectorAll for flexible selectors.
- Minimize direct DOM manipulation: batch updates or use DocumentFragment for many nodes.
*/

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

/*
72 - Selecting Elements: getElementById, getElementsByTagName, querySelector, querySelectorAll

This note explains:
1. document.getElementById(id) ‚Äî returns a single Element or null.
2. document.getElementsByTagName(tagName) ‚Äî returns a live HTMLCollection.
3. document.querySelector(selector) ‚Äî returns the first matching Element or null.
4. document.querySelectorAll(selector) ‚Äî returns a static NodeList of matching Elements.
*/

// For demonstration, create some sample HTML in the document body:
document.body.innerHTML = `
  <div id="main">
    <h1 class="title">Welcome</h1>
    <p class="text">Hello</p>
    <p class="text">World</p>
    <span data-info="123">Info</span>
  </div>
`;

// 1. getElementById
const mainDiv = document.getElementById('main');
console.log('getElementById("main"):', mainDiv);

// 2. getElementsByTagName
const paragraphs = document.getElementsByTagName('p');
console.log('getElementsByTagName("p"):', paragraphs);           // HTMLCollection
console.log('First <p> element:', paragraphs[0].textContent);   // "Hello"

// 3. querySelector (first match)
const firstText = document.querySelector('.text');
console.log('querySelector(".text"):', firstText.textContent);   // "Hello"

// You can combine selectors:
const titleInMain = document.querySelector('#main .title');
console.log('querySelector("#main .title"):', titleInMain.textContent); // "Welcome"

// 4. querySelectorAll (all matches)
const allText = document.querySelectorAll('.text');
console.log('querySelectorAll(".text"):', allText);             // NodeList
allText.forEach((el, i) => console.log(`.text[${i}]:`, el.textContent));

// 5. Differences
// - getElementsByTagName returns a live HTMLCollection (reflects DOM changes)
// - querySelectorAll returns a static NodeList (does not update automatically)

// Example: add a new <p> and observe collections
const newP = document.createElement('p');
newP.className = 'text';
newP.textContent = 'New';
document.getElementById('main').appendChild(newP);

console.log('After append:');
console.log('HTMLCollection length:', paragraphs.length);      // now 3 (live)
console.log('NodeList length:', allText.length);              // still 2 (static)

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

/*
73 - Modifying Elements: textContent, innerHTML, innerText

This note explains:
1. textContent ‚Äì sets or returns the text content of a node and its descendants.
2. innerText ‚Äì similar to textContent but takes styles into account and triggers reflow.
3. innerHTML ‚Äì sets or returns the HTML markup within an element.
4. Differences and use-case considerations.
*/

// Create sample container
const container = document.createElement('div');
container.id = 'demo';
document.body.appendChild(container);

// 1. textContent: sets plain text (HTML tags rendered as text)
container.textContent = '<strong>Hello</strong> & welcome';
console.log('textContent:', container.textContent);
// Displays literally: <strong>Hello</strong> & welcome

// Overwrite with new content
container.textContent = 'Line1\nLine2';
console.log('textContent multi-line:', container.textContent);
// Newlines preserved in textContent

// 2. innerText: takes CSS into account, returns ‚Äúrendered‚Äù text
container.innerText = '<em>Hi</em> and <em>there</em>';
console.log('innerText:', container.innerText);
// Displays literally, but innerText normalizes whitespace and may trim

// 3. innerHTML: parses string as HTML markup
container.innerHTML = '<strong>Hello</strong> & welcome';
console.log('innerHTML:', container.innerHTML);
// Renders bold ‚ÄúHello‚Äù and text ‚Äú& welcome‚Äù

// Append nested elements via innerHTML
container.innerHTML += '<p class="note">Note: Use innerHTML with care.</p>';

// 4. Differences summary
/*
- textContent: fastest, no parsing, safe for inserting untrusted text.
- innerText: performance slower (layout-dependent), respects CSS (hidden elements skipped).
- innerHTML: parses HTML, can introduce XSS if used with untrusted content.
*/

// 5. Best Practices
/*
- Use textContent to set or get text only.
- Use innerText when you need only visible text (CSS-aware).
- Use innerHTML for inserting HTML templates, but sanitize input first.
*/


///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////