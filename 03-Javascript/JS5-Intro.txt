
// 1 - Adding js in html page

// stack memory - primitive data type 
// heap memory - non primitive dat type 


  









// 2 - comments 

// This is a single-line comment
let x = 10; // This is an inline comment

/*
  This is a multi-line comment.
  It can span multiple lines.
*/











// 3 - variable

// var example (function or global scope)

// let example (block scope)
let y = 20;

// const example (constant, block scope)
const z = 40;



// 3.1  Different data types examples:

let number = 5;          // Number
let name = "Alice";      // String
let isActive = true;     // Boolean
let user = { name: "Bob", age: 25 }; // Object
let numbers = [1, 2, 3]; // Array










// 4 - data type in js 

// Primitive Data Types

// 1. String
let name = "John Doe"; // String data type
console.log(typeof name); // Output: string

// 2. Number
let age = 30; // Number data type (integer)
console.log(typeof age); // Output: number

let price = 19.99; // Number data type (floating point)
console.log(typeof price); // Output: number

// 3. Boolean
let isAdult = true; // Boolean data type
console.log(typeof isAdult); // Output: boolean

// 4. Undefined
let address; // Variable declared but not assigned a value
console.log(typeof address); // Output: undefined

// 5. Null
let car = null; // Null data type (empty object reference)
console.log(typeof car); // Output: object (this is a known JavaScript quirk)

// 6. Symbol
let uniqueID = Symbol("id"); // Symbol data type (unique value)
console.log(typeof uniqueID); // Output: symbol

// 7. BigInt
let largeNumber = 1234567890123456789012345678901234567890n; // BigInt data type (large integer)
console.log(typeof largeNumber); // Output: bigint

// Non-primitive Data Type

// 1. Object
let person = {
  name: "Alice",
  age: 25,
  isEmployed: true
}; // Object data type
console.log(typeof person); // Output: object

// 2. Array (a type of Object)
let colors = ["red", "green", "blue"]; // Array (list) data type
console.log(typeof colors); // Output: object (Arrays are technically objects)

// 3. Function (also an object)
function greet() {
  return "Hello!";
}
console.log(typeof greet); // Output: function




// symbol const symbol1 = Symbol();
const symbol2 = Symbol('description');
const symbol3 = Symbol('description'); // Different symbol, even with the same description

console.log(symbol1 === symbol2); // false
console.log(symbol2 === symbol3); // false











// 5 - arithmatic operator 
// Declaring variables
let a = 10;
let b = 5;

// 1. Addition
let sum = a + b; // 15
console.log("Addition:", sum); // Output: 15

// 2. Subtraction
let difference = a - b; // 5
console.log("Subtraction:", difference); // Output: 5

// 3. Multiplication
let product = a * b; // 50
console.log("Multiplication:", product); // Output: 50

// 4. Division
let quotient = a / b; // 2
console.log("Division:", quotient); // Output: 2

// 5. Modulo (Remainder)
let remainder = a % b; // 0
console.log("Modulo:", remainder); // Output: 0

// 6. Exponentiation
let power = a ** b; // 100000
console.log("Exponentiation:", power); // Output: 100000

// 7. Increment
a++; // a becomes 11
console.log("Increment:", a); // Output: 11

// 8. Decrement
b--; // b becomes 4
console.log("Decrement:", b); // Output: 4


Addition: 15
Subtraction: 5
Multiplication: 50
Division: 2
Modulo: 0
Exponentiation: 100000
Increment: 11
Decrement: 4










// 6 - Assignment operator

// Initializing variables
let x = 10;
let y = 5;

// 1. Assignment (=)
x = y;  // Assigns the value of y to x
console.log("Assignment (=):", x); // Output: 5

// 2. Addition Assignment (+=)
x += y;  // Adds y to x and assigns the result to x
console.log("Addition Assignment (+=):", x); // Output: 10 (5 + 5)

// 3. Subtraction Assignment (-=)
x -= y;  // Subtracts y from x and assigns the result to x
console.log("Subtraction Assignment (-=):", x); // Output: 5 (10 - 5)

// 4. Multiplication Assignment (*=)
x *= y;  // Multiplies x by y and assigns the result to x
console.log("Multiplication Assignment (*=):", x); // Output: 25 (5 * 5)

// 5. Division Assignment (/=)
x /= y;  // Divides x by y and assigns the result to x
console.log("Division Assignment (/=):", x); // Output: 5 (25 / 5)

// 6. Modulo Assignment (%=)
x %= y;  // Assigns the remainder of x divided by y to x
console.log("Modulo Assignment (%=):", x); // Output: 0 (5 % 5)

// 7. Exponentiation Assignment (**=)
x **= y;  // Raises x to the power of y and assigns the result to x
console.log("Exponentiation Assignment (**=):", x); // Output: 0 (0^5)

// 8. Logical AND Assignment (&=)
x = 10;  // Reset x to 10 for the next example
x &= y;  // Performs a bitwise AND operation between x and y and assigns the result to x
console.log("Logical AND Assignment (&=):", x); // Output: 0 (10 & 5)

// 9. Logical OR Assignment (|=)
x = 10;  // Reset x to 10 for the next example
x |= y;  // Performs a bitwise OR operation between x and y and assigns the result to x
console.log("Logical OR Assignment (|=):", x); // Output: 15 (10 | 5)

// 10. Logical XOR Assignment (^=)
x = 10;  // Reset x to 10 for the next example
x ^= y;  // Performs a bitwise XOR operation between x and y and assigns the result to x
console.log("Logical XOR Assignment (^=):", x); // Output: 15 (10 ^ 5)


 Assignment (=): 5
Addition Assignment (+=): 10
Subtraction Assignment (-=): 5
Multiplication Assignment (*=): 25
Division Assignment (/=): 5
Modulo Assignment (%=): 0
Exponentiation Assignment (**=): 0
Logical AND Assignment (&=): 0
Logical OR Assignment (|=): 15
Logical XOR Assignment (^=): 15










// 7 - comparison operator

// Declaring variables
let a = 10;
let b = 5;
let c = "10";

// 1. Equal to (==)
let isEqual = a == b;  // Checks if a is equal to b (value comparison)
console.log("Equal to (==):", isEqual); // Output: false (10 != 5)

// 2. Strict Equal to (===)
let isStrictEqual = a === c;  // Checks if a is equal to c (value and type comparison)
console.log("Strict Equal to (===):", isStrictEqual); // Output: false (10 is number, "10" is string)

// 3. Not Equal to (!=)
let isNotEqual = a != b;  // Checks if a is not equal to b (value comparison)
console.log("Not Equal to (!=):", isNotEqual); // Output: true (10 != 5)

// 4. Strict Not Equal to (!==)
let isStrictNotEqual = a !== c;  // Checks if a is not equal to c (value and type comparison)
console.log("Strict Not Equal to (!==):", isStrictNotEqual); // Output: true (10 is number, "10" is string)

// 5. Greater than (>)
let isGreaterThan = a > b;  // Checks if a is greater than b
console.log("Greater than (>):", isGreaterThan); // Output: true (10 > 5)

// 6. Less than (<)
let isLessThan = a < b;  // Checks if a is less than b
console.log("Less than (<):", isLessThan); // Output: false (10 is not less than 5)

// 7. Greater than or Equal to (>=)
let isGreaterThanOrEqual = a >= b;  // Checks if a is greater than or equal to b
console.log("Greater than or Equal to (>=):", isGreaterThanOrEqual); // Output: true (10 >= 5)

// 8. Less than or Equal to (<=)
let isLessThanOrEqual = a <= b;  // Checks if a is less than or equal to b
console.log("Less than or Equal to (<=):", isLessThanOrEqual); // Output: false (10 is not <= 5)


Equal to (==): false
Strict Equal to (===): false
Not Equal to (!=): true
Strict Not Equal to (!==): true
Greater than (>): true
Less than (<): false
Greater than or Equal to (>=): true
Less than or Equal to (<=): false












// 8 - logical operator in JavaScript

// Logical AND (&&)
let a = true;
let b = false;
console.log(a && b); // false, both must be true for AND

// Logical OR (||)
let x = true;
let y = false;
console.log(x || y); // true, at least one must be true for OR

// Logical NOT (!)
let z = true;
console.log(!z); // false, negates the value of z

// AND with comparison
let num1 = 10;
let num2 = 20;
console.log(num1 > 5 && num2 < 30); // true, both conditions are true

// OR with comparison
console.log(num1 < 5 || num2 > 15); // true, second condition is true

// Nested logical operators
let isAdmin = true;
let isLoggedIn = false;
console.log(isAdmin && (isLoggedIn || num1 > 5)); // true, because num1 > 5

// NOT operator with OR
let isAvailable = false;
console.log(!(isAvailable || num1 < 20)); // true, because both conditions are false

// Using logical operators in conditional statements
if (a && x) {
  console.log('Both a and x are true!');
} else {
  console.log('Either a or x is false.');
}

// Combining NOT and AND
let isMember = true;
let isVIP = false;
console.log(!(isMember && isVIP)); // true, because NOT of true && false is true

In JavaScript, operator precedence refers to the order in which operators are 
evaluated in an expression. When multiple operators appear in an expression, 
the precedence determines which operator is applied first. If operators have the 
same precedence, their associativity (whether they are left-to-right or right-to-left) 
determines the order of evaluation.

Here's a summary of JavaScript operator precedence from highest to lowest:

Parentheses () - Highest precedence, ensures expressions inside are evaluated first.
Unary operators (++, --, +, -, !, etc.)
Multiplicative operators (*, /, %)
Additive operators (+, -)
Relational operators (<, <=, >, >=, instanceof, in)
Equality operators (==, !=, ===, !==)
Logical AND && and Logical OR || - Lowest precedence among logical operators.











// 9 - if else 

// Example variables
let score = 85;

// Using if, else if, and else
if (score >= 90) {
  console.log('Grade: A');  // If score is 90 or greater
} else if (score >= 80) {
  console.log('Grade: B');  // If score is between 80 and 89
} else if (score >= 70) {
  console.log('Grade: C');  // If score is between 70 and 79
} else if (score >= 60) {
  console.log('Grade: D');  // If score is between 60 and 69
} else {
  console.log('Grade: F');  // If score is less than 60
}












// 10 -ternary operator 

// Example variable
let age = 20;

// Using the ternary operator
let result = age >= 18 ? 'Adult' : 'Minor';

console.log(result);  // Output: 'Adult'










// 11 -  switch statements
let day = 3;
let dayName;

switch (day) {
  case 1:
    dayName = 'Monday';
    break;
  case 2:
    dayName = 'Tuesday';
    break;
  case 3:
    dayName = 'Wednesday';
    break;
  case 4:
    dayName = 'Thursday';
    break;
  case 5:
    dayName = 'Friday';
    break;
  case 6:
    dayName = 'Saturday';
    break;
  case 7:
    dayName = 'Sunday';
    break;
  default:
    dayName = 'Invalid day';
}

console.log(dayName);  // Output: 'Wednesday'









// 12 -  alert , prompt , confirm

let age = 16;

if (age < 18) {
  alert("You are a minor.");
} else {
  alert("You are an adult.");
}



let userChoice = confirm("Do you want to proceed?");
if (userChoice) {
  alert("You clicked OK!");
} else {
  alert("You clicked Cancel!");
}



let age = prompt("How old are you?", "25");
alert("You are " + age + " years old.");










// 13 - function 


function greet() {
  console.log("Hello, world!");
}

greet();  // Output: Hello, world!




function add(a, b) {   // parameters
  return a + b;
}

let result = add(5, 3); // arguments
console.log(result);  // Output: 8





function greet(name = "Guest") {
  console.log("Hello, " + name + "!");
}

greet();           // Output: Hello, Guest!
greet("Alice");    // Output: Hello, Alice!



// a arrow function 
const add = (a, b) => a + b;

let result = add(2, 3);
console.log(result);  // Output: 5



// b iffe function
(function() {
  console.log("This is an IIFE!");
})();




function sum(...numbers) {
  return numbers.reduce((total, num) => total + num, 0);
}

let result = sum(1, 2, 3, 4, 5);
console.log(result);  // Output: 15










// 14 - setInterval  clearInterval

// 1. setInterval() example
let counter = 0;

// Using setInterval to execute a function every 1 second (1000 milliseconds)
let intervalId = setInterval(function() {
    counter++;
    console.log('Counter:', counter);

    // After 5 seconds, clear the interval
    if (counter === 5) {
        clearInterval(intervalId); // This stops the interval
        console.log('Interval cleared after 5 counts');
    }
}, 1000);  // The function is called every 1000 milliseconds (1 second)

// Output:
// Counter: 1
// Counter: 2
// Counter: 3
// Counter: 4
// Counter: 5
// Interval cleared after 5 counts











// 15 setTimeout clearTimeout


// 1. Using setTimeout() to execute a function after a delay

let timeoutId = setTimeout(function() {
    console.log("This message will appear after 3 seconds.");
}, 3000); // 3000 milliseconds (3 seconds)

// 2. Using clearTimeout() to cancel the timeout before it executes

// Let's cancel the timeout after 1 second
setTimeout(function() {
    clearTimeout(timeoutId);  // Clears the first setTimeout
    console.log("Timeout has been cleared before it ran.");
}, 1000); // 1000 milliseconds (1 second)

// Output:
// "Timeout has been cleared before it ran."
// (The first message won't appear because it was cleared before running)












// 16 -  Template String

const x = 5;
const y = 10;
const sum = `The sum of ${x} and ${y} is ${x + y}.`;
console.log(sum); // Output: The sum of 5 and 10 is 15.


function getYear() {
  return new Date().getFullYear();
}

const message = `The current year is ${getYear()}.`;
console.log(message); // Output: The current year is 2024 (or the current year).











// 17 rest operator 



function sum(...numbers) {
  return numbers.reduce((acc, num) => acc + num, 0);
}

console.log(sum(1, 2, 3)); // Output: 6
console.log(sum(10, 20, 30, 40)); // Output: 100





const arr = [1, 2, 3, 4, 5];
const [first, second, ...rest] = arr;

console.log(first);  // Output: 1
console.log(second); // Output: 2
console.log(rest);   // Output: [3, 4, 5]





const person = {
  name: "Alice",
  age: 25,
  country: "USA",
  city: "New York"
};

const { name, age, ...address } = person;

console.log(name);   // Output: Alice
console.log(age);    // Output: 25
console.log(address); // Output: { country: 'USA', city: 'New York' }















// 18 -  Spread Operator (...) 

const arr1 = [1, 2, 3];
const arr2 = [...arr1, 4, 5];
console.log(arr2); // Output: [1, 2, 3, 4, 5]


const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const mergedArray = [...arr1, ...arr2];
console.log(mergedArray); // Output: [1, 2, 3, 4, 5, 6]


const person = { name: "Jane", age: 25 };
const clonedPerson = { ...person };
clonedPerson.age = 26;

console.log(person); // Output: { name: "Jane", age: 25 }
console.log(clonedPerson); // Output: { name: "Jane", age: 26 }
















// 20 - object literals 

1. Basic Object Literal
const person = {
  name: "Alice",
  age: 25,
  country: "USA"
};

console.log(person.name);   // Output: Alice
console.log(person.age);    // Output: 25
console.log(person.country); // Output: USA


// short hand 
const name = "Alice";
const age = 25;
const person = {
  name,
  age
};

console.log(person);  // Output: { name: 'Alice', age: 25 }
















// 21 - Destrucuring 

const arr = [1, 2, 3];
const [a, b, c] = arr;
console.log(a); // Output: 1
console.log(b); // Output: 2
console.log(c); // Output: 3


const arr = [1];
const [a, b = 2] = arr;
console.log(a); // Output: 1
console.log(b); // Output: 2


const person = { name: "Alice", age: 25 };
const { name, age } = person;
console.log(name); // Output: Alice
console.log(age);  // Output: 25







// JavaScript executed Context

Global execution Context






















































































































































































































































































































































































































































































































































































































// syllabus 

1. Introduction to JavaScript
What is JavaScript?
History of JavaScript
Importance of JavaScript in web development
JavaScript environments (Browser vs. Node.js)
Embedding JavaScript in HTML (inline, internal, and external scripts)

2. Basic JavaScript Syntax
Comments in JavaScript
Variables and Constants (var, let, const)
Data Types (Primitive types: string, number, boolean, null, undefined, symbol, bigint)
Type Conversion (implicit and explicit casting)
Operators: Arithmetic, Assignment, Comparison, Logical, Ternary, Bitwise, etc.
Expressions and Statements

3. Control Structures
Conditional Statements (if, if-else, switch-case)
Loops (for, while, do-while, forEach)
Break and Continue

4. Functions
Defining Functions (function declarations, function expressions)
Arrow Functions
Function Parameters (default parameters, rest parameters)
Return Values
Function Scope and Closures
Higher-order Functions
Immediately Invoked Function Expressions (IIFE)
Recursion in JavaScript

5. Objects and Arrays
Arrays (Creating arrays, accessing elements, array methods)
Multidimensional Arrays
Objects (Object literal, creating objects, accessing properties)
Object Methods and this keyword
JSON (JavaScript Object Notation): parsing and stringifying
Array Methods (map, filter, reduce, forEach, etc.)
Destructuring (arrays and objects)
Spread and Rest Operators

6. Error Handling
try-catch Block
Custom Errors
Throwing Errors
Handling Asynchronous Errors

7. Asynchronous JavaScript
Callbacks
Promises (Creation, .then(), .catch(), chaining)
Async/Await
Event Loop and the Call Stack
JavaScript Timers (setTimeout, setInterval)
Debouncing and Throttling
Working with External APIs (fetch API, AJAX)

8. DOM Manipulation
Introduction to DOM (Document Object Model)
Accessing DOM Elements (getElementById, querySelector, etc.)
Manipulating DOM Elements (changing text, HTML, attributes, styles)
Event Handling (click, submit, input, etc.)
Event Delegation
DOM Traversal (parent, children, siblings)
Creating Elements Dynamically

9. ES6 and Beyond (Modern JavaScript)
Template Literals
Arrow Functions
Enhanced Object Literals
Destructuring Assignment
Default Parameters
Rest and Spread Operators
Classes (class syntax, constructors, inheritance)
Modules (import/export)
Iterators and Generators
Maps and Sets

Promises and async/await
10. JavaScript in the Browser
Browser Object Model (BOM)
Window, Navigator, Screen, History, Location
Local Storage and Session Storage
Cookies
Handling Forms (validations, inputs, events)
Geolocation API
Web Workers
WebSockets
Service Workers
Fetch API vs XMLHttpRequest

11. JavaScript in Node.js
Introduction to Node.js
Installing and Setting Up Node.js
Node.js Modules (fs, http, path, util, etc.)
NPM (Node Package Manager)
Package.json File (dependencies, scripts)
Using third-party Libraries (express, lodash, etc.)
Event-driven Programming in Node.js
File System (reading and writing files)
Creating a Basic Web Server
Handling HTTP Requests
Introduction to REST APIs

12. JavaScript Frameworks and Libraries
Introduction to Front-end Frameworks (React, Angular, Vue.js)
Introduction to Node.js Frameworks (Express.js)
Working with React (components, JSX, state, hooks)
Vue.js Basics (reactivity, components, directives)
Angular Basics (Modules, components, services)
Using jQuery
Testing in JavaScript (Jest, Mocha, Chai)

13. Advanced Topics
Design Patterns (Module, Singleton, Observer, Factory, etc.)
Webpack and Module Bundlers
Babel (Transpiling ES6+ to ES5)
Server-side Rendering (SSR) in frameworks
Webpack, Babel, and NPM Scripts (for frontend bundling)
Reactive Programming (RxJS)
Progressive Web Apps (PWAs)
JavaScript and Web Assembly (WASM)
GraphQL with JavaScript
Security Best Practices (XSS, CSRF, HTTPS, Content Security Policy)
Code Optimization and Performance
Memory Management in JavaScript

14. Testing and Debugging
Using Browser Developer Tools
Debugging JavaScript Code (breakpoints, stack traces)
Unit Testing Frameworks (Jest, Mocha, Jasmine)
Writing Unit Tests for JavaScript
Test-Driven Development (TDD) and Behavior-Driven Development (BDD)
End-to-End Testing (Cypress, Selenium)

15. Version Control and Deployment
Git Basics (Commit, Push, Pull, Merge, Branch)
GitHub or GitLab (Repositories, Collaboration)
Continuous Integration (CI/CD)
Deploying JavaScript applications (Netlify, Heroku, AWS, DigitalOcean)
Deployment Strategies (Docker, Kubernetes)

16. Best Practices
Writing Clean and Maintainable Code
Code Reviews
Refactoring
Using Linting Tools (ESLint)
Formatting with Prettier
Version Control Practices
Writing Documentation
Performance Optimization

17. Other Topics
Mobile Development with JavaScript (React Native, Ionic)
Electron for Desktop Apps
Using TypeScript with JavaScript
JavaScript and Machine Learning (TensorFlow.js)



// scope 

1. Global Scope
A variable that is declared outside of any function
or block is said to have global scope.
It can be accessed from anywhere in the code.


2. Function Scope
In JavaScript, variables declared inside a function 
are confined to that function's scope and are not accessible outside.


3. Block Scope (let and const)
Variables declared with let or const inside a block 
(such as inside a for loop or an if statement) are limited to 
that block scope. They cannot be accessed outside of the block.


What is a Closure in JavaScript?
In JavaScript, a closure is a function that "remembers" and can access 
variables from the outer function's scope, even after the outer function has 
finished execution. This means that a function can have access to variables from 
its lexical scope (the scope in which it was created), even if the function 
is executed outside of that scope.


What is Hoisting in JavaScript?
Hoisting is a JavaScript mechanism where variables and 
function declarations are moved ("hoisted") to the top of their containing 
scope during the compilation phase, before the code execution begins. However, 
only the declarations are hoisted, not the initializations.


Implicit Type Coercion
This is when JavaScript automatically converts values to a different type during operations.

const result = '5' + 3;
console.log(result);  // Output: '53' (string)


const isActive = 'false';  // Non-empty string, treated as truthy
if (isActive) {
    console.log('The value is truthy!');
} else {
    console.log('The value is falsy!');
}
// Output: The value is truthy!


console.log(1 + '1');   // Output: '11' (string)
console.log(true + '1'); // Output: 'true1' (string)





