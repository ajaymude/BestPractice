


1. Checking File/Directory Existence

fs.existsSync(path): Checks if a file or directory exists (deprecated, but still works).
fs.access(path, fs.constants.F_OK, callback): Modern way to check if a file exists.




2. Watching File Changes

fs.watch(filename, (eventType, filename) => { }): Watches for changes in a file.
fs.watchFile(filename, callback): Similar, but more stable for large files.




3. Reading and Writing Directories

fs.readdir(path, callback): Reads contents of a directory.
fs.opendir(path): Asynchronously opens a directory for iteration.




4. File Permissions and Ownership

fs.chmod(path, mode, callback): Changes file permissions.
fs.chown(path, uid, gid, callback): Changes file owner.





5. File Copying and Moving

fs.copyFile(src, dest, callback): Copies a file.
fs.rename(oldPath, newPath, callback): Moves a file or renames it.




6. File System Promises API (fs.promises)

Modern async alternatives for most operations:

fs.promises.readFile()
fs.promises.writeFile()
fs.promises.unlink()
fs.promises.mkdir()
These return Promises instead of using callbacks.




7. Working with File Descriptors

fs.open(path, flags, callback): Opens a file and returns a file descriptor.
fs.close(fd, callback): Closes an open file descriptor.




8. File System Streams

For handling large files efficiently:

fs.createReadStream(path): Reads a file in chunks.
fs.createWriteStream(path): Writes data in chunks.











const fs = require('fs');
const path = 'example.txt';
const dir = 'exampleDir';

// 1. Writing Files
fs.writeFileSync(path, 'Hello, world!');
fs.writeFileSync('example2.txt', 'Another file');
// Output: Writes "Hello, world!" to example.txt and "Another file" to example2.txt

// 2. Reading Files
console.log(fs.readFileSync(path, 'utf8'));
console.log(fs.readFileSync('example2.txt', 'utf8'));
// Output: "Hello, world!" and "Another file"

// 3. Appending Files
fs.appendFileSync(path, '\nAppended text.');
fs.appendFileSync('example2.txt', '\nMore text.');
// Output: Adds new lines to both files

// 4. Deleting Files
fs.unlinkSync('example2.txt');
fs.unlinkSync(path);
// Output: Deletes example.txt and example2.txt

// 5. Creating Directories
fs.mkdirSync(dir);
fs.mkdirSync('anotherDir');
// Output: Creates exampleDir and anotherDir

// 6. Removing Directories
fs.rmdirSync('anotherDir');
fs.rmdirSync(dir);
// Output: Deletes exampleDir and anotherDir

// 7. Renaming Files
fs.writeFileSync('oldName.txt', 'File to be renamed');
fs.renameSync('oldName.txt', 'newName.txt');
// Output: Renames oldName.txt to newName.txt

// 8. Checking File Stats
fs.writeFileSync('check.txt', 'File for stats');
console.log(fs.statSync('check.txt').size);
console.log(fs.statSync('check.txt').isFile());
// Output: Prints file size and confirms it's a file (true)

// 9. Watching File Changes
fs.watch(path, (eventType, filename) => {
  console.log(`File ${filename} changed: ${eventType}`);
});
fs.writeFileSync(path, 'Modified content.');
// Output: "File example.txt changed: change"

// 10. Copying Files
fs.copyFileSync('check.txt', 'copy.txt');
fs.copyFileSync('check.txt', 'copy2.txt');
// Output: Copies check.txt to copy.txt and copy2.txt

// 11. File Permissions
fs.chmodSync('check.txt', 0o400);
fs.chmodSync('copy.txt', 0o600);
// Output: Sets different permissions on check.txt and copy.txt

// 12. Checking File/Directory Existence
console.log(fs.existsSync('check.txt'));
console.log(fs.existsSync('nonexistent.txt'));
// Output: true, false

// 13. File Descriptors
const fd = fs.openSync('check.txt', 'r');
fs.closeSync(fd);
const fd2 = fs.openSync('copy.txt', 'r');
fs.closeSync(fd2);
// Output: Opens and closes file descriptors

// 14. Reading Directories
fs.mkdirSync('testDir');
fs.writeFileSync('testDir/file1.txt', 'File 1');
fs.writeFileSync('testDir/file2.txt', 'File 2');
console.log(fs.readdirSync('testDir'));
// Output: [ 'file1.txt', 'file2.txt' ]

// 15. Streams
const readStream = fs.createReadStream('check.txt', 'utf8');
readStream.on('data', chunk => console.log(`Read chunk: ${chunk}`));

const writeStream = fs.createWriteStream('streamWrite.txt');
writeStream.write('Streaming data 1\n');
writeStream.write('Streaming data 2\n');
writeStream.end();
// Output: Reads file in chunks and writes streamed data to streamWrite.txt
