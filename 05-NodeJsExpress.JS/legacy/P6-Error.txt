



export const errorHandler = (statusCode, message) => {
  const error = new Error();
  error.statusCode = statusCode;
  error.message = message;
  return error;
};



app.use((err, req, res, next) => {
  const statusCode = err.statusCode || 500;
  const message = err.message || 'Internal Server Error';
  return res.status(statusCode).json({
    success: false,
    statusCode,
    message,
  });
});




export const signin = async (req, res, next) => {
  const { email, password } = req.body;
  try {
    const validUser = await User.findOne({ email });
    if (!validUser) return next(errorHandler(404, 'User not found!'));
    const validPassword = bcryptjs.compareSync(password, validUser.password);
    if (!validPassword) return next(errorHandler(401, 'Wrong credentials!'));
    const token = jwt.sign({ id: validUser._id }, process.env.JWT_SECRET);
    const { password: pass, ...rest } = validUser._doc;
    res
      .cookie('access_token', token, { httpOnly: true })
      .status(200)
      .json(rest);
  } catch (error) {
    next(error);
  }
};








// custom error handler 

class CustomAPIError extends Error {
  constructor(message, statusCode) {
    super(message)
    this.statusCode = statusCode
  }
}

const createCustomError = (msg, statusCode) => {
  return new CustomAPIError(msg, statusCode)
}

module.exports = { createCustomError, CustomAPIError }



const { CustomAPIError } = require('../errors/custom-error')
const errorHandlerMiddleware = (err, req, res, next) => {
  if (err instanceof CustomAPIError) {
    return res.status(err.statusCode).json({ msg: err.message })
  }
  return res.status(500).json({ msg: 'Something went wrong, please try again' })
}

module.exports = errorHandlerMiddleware





const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params
  const task = await Task.findOne({ _id: taskID })
  if (!task) {
    return next(createCustomError(`No task with id : ${taskID}`, 404))
  }

  res.status(200).json({ task })
})









































// async wrapper 


// asyncWrapper.js
const asyncWrapper = (fn) => {
    return async (req, res, next) => {
        try {
            await fn(req, res, next);
        } catch (error) {
            next(error); // Pass the error to the Express error handler
        }
    };
};

module.exports = asyncWrapper;





const express = require('express');
const asyncWrapper = require('./asyncWrapper');
const app = express();

// Simulated async function (e.g., database operation)
const getUser = async (req, res, next) => {
    const users = [{ id: 1, name: "Alice" }, { id: 2, name: "Bob" }];
    if (!users) throw new Error("Users not found");  // Simulated error
    res.json(users);
};

// Without asyncWrapper (Using try-catch directly in route)
app.get('/users-old', async (req, res, next) => {
    try {
        const users = await getUser(req, res, next);
    } catch (error) {
        next(error);
    }
});

// With asyncWrapper (Cleaner Code âœ…)
app.get('/users', asyncWrapper(getUser));

// Global Error Handler Middleware
app.use((err, req, res, next) => {
    console.error(err.message);
    res.status(500).json({ error: err.message });
});

// Start Server
app.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
});
