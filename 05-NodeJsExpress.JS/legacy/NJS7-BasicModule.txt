// 1 - os module 
// 2 - path module 
// 3 - fs module 
// 4 - http module 
// 5 - event loop
// 6 - event emitter
// 7 - streams 


// 1 - os module 

const os = require("os");

console.log("================ System Information ================");
console.log("System Architecture:", os.arch());
console.log("CPU Info:", os.cpus());
console.log("Free Memory:", (os.freemem() / (1024 ** 3)).toFixed(2), "GB");
console.log("Total Memory:", (os.totalmem() / (1024 ** 3)).toFixed(2), "GB");
console.log("System Uptime:", os.uptime(), "seconds");
console.log("User Info:", os.userInfo());
console.log("Hostname:", os.hostname());
console.log("Platform:", os.platform());
console.log("OS Version:", os.version());
console.log("Home Directory:", os.homedir());
console.log("Network Interfaces:", os.networkInterfaces());
console.log("===================================================");




// 2 - path module 

console.log("================ Path Module Examples ================");
const filePath = __filename;
console.log("File Path:", filePath);
console.log("Directory Name:", path.dirname(filePath));
console.log("Base Name:", path.basename(filePath));
console.log("File Extension:", path.extname(filePath));
console.log("Parsed Path:", path.parse(filePath));
console.log("Joined Path:", path.join(__dirname, "test", "index.html"));
console.log("Resolved Path:", path.resolve("test", "index.html"));
console.log("===================================================");




// 3 - fs module 

const fs = require("fs");
const path = require("path");

const filePath = path.join(__dirname, "test.txt");

// Write to a file
fs.writeFileSync(filePath, "Hello, this is a test file.");
console.log("File written successfully.");

// Read from a file
const fileContent = fs.readFileSync(filePath, "utf8");
console.log("File Content:", fileContent);

// Append to a file
fs.appendFileSync(filePath, "\nAppended content.");
console.log("Content appended successfully.");

// Check if a file exists
console.log("File exists:", fs.existsSync(filePath));

// Rename a file
const newFilePath = path.join(__dirname, "renamed.txt");
fs.renameSync(filePath, newFilePath);
console.log("File renamed successfully.");

// Delete a file
fs.unlinkSync(newFilePath);
console.log("File deleted successfully.");

// Create a directory
const dirPath = path.join(__dirname, "testDir");
fs.mkdirSync(dirPath);
console.log("Directory created successfully.");

// Read directory contents
console.log("Files in directory:", fs.readdirSync(__dirname));

// Delete a directory
fs.rmdirSync(dirPath);
console.log("Directory deleted successfully.");





// 4 - http module 


console.log("================ HTTP Module Example ================");
const server = http.createServer((req, res) => {
    res.writeHead(200, { "Content-Type": "text/plain" });
    res.end("Hello, World! This is a simple HTTP server.");
});

const PORT = 3000;
server.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}/`);
});
console.log("===================================================");






console.log("================ HTTP Module Example ================");
const server = http.createServer((req, res) => {
    res.writeHead(200, { "Content-Type": "text/html" });
    res.end(`
        <html>
        <head><title>Node.js Server</title></head>
        <body>
            <h1>Hello, World!</h1>
            <p>This is a simple HTTP server using Node.js.</p>
        </body>
        </html>
    `);
});

const PORT = 3000;
server.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}/`);
});
console.log("===================================================");




// 5 - event loop


Phases of the Event Loop
The Node.js event loop has six phases that run in a specific order:

Timers → Executes setTimeout() and setInterval() callbacks.
Pending Callbacks → Executes I/O callbacks deferred from the previous loop iteration.
Idle, Prepare (internal use)
Poll → Retrieves new I/O events, executing I/O-related callbacks.
Check → Executes setImmediate() callbacks.
Close Callbacks → Executes close event callbacks like socket.on('close', ...).


const fs = require("fs");

// Example 1: setTimeout vs setImmediate
setTimeout(() => console.log("1️⃣ setTimeout"), 0);
setImmediate(() => console.log("2️⃣ setImmediate"));
console.log("3️⃣ Start");

// Example 2: process.nextTick vs Promise vs setTimeout
process.nextTick(() => console.log("4️⃣ process.nextTick"));
Promise.resolve().then(() => console.log("5️⃣ Promise resolved"));
setTimeout(() => console.log("6️⃣ setTimeout"), 0);

// Example 3: setImmediate vs I/O Callback
fs.readFile(__filename, () => {
  console.log("7️⃣ File read completed");
  setTimeout(() => console.log("8️⃣ setTimeout (after I/O)"), 0);
  setImmediate(() => console.log("9️⃣ setImmediate (after I/O)"));
});

// Example 4: Blocking the Event Loop
setTimeout(() => console.log("🔟 setTimeout (blocked example)"), 0);
for (let i = 0; i < 1e8; i++) {} // Simulating a blocking task
console.log("1️⃣1️⃣ Loop finished");

// Example 5: Using setImmediate to avoid blocking
function asyncTask(counter) {
  if (counter < 3) {
    console.log(`1️⃣2️⃣ Async Task ${counter}`);
    setImmediate(() => asyncTask(counter + 1)); // Avoid blocking
  }
}
asyncTask(1);





// 6 - event emitter

const EventEmitter = require("events");
const fs = require("fs");

// Create an EventEmitter instance
const myEmitter = new EventEmitter();

// 1️⃣ Basic EventEmitter Example
myEmitter.on("greet", (name) => {
  console.log(`Hello, ${name}!`);
});
myEmitter.emit("greet", "Alice");

// 2️⃣ Using once() for One-Time Events
myEmitter.once("greetOnce", (name) => {
  console.log(`Hello, ${name}, this is a one-time greeting!`);
});
myEmitter.emit("greetOnce", "Bob");
myEmitter.emit("greetOnce", "Charlie"); // Won't fire again

// 3️⃣ Removing Event Listeners
const sayHello = (name) => console.log(`Hello, ${name}!`);
myEmitter.on("greet", sayHello);
myEmitter.emit("greet", "David");
myEmitter.off("greet", sayHello);
myEmitter.emit("greet", "Emma"); // Won't fire

// 4️⃣ Multiple Listeners
myEmitter.on("greet", (name) => console.log(`Hi, ${name}!`));
myEmitter.on("greet", (name) => console.log(`How are you, ${name}?`));
myEmitter.emit("greet", "Frank");

// 5️⃣ Emitting an Event with Arguments
myEmitter.on("order", (item, quantity) => {
  console.log(`Ordered ${quantity} ${item}(s).`);
});
myEmitter.emit("order", "Pizza", 2);

// 6️⃣ Handling Errors with "error" Event
myEmitter.on("error", (err) => {
  console.error(`Error occurred: ${err.message}`);
});
myEmitter.emit("error", new Error("Something went wrong!"));

// 7️⃣ Checking the Number of Listeners
const listener1 = () => console.log("Listener 1");
const listener2 = () => console.log("Listener 2");
myEmitter.on("event", listener1);
myEmitter.on("event", listener2);
console.log(`Number of listeners: ${myEmitter.listenerCount("event")}`);
myEmitter.emit("event");

// 8️⃣ Extending EventEmitter in a Class
class MyEmitter extends EventEmitter {
  notify(msg) {
    this.emit("message", msg);
  }
}
const notifier = new MyEmitter();
notifier.on("message", (msg) => {
  console.log(`Received message: ${msg}`);
});
notifier.notify("Hello, world!");

// 9️⃣ Real-World Scenario: User Login Event
myEmitter.on("userLogin", (username) => {
  console.log(`📢 ${username} logged in.`);
});
myEmitter.emit("userLogin", "Alice");
myEmitter.emit("userLogin", "Bob");

// 🔟 File Read Event Example (I/O Operations with EventEmitter)
fs.readFile(__filename, () => {
  console.log("📂 File read completed");
  myEmitter.emit("fileRead");
});
myEmitter.on("fileRead", () => {
  console.log("✅ File read event handled");
});





// 7 - streams 

const fs = require("fs");
const { Duplex, Transform } = require("stream");
const http = require("http");

// 1️⃣ Readable Stream - Reading a file in chunks
const readableStream = fs.createReadStream("example.txt", "utf8");
readableStream.on("data", (chunk) => console.log("📖 Read chunk:", chunk));
readableStream.on("end", () => console.log("✅ Finished reading."));
readableStream.on("error", (err) => console.error("❌ Read Error:", err.message));

// 2️⃣ Writable Stream - Writing to a file
const writableStream = fs.createWriteStream("output.txt");
writableStream.write("Hello, World!\n");
writableStream.write("This is a writable stream example.\n");
writableStream.end(() => console.log("✅ Finished writing."));
writableStream.on("error", (err) => console.error("❌ Write Error:", err.message));

// 3️⃣ Piping a Readable Stream to a Writable Stream
const copyStream = fs.createReadStream("example.txt");
const writeCopyStream = fs.createWriteStream("copy.txt");
copyStream.pipe(writeCopyStream);
writeCopyStream.on("finish", () => console.log("✅ File copied successfully."));

// 4️⃣ Duplex Stream - Custom Read/Write
const duplexStream = new Duplex({
  write(chunk, encoding, callback) {
    console.log("✍ Writing:", chunk.toString());
    callback();
  },
  read(size) {
    this.push("🔄 New Data Chunk");
    this.push(null); // End stream
  }
});
duplexStream.write("Hello, Duplex!");
duplexStream.on("data", (chunk) => console.log("📖 Read:", chunk.toString()));

// 5️⃣ Transform Stream - Convert Text to Uppercase
const uppercaseTransform = new Transform({
  transform(chunk, encoding, callback) {
    this.push(chunk.toString().toUpperCase());
    callback();
  }
});
process.stdin.pipe(uppercaseTransform).pipe(process.stdout);

// 6️⃣ HTTP Server Streaming - Serve Large File
const server = http.createServer((req, res) => {
  const fileStream = fs.createReadStream("largeFile.txt");
  res.writeHead(200, { "Content-Type": "text/plain" });
  fileStream.pipe(res);
});
server.listen(3000, () => console.log("🚀 Server running at http://localhost:3000"));

// 7️⃣ Handling Stream Events
const stream = fs.createReadStream("example.txt", "utf8");
stream.on("data", (chunk) => console.log("📖 Data:", chunk));
stream.on("end", () => console.log("✅ Read complete."));
stream.on("error", (err) => console.error("❌ Error:", err.message));
