

// SOLID 

The SOLID principles are five design principles that help developers create maintainable, 
scalable, and robust software. They are especially useful in object-oriented programming but can be 
applied to JavaScript and TypeScript as well. Here’s a breakdown:




S - Single Responsibility Principle (SRP)

A class or module should have only one reason to change.
Example: A function that handles both database queries and UI updates should be split into separate functions.



O - Open/Closed Principle (OCP)

Software entities (classes, functions, modules) should be open for extension but closed for modification.
Example: Instead of modifying a function, use inheritance or composition to extend its behavior.



L - Liskov Substitution Principle (LSP)

Subtypes should be substitutable for their base types without altering program correctness.
Example: If a subclass overrides a method, it should not break the parent class’s behavior.



I - Interface Segregation Principle (ISP)

Clients should not be forced to depend on interfaces they do not use.
Example: Instead of one large interface, create multiple smaller, specific interfaces.



D - Dependency Inversion Principle (DIP)

High-level modules should not depend on low-level modules. Both should depend on abstractions.
Example: Use dependency injection instead of creating new instances inside a module.