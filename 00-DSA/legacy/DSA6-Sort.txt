List of All Sorting Algorithms in DSA
Sorting algorithms are classified based on their efficiency, stability, and whether they are comparison-based or non-comparison-based.

1. Simple Sorting Algorithms (O(n²) - Slow but Easy)
🔹 Bubble Sort – Repeatedly swaps adjacent elements if they are in the wrong order.
🔹 Selection Sort – Finds the smallest element and places it in the correct position.
🔹 Insertion Sort – Inserts each element into its correct position in a sorted part of the array.

✅ Best for small datasets
❌ Not efficient for large datasets

2. Efficient Sorting Algorithms (O(n log n) - Fast for Large Data)
🔹 Merge Sort – Uses the "divide and conquer" approach to split, sort, and merge arrays.
🔹 Quick Sort – Picks a pivot, partitions the array, and sorts recursively.
🔹 Heap Sort – Uses a heap data structure to sort elements efficiently.
🔹 Shell Sort – An improved version of insertion sort with gaps.

✅ Best for large datasets
✅ Used in real-world applications

3. Linear Time Sorting Algorithms (O(n) - Super Fast for Special Cases)
🔹 Counting Sort – Counts occurrences of elements and sorts based on frequency (only for integers).
🔹 Radix Sort – Sorts numbers digit by digit (good for large numbers).
🔹 Bucket Sort – Divides elements into buckets and sorts each bucket individually.

✅ Works in O(n) time
❌ Only works for limited data types (integers, floats, etc.)

4. Hybrid Sorting Algorithms (Used in Real-World Systems)
🔹 Timsort – A mix of Merge Sort and Insertion Sort (used in Python and JavaScript).
🔹 IntroSort – A mix of Quick Sort, Heap Sort, and Insertion Sort (used in C++ STL sort()).
🔹 Block Sort – Used for better memory efficiency.

✅ Very fast and optimized for real-world applications

Comparison of Sorting Algorithms
Algorithm	Best Case	Worst Case	Average Case	Space Complexity	Stable?	In-Place?
Bubble Sort	O(n)	O(n²)	O(n²)	O(1)	✅ Yes	✅ Yes
Selection Sort	O(n²)	O(n²)	O(n²)	O(1)	❌ No	✅ Yes
Insertion Sort	O(n)	O(n²)	O(n²)	O(1)	✅ Yes	✅ Yes
Merge Sort	O(n log n)	O(n log n)	O(n log n)	O(n)	✅ Yes	❌ No
Quick Sort	O(n log n)	O(n²)	O(n log n)	O(log n)	❌ No	✅ Yes
Heap Sort	O(n log n)	O(n log n)	O(n log n)	O(1)	❌ No	✅ Yes
Counting Sort	O(n)	O(n)	O(n)	O(k) (depends on range)	✅ Yes	❌ No
Radix Sort	O(nk)	O(nk)	O(nk)	O(n + k)	✅ Yes	❌ No
Bucket Sort	O(n)	O(n²)	O(n + k)	O(n)	✅ Yes	❌ No
Timsort	O(n)	O(n log n)	O(n log n)	O(n)	✅ Yes	❌ No



Which Sorting Algorithm Should You Use?
Small dataset? → Use Insertion Sort or Selection Sort.
Large dataset? → Use Merge Sort or Quick Sort.
Need an in-place sort? → Use Quick Sort, Heap Sort, or Bubble Sort.
Sorting integers with a small range? → Use Counting Sort or Radix Sort.
Want real-world efficiency? → Use Timsort (Python, JavaScript) or IntroSort (C++).








Sorting in DSA
Sorting is the process of arranging elements in a specific order (ascending or descending). It is crucial for efficient searching and data processing.

Types of Sorting Algorithms
1. Simple Sorting Algorithms (O(n²))
🔹 Bubble Sort – Repeatedly swaps adjacent elements if they are in the wrong order.
🔹 Selection Sort – Finds the smallest element and places it in the correct position.
🔹 Insertion Sort – Inserts each element into its correct position in a sorted part of the array.

2. Efficient Sorting Algorithms (O(n log n))
🔹 Merge Sort – Divides the array into halves, sorts them, and merges them back.
🔹 Quick Sort – Picks a pivot, partitions the array, and recursively sorts the partitions.
🔹 Heap Sort – Uses a heap data structure to extract the smallest/largest element repeatedly.

3. Linear Time Sorting (O(n)) – Works on specific cases
🔹 Counting Sort – Counts occurrences of elements and sorts them (only for small range numbers).
🔹 Radix Sort – Sorts numbers digit by digit (used for large numbers).
🔹 Bucket Sort – Divides elements into buckets and sorts them individually.








Bubble Sort - Step-by-Step Guide
What is Bubble Sort?
Bubble Sort is a simple sorting algorithm that works by repeatedly swapping adjacent 
elements if they are in the wrong order. The largest elements "bubble up" to the end in each pass.






Bubble Sort - Step-by-Step Guide
What is Bubble Sort?
Bubble Sort is a simple sorting algorithm that works by repeatedly swapping adjacent elements if they are in the wrong order. The largest elements "bubble up" to the end in each pass.

How Bubble Sort Works
Compare two adjacent elements.
Swap them if they are in the wrong order.
Repeat this process for the entire array.
Continue this process for n-1 passes until the array is sorted.


function bubbleSort(arr) {
  let n = arr.length;
  for (let i = 0; i < n - 1; i++) {
    for (let j = 0; j < n - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        // Swap elements
        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
      }
    }
  }
  return arr;
}

console.log(bubbleSort([64, 34, 25, 12, 22, 11, 90]));
// Output: [11, 12, 22, 25, 34, 64, 90]
  



function bubbleSort(arr) {
    let n = arr.length;
    for (let i = 0; i < n-1; i++) {
        for (let j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                let temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
    return arr;
}

console.log(bubbleSort([64, 34, 25, 12, 22, 11, 90]));  // [11, 12, 22, 25, 34, 64, 90]
console.log(bubbleSort([5, 2, 9, 1, 5, 6]));            // [1, 2, 5, 5, 6, 9]
console.log(bubbleSort([3, 0, 2, 5, -1, 4, 1]));        // [-1, 0, 1, 2, 3, 4, 5]
console.log(bubbleSort([1, 2, 3, 4, 5]));               // [1, 2, 3, 4, 5]
console.log(bubbleSort([9, 7, 8, 3, 2, 6, 5, 4, 1]));   // [1, 2, 3, 4, 5, 6, 7, 8, 9]
console.log(bubbleSort([12, 35, 87, 26, 9, 28]));       // [9, 12, 26, 28, 35, 87]
console.log(bubbleSort([50, 20, 30, 40, 10]));          // [10, 20, 30, 40, 50]
console.log(bubbleSort([100, 50, 75, 10]));             // [10, 50, 75, 100]
console.log(bubbleSort([7, 10, 2, 4, 9]));              // [2, 4, 7, 9, 10]
console.log(bubbleSort([1, 1, 1, 1, 1]));               // [1, 1, 1, 1, 1]
console.log(bubbleSort([30, 20, 10]));                  // [10, 20, 30]
console.log(bubbleSort([1000, 200, 500, 300]));         // [200, 300, 500, 1000]
console.log(bubbleSort([3, 2, 1]));                     // [1, 2, 3]
console.log(bubbleSort([15, 9, 11, 8, 10, 5]));         // [5, 8, 9, 10, 11, 15]
console.log(bubbleSort([6, 3, 7, 8, 2]));               // [2, 3, 6, 7, 8]
console.log(bubbleSort([5, 4, 3, 2, 1]));               // [1, 2, 3, 4, 5]
console.log(bubbleSort([9, 12, 6, 7]));                 // [6, 7, 9, 12]
console.log(bubbleSort([3, 3, 3, 2, 1]));               // [1, 2, 3, 3, 3]
console.log(bubbleSort([18, 24, 19, 30, 22]));          // [18, 19, 22, 24, 30]
console.log(bubbleSort([20, 17, 23, 5, 13]));           // [5, 13, 17, 20, 23]



