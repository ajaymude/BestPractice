


// 1 


Linear Search in DSA
What is Linear Search?
Linear Search is a simple searching algorithm that checks each element in a list sequentially until the target element is found.

Time Complexity:
Best Case (Element at the start):  O(1)

Worst Case (Element at the end or not found): O(n)
Average Case: O(n)

Algorithm Steps:
Start from the first element of the array.
Compare each element with the target value.
If a match is found, return the index.
If the element is not found, return -1 (indicating not found).





function linearSearch(arr, target) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === target) {
      return i; // Return index if element is found
    }
  }
  return -1; // Return -1 if element is not found
}

let numbers = [10, 25, 30, 45, 60, 75];
console.log(linearSearch(numbers, 30)); // Output: 2
console.log(linearSearch(numbers, 100)); // Output: -1





/ example 

// 1. Basic Linear Search (Find Index)
function linearSearch(arr, target) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === target) return i;
  }
  return -1;
}
console.log("1:", linearSearch([10, 20, 30, 40], 30)); // Output: 2

// 2. Search Boolean Value
function searchBoolean(arr, target) {
  return arr.includes(target);
}
console.log("2:", searchBoolean([true, false, true], false)); // Output: true

// 3. Search in String Array
console.log("3:", linearSearch(["apple", "banana"], "banana")); // Output: 1

// 4. Find Multiple Occurrences
function findAllOccurrences(arr, target) {
  return arr.map((val, i) => (val === target ? i : -1)).filter(i => i !== -1);
}
console.log("4:", findAllOccurrences([1, 2, 3, 2, 4, 2], 2)); // Output: [1, 3, 5]

// 5. Search in Object Array
function searchByKey(arr, key, value) {
  return arr.find(obj => obj[key] === value) || null;
}
console.log("5:", searchByKey([{id: 1, name: "Alice"}, {id: 2, name: "Bob"}], "name", "Bob"));

// 6. Search in Nested Array
function searchNested(arr, target) {
  return arr.some(el => Array.isArray(el) ? searchNested(el, target) : el === target);
}
console.log("6:", searchNested([1, [2, 3], [4, [5, 6]]], 5)); // Output: true

// 7. Find First Even Number
console.log("7:", [1, 3, 5, 8, 10].find(num => num % 2 === 0)); // Output: 8

// 8. Count Occurrences
console.log("8:", [1, 2, 2, 3, 2, 4].filter(num => num === 2).length); // Output: 3

// 9. Find Min Number
console.log("9:", Math.min(...[8, 3, 5, 2, 9])); // Output: 2

// 10. Find Max Number
console.log("10:", Math.max(...[8, 3, 5, 2, 9])); // Output: 9

// 11. Case-Insensitive Search
function caseInsensitiveSearch(arr, target) {
  return arr.findIndex(el => el.toLowerCase() === target.toLowerCase());
}
console.log("11:", caseInsensitiveSearch(["Apple", "banana"], "BANANA")); // Output: 1

// 12. Find Odd Numbers
console.log("12:", [2, 4, 5, 7, 10].filter(num => num % 2 !== 0)); // Output: [5, 7]

// 13. Search Character in String
console.log("13:", "hello".indexOf("e")); // Output: 1

// 14. Find First Negative Number
console.log("14:", [3, -2, 4, -5].find(num => num < 0)); // Output: -2

// 15. Recursive Linear Search
function recursiveSearch(arr, target, index = 0) {
  return index >= arr.length ? -1 : arr[index] === target ? index : recursiveSearch(arr, target, index + 1);
}
console.log("15:", recursiveSearch([1, 2, 3, 4], 3)); // Output: 2

// 16. Last Occurrence
function lastOccurrence(arr, target) {
  return arr.lastIndexOf(target);
}
console.log("16:", lastOccurrence([1, 2, 3, 2, 4], 2)); // Output: 3

// 17. Search Object by ID
console.log("17:", searchByKey([{id: 1, name: "John"}, {id: 2, name: "Alice"}], "id", 2));

// 18. Find First Prime Number
function isPrime(n) {
  if (n < 2) return false;
  for (let i = 2; i < n; i++) {
    if (n % i === 0) return false;
  }
  return true;
}
console.log("18:", [4, 6, 9, 11].find(isPrime)); // Output: 11

// 19. Search Word in Sentence
console.log("19:", "JavaScript is fun".includes("fun")); // Output: true

// 20. Check if All Numbers are Even
console.log("20:", [2, 4, 6].every(num => num % 2 === 0)); // Output: true



















Binary Search in DSA
What is Binary Search?
Binary Search is an efficient searching algorithm that works on sorted arrays. 
It follows the divide and conquer approach by repeatedly dividing the search space in half until the target element is found.

Time Complexity:
Best Case: 
O(1) (if the middle element is the target)

Worst Case: O(logn)

Average Case: O(logn)


Algorithm Steps:
Find the middle element of the array.
If the middle element is the target, return its index.
If the target is smaller, search in the left half.
If the target is larger, search in the right half.
Repeat until the element is found or the search space is empty.





function binarySearch(arr, target) {
  let left = 0;
  let right = arr.length - 1;

  while (left <= right) {
    let mid = Math.floor((left + right) / 2);

    if (arr[mid] === target) return mid;
    else if (arr[mid] < target) left = mid + 1;
    else right = mid - 1;
  }

  return -1; // Element not found
}

let numbers = [10, 20, 30, 40, 50, 60];
console.log(binarySearch(numbers, 30)); // Output: 2
console.log(binarySearch(numbers, 100)); // Output: -1





// 1. Basic Binary Search (Iterative)
function binarySearch(arr, target) {
  let left = 0, right = arr.length - 1;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) return mid;
    arr[mid] < target ? left = mid + 1 : right = mid - 1;
  }
  return -1;
}
console.log("1:", binarySearch([10, 20, 30, 40], 30)); // Output: 2

// 2. Recursive Binary Search
function binarySearchRecursive(arr, target, left = 0, right = arr.length - 1) {
  if (left > right) return -1;
  let mid = Math.floor((left + right) / 2);
  return arr[mid] === target ? mid 
       : arr[mid] < target ? binarySearchRecursive(arr, target, mid + 1, right)
       : binarySearchRecursive(arr, target, left, mid - 1);
}
console.log("2:", binarySearchRecursive([5, 10, 15, 20], 10)); // Output: 1

// 3. Search First Occurrence in Duplicates
function firstOccurrence(arr, target) {
  let left = 0, right = arr.length - 1, result = -1;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) {
      result = mid; right = mid - 1; // Move left
    } else if (arr[mid] < target) left = mid + 1;
    else right = mid - 1;
  }
  return result;
}
console.log("3:", firstOccurrence([1, 2, 2, 2, 3], 2)); // Output: 1

// 4. Search Last Occurrence in Duplicates
function lastOccurrence(arr, target) {
  let left = 0, right = arr.length - 1, result = -1;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) {
      result = mid; left = mid + 1; // Move right
    } else if (arr[mid] < target) left = mid + 1;
    else right = mid - 1;
  }
  return result;
}
console.log("4:", lastOccurrence([1, 2, 2, 2, 3], 2)); // Output: 3

// 5. Count Occurrences
console.log("5:", lastOccurrence([1, 2, 2, 2, 3], 2) - firstOccurrence([1, 2, 2, 2, 3], 2) + 1); // Output: 3

// 6. Search in Sorted Strings
console.log("6:", binarySearch(["apple", "banana", "cherry"], "banana")); // Output: 1

// 7. Find Smallest Element Greater than Target
function findCeil(arr, target) {
  let left = 0, right = arr.length - 1, result = -1;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (arr[mid] >= target) {
      result = arr[mid]; right = mid - 1;
    } else left = mid + 1;
  }
  return result;
}
console.log("7:", findCeil([1, 3, 5, 7], 4)); // Output: 5

// 8. Find Largest Element Smaller than Target
function findFloor(arr, target) {
  let left = 0, right = arr.length - 1, result = -1;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (arr[mid] <= target) {
      result = arr[mid]; left = mid + 1;
    } else right = mid - 1;
  }
  return result;
}
console.log("8:", findFloor([1, 3, 5, 7], 4)); // Output: 3

// 9. Find Peak Element
function findPeakElement(arr) {
  let left = 0, right = arr.length - 1;
  while (left < right) {
    let mid = Math.floor((left + right) / 2);
    if (arr[mid] > arr[mid + 1]) right = mid;
    else left = mid + 1;
  }
  return left;
}
console.log("9:", findPeakElement([1, 3, 8, 12, 4, 2])); // Output: 3

// 10. Search in Rotated Sorted Array
function searchRotatedArray(arr, target) {
  let left = 0, right = arr.length - 1;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) return mid;
    if (arr[left] <= arr[mid]) {
      if (target >= arr[left] && target < arr[mid]) right = mid - 1;
      else left = mid + 1;
    } else {
      if (target > arr[mid] && target <= arr[right]) left = mid + 1;
      else right = mid - 1;
    }
  }
  return -1;
}
console.log("10:", searchRotatedArray([4, 5, 6, 7, 0, 1, 2], 0)); // Output: 4

// 11. Find Square Root Using Binary Search
function squareRoot(n) {
  let left = 0, right = n, ans = 0;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (mid * mid === n) return mid;
    if (mid * mid < n) { left = mid + 1; ans = mid; }
    else right = mid - 1;
  }
  return ans;
}
console.log("11:", squareRoot(16)); // Output: 4

// 12. Find Closest Element
function findClosest(arr, target) {
  let left = 0, right = arr.length - 1, closest = arr[0];
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (Math.abs(arr[mid] - target) < Math.abs(closest - target)) closest = arr[mid];
    arr[mid] < target ? left = mid + 1 : right = mid - 1;
  }
  return closest;
}
console.log("12:", findClosest([1, 3, 8, 10], 6)); // Output: 3

// 13-25: More Examples
console.log("13:", binarySearch([2, 5, 8, 10], 5)); // Output: 1
console.log("14:", binarySearch([3, 4, 6, 9], 4)); // Output: 1
console.log("15:", binarySearchRecursive([2, 4, 6, 8], 6)); // Output: 2
console.log("16:", binarySearch(["cat", "dog", "rat"], "dog")); // Output: 1
console.log("17:", firstOccurrence([1, 1, 2, 2, 2, 3], 2)); // Output: 2
console.log("18:", lastOccurrence([1, 2, 2, 2, 3], 2)); // Output: 3
console.log("19:", findCeil([2, 4, 6, 8], 5)); // Output: 6
console.log("20:", findFloor([2, 4, 6, 8], 5)); // Output: 4
console.log("21:", findPeakElement([1, 3, 8, 12, 4, 2])); // Output: 3
console.log("22:", searchRotatedArray([6, 7, 1, 2, 3], 2)); // Output: 3
console.log("23:", squareRoot(49)); // Output: 7
console.log("24:", findClosest([1, 3, 5, 9], 6)); // Output: 5
console.log("25:", binarySearch([10, 20, 30, 40], 50)); // Output: -1
