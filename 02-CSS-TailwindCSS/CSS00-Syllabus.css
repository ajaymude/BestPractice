// 

/* ====================== */
/* CSS Full Syllabus      */
/* (Beginner to Expert)   */
/* ====================== */

/* üìò BASICS & SETUP */
/* 01 - What is CSS and why use it? */
/* 02 - Including CSS in HTML: inline, internal (<style>), external (<link>) */
/* 03 - CSS Syntax: selectors, properties, values */
/* 04 - CSS Cascade, Specificity, and Inheritance */
/* 05 - The Browser Rendering Pipeline and Repaint/Reflow */

/* üî§ SELECTORS & COMBINATORS */
/* 06 - Type (Element) Selectors */
/* 07 - Class Selectors */
/* 08 - ID Selectors */
/* 09 - Attribute Selectors ([attr], [attr="value"], [attr^="start"], [attr$="end"], [attr*="contains"]) */
/* 10 - Pseudo-classes (:hover, :active, :focus, :nth-child, :last-child, :first-of-type, :not) */
/* 11 - Pseudo-elements (::before, ::after, ::first-letter, ::first-line, ::placeholder) */
/* 12 - Grouping Selectors (comma-separated) */
/* 13 - Descendant, Child (>), Adjacent Sibling (+), General Sibling (~) Combinators */
/* 14 - Universal Selector (*) and Universal Selector Performance Considerations */
/* 15 - :root and Global CSS Variables (Custom Properties) */

/* üé® COLOR & TYPOGRAPHY */
/* 16 - Color Syntax: Named Colors, Hex (#FFF, #FFFFFF), RGB(a), HSL(a), HWB, Lab, LCH */
/* 17 - Opacity vs RGBA vs HSLA vs CSS Variables for Semi-transparency */
/* 18 - Color Contrast and WCAG Accessibility Guidelines */
/* 19 - Typography Basics: font-family, font-weight, font-style, font-variant */
/* 20 - Web-safe Fonts vs @font-face and Google Fonts Integration */
/* 21 - Font Loading Strategies: font-display, preloading, Font Loading API */
/* 22 - Text Properties: line-height, letter-spacing (tracking), word-spacing */
/* 23 - Text Alignment, Text Indentation, Text Transform, Text Decoration (underline, overline) */
/* 24 - Responsive Typography: viewport units (vw, vh), calc() for fluid type */
/* 25 - CSS Counters and Custom Numbering for Lists */

/* üì¶ BOX MODEL & SPACING */
/* 26 - Width, Height, min-/max-width, min-/max-height */
/* 27 - Content-box vs Border-box Box-sizing */
/* 28 - Margin, Padding, Border: Shorthand and Individual Properties */
/* 29 - Collapsing Margins Behavior */
/* 30 - Box Shadows (box-shadow), Inset Shadows */
/* 31 - Outline vs Border Differences */
/* 32 - Border Radius (border-radius) and Creating Circles, Ellipses */
/* 33 - Object-fit and Object-position for Replaced Elements (images, videos) */
/* 34 - Box Alignment Properties in Flex and Grid (justify-content, align-items, align-self) */
/* 35 - CSS Overflow: visible, hidden, scroll, auto, text-overflow: ellipsis */

/* üåê LAYOUT BASICS */
/* 36 - Display Property: block, inline, inline-block, inline-flex, inline-grid, none */
/* 37 - Position Property: static, relative, absolute, fixed, sticky */
/* 38 - Top, Right, Bottom, Left Offsets in Positioned Elements */
/* 39 - Z-index and Stacking Contexts */
/* 40 - Float and Clear: Legacy Layouts, Block Formatting Context */
/* 41 - Containing Floats via Clearfix */

/* üîÑ FLEXBOX (RESPONSIVE LAYOUT) */
/* 42 - display: flex and Inline Flex */
/* 43 - flex-direction: row, column, row-reverse, column-reverse */
/* 44 - justify-content: flex-start, center, space-between, space-around, space-evenly */
/* 45 - align-items: stretch, flex-start, flex-end, center, baseline */
/* 46 - align-content: stretch, flex-start, flex-end, center, space-between, space-around */
/* 47 - flex-wrap: nowrap, wrap, wrap-reverse */
/* 48 - flex Property: flex-grow, flex-shrink, flex-basis Shortcuts */
/* 49 - align-self Overrides for Individual Flex Items */
/* 50 - Order Property to Reorder Items */
/* 51 - Creating Centered Layouts with Flexbox */
/* 52 - Flexbox Performance Considerations and Browser Bugs */

/* üü¶ CSS GRID (ADVANCED LAYOUT) */
/* 53 - display: grid and Inline Grid */
/* 54 - grid-template-columns / grid-template-rows: fr Units, auto, minmax(), repeat() */
/* 55 - grid-gap / gap, row-gap, column-gap */
/* 56 - grid-template-areas and Naming Areas for Semantic Layouts */
/* 57 - Placing Items with grid-row-start/End, grid-column-start/End Shorthand */
/* 58 - justify-items, align-items, justify-content, align-content in Grid */
/* 59 - grid-auto-flow: row, column, dense */
/* 60 - Implicit Grid vs Explicit Grid Tracks */
/* 61 - Subgrid (CSS Subgrid Module) */
/* 62 - Aligning and Justifying Individual Grid Items */
/* 63 - Responsive Grid Layout Techniques (auto-fit, auto-fill) */
/* 64 - Grid Named Lines and Line Number Placement */

/* üîß RESPONSIVE DESIGN & MEDIA QUERIES */
/* 65 - Responsive Design Principles: Mobile-First vs Desktop-First */
/* 66 - Viewport Meta Tag and ‚ÄúResponsive‚Äù in HTML */
/* 67 - Media Query Syntax: @media (min-width), (max-width), (orientation), (aspect-ratio), (hover) */
/* 68 - Using Breakpoints, Common Device Widths, and Container Queries */
/* 69 - Fluid Layouts with max-width and Relative Units (%, vw, vh) */
/* 70 - Responsive Images: srcset, sizes, picture Element */
/* 71 - Responsive Typography Techniques (clamp(), min(), max()) */
/* 72 - Hide/Show Content for Different Screen Sizes */
/* 73 - CSS Container Queries (Experimental) */

/* üé® STYLING TECHNIQUES & BEST PRACTICES */
/* 74 - Shorthand Properties: margin, padding, border, background */
/* 75 - Backgrounds: background-color, background-image, background-size (cover, contain), background-position, background-repeat */
/* 76 - Gradients: linear-gradient, radial-gradient, conic-gradient Syntax */
/* 77 - Multiple Background Layers and Blending Modes (background-blend-mode) */
/* 78 - Borders: border styles (solid, dashed, dotted, double), border-image, border-image-slice, border-image-source */
/* 79 - CSS Filters: blur(), brightness(), contrast(), drop-shadow() on images and elements */
/* 80 - Mixins vs Utility Classes vs Component Classes */
/* 81 - DRY CSS: Avoiding Repetition with Variables, Mixins, Extends */

/* üîß PREPROCESSORS & POSTPROCESSORS */
/* 82 - Sass (SCSS) Basics: Variables, Nesting, Partial Files, @import/@use */
/* 83 - Sass Mixins, Functions, @extend, Placeholder Selectors (%placeholders) */
/* 84 - Less Basics: Variables, Nesting, Mixins, Guards */
/* 85 - Stylus Overview: Interpolation, Mixins, Functions */
/* 86 - PostCSS: autoprefixer, postcss-preset-env, cssnano Plugins */
/* 87 - CSS Next Features via postcss-preset-env (Custom Properties, Nesting, New Selectors) */
/* 88 - Configuring Build Tools (Webpack, Gulp, Grunt) to Compile Sass/Less to CSS */
/* 89 - Source Maps for Preprocessed CSS */

/* üîÑ CSS-IN-JS & MODERN STYLING */  
/* 90 - Styled Components: Tagged Template Literals, Theming, Server-Side Rendering Considerations */
/* 91 - Emotion Library: css Prop, Global Styles, ThemeProvider */
/* 92 - CSS Modules: Scoped Class Names, configuration in build tools */
/* 93 - Tailwind CSS Utility-First Approach: Configuration, PurgeCSS/Content Paths */
/* 94 - Utility-First vs Component-First vs Atomic CSS Philosophies */
/* 95 - Styled JSX (Next.js Built-in CSS-in-JS) */
/* 96 - Linaria: Zero-runtime CSS-in-JS with Babel plugin */

/* üåê FRAMEWORKS & LIBRARIES */
/* 97 - Bootstrap 5 Overview: Grid System, Utility Classes, Components */
/* 98 - Foundation Framework: Grid, UI Components, Responsive Utilities */
/* 99 - Bulma CSS: Flexbox-based Grid, Components, Modifiers */
/* 100 - Material UI (MUI) / Material Design Lite Basics (React Integration, Theming) */
/* 101 - Ant Design CSS (Less-based, Theming with Less Variables) */
/* 102 - Chakra UI: Styled System, Theming, Component Library */
/* 103 - Tailwind CSS Advanced: Customization, Plugins, Purging, JIT Mode */
/* 104 - CSS Utility Libraries Comparison: Tachyons, Basscss, Micromodal, Pico.css */

/* üîÅ LAYOUT PATTERNS & METHODOLOGIES */
/* 105 - BEM (Block Element Modifier) Naming Convention and Structure */
/* 106 - SMACSS (Scalable and Modular Architecture for CSS) */
/* 107 - ITCSS (Inverted Triangle CSS) Architecture Layers */
/* 108 - OOCSS (Object-Oriented CSS) Principles */
/* 109 - Atomic Design Pattern: Atoms, Molecules, Organisms, Templates, Pages */
/* 110 - CSS Naming Conventions: kebab-case vs camelCase vs snake_case */
/* 111 - Utility-First vs Component-First vs Semantic CSS */
/* 112 - CSS Architectures for Large-Scale Projects (Domain-Driven CSS) */

/* üíß THEMING & DESIGN SYSTEMS */
/* 113 - CSS Custom Properties (Variables) for Theming */
/* 114 - Dark Mode Toggle: prefers-color-scheme Media Query, JavaScript Fallback */
/* 115 - Color Palettes and Accessible Color Contrast Ratios */
/* 116 - Creating a Design Token System: Variables for Colors, Spacing, Typography */
/* 117 - Documenting Design System Components (Storybook, Styleguidist) */
/* 118 - Dynamic Theming with CSS Variables and JavaScript */

/* üß© ANIMATIONS & TRANSITIONS */
/* 119 - CSS Transitions: transition-property, transition-duration, timing-function, delay */
/* 120 - CSS Animations: @keyframes, animation-name, animation-duration, timing-function, iteration-count, direction */
/* 121 - Transform Functions: translate(), scale(), rotate(), skew(), perspective() */
/* 122 - 3D Transforms and transform-style: preserve-3d */
/* 123 - Animation Performance: will-change, GPU Acceleration, Avoiding Layout Thrashing */
/* 124 - Animating SVG Elements with CSS: stroke-dasharray, stroke-dashoffset */
/* 125 - Scroll-triggered Animations: IntersectionObserver API with CSS Classes */
/* 126 - Parallax Effects Using CSS Perspective, translateZ, transform-style */

/* üõ† RESPONSIVE IMAGES & MEDIA */
/* 127 - Responsive Background Images: background-size, background-position, media-query-based backgrounds */
/* 128 - Picture Element (<picture>) and <source> for Art Direction */
/* 129 - Object-fit and Object-position for Responsive Media */
/* 130 - CSS Media Queries for Retina/HiDPI Displays (resolution:, min-device-pixel-ratio) */
/* 131 - srcset, sizes Attributes for <img> */

/* üì± MOBILE-FIRST & TOUCH INTERACTIONS */
/* 132 - Mobile-First Workflow: Designing and Writing CSS Starting at Smallest Screens */
/* 133 - CSS Touch Action Property (touch-action: manipulation, auto, none) */
/* 134 - Gestures and Pointer Events: :hover Fallback for Touch, cursor Styles */
/* 135 - Viewport Units (vw, vh, vmin, vmax) vs % vs rem for Mobile Layouts */
/* 136 - Safe Area Insets for Notched Devices (env(safe-area-inset-top), CSS Variables) */

/* üîç PERFORMANCE & OPTIMIZATION */
/* 137 - Critical CSS: Inlining Above-the-Fold Styles, Deferring Non-critical CSS */
/* 138 - Minification and Compression: cssnano, clean-css, gzip/Brotli on Server */
/* 139 - CSS Delivery: Preload, Preconnect, DNS-Prefetch for Fonts and CSS Resources */
/* 140 - Reducing Unused CSS: PurgeCSS, UnCSS, Dead Code Elimination */
/* 141 - Avoiding Selector Loops and Deep Nesting to Improve Rendering Speed */
/* 142 - Batch DOM Reads and Writes to Avoid Layout Thrashing */
/* 143 - Use of will-change, contain, and overflow for Paint Containment */

/* üõ° SECURITY & BEST PRACTICES */
/* 144 - Preventing CSS Injection: Avoiding Unsanitized User-Generated Classes or IDs */
/* 145 - Securing @import Sources: Subresource Integrity (SRI) for CSS Files */
/* 146 - Cross-Origin Resource Sharing (CORS) for Web Fonts and External CSS */
/* 147 - Content Security Policy (CSP) Directives for Styles: style-src, unsafe-inline Risks */

/* ‚úÖ TESTING & DEBUGGING */
/* 148 - Debugging CSS in Browser DevTools: Inspect, Computed Styles, Box Model Panel */
/* 149 - CSS Linting with Stylelint: Configuring Rules, Plugins (stylelint-order, stylelint-scss) */
/* 150 - Visual Regression Testing with Percy or Chromatic for CSS/UI Changes */
/* 151 - Accessibility Testing: axe-core, Lighthouse, manual keyboard-only navigation */
/* 152 - Cross-Browser Testing: BrowserStack, Sauce Labs, Testing Edge Cases in Old Browsers (IE11) */
/* 153 - Writing CSS Tests with Jest and jest-styled-components for CSS-in-JS */

/* üåê CSS FOR WEB COMPONENTS & SHADOW DOM */
/* 154 - Plain Web Components: <template>, <slot>, Shadow DOM Basics */
/* 155 - Styling Shadow DOM Elements: ::part, ::slotted, encapsulation boundaries */
/* 156 - CSS Custom Properties and Inheritance in Shadow DOM Context */
/* 157 - Using Lit or Stencil for Component-based CSS Management */

/* üîÑ CSS MODULES & SCOPED STYLES */
/* 158 - CSS Modules in React/webpack: import styles from ‚ÄòComponent.module.css‚Äô */
/* 159 - Scoped Styles in Vue Single-File Components (<style scoped>) */
/* 160 - Angular View Encapsulation Strategies: Emulated, None, Shadow DOM */
/* 161 - Svelte Scoped CSS: Component-specific CSS, auto-prefixed */

/* üóÇ ARCHITECTURE & METHODOLOGIES */
/* 162 - Organizing Large CSS Codebases: File Structure, Naming Conventions */
/* 163 - Atomic CSS vs Utility-first vs Component-based Approaches */
/* 164 - BEM Naming Deep Dive: Block, Element, Modifier Conventions, Avoiding Selector Conflicts */
/* 165 - SMACSS Layering: Base, Layout, Module, State, Theme */
/* 166 - ITCSS Layering: Settings, Tools, Generic, Base, Objects, Components, Utilities */
/* 167 - CSS-in-JS Architecture Patterns: Styled System, CSS Prop, Theming Strategies */

/* ‚öô TOOLING & WORKFLOW */
/* 168 - Package.json Scripts for CSS Build: sass, postcss, autoprefixer, purgecss Commands */
/* 169 - Setting Up Webpack for CSS: style-loader, css-loader, postcss-loader, MiniCssExtractPlugin */
/* 170 - Using Gulp or Grunt for CSS Tasks: Compiling, Prefixing, Minifying, Deploying */
/* 171 - BrowserSync or Live Server for Automatic CSS Reloading During Development */
/* 172 - Linting and Formatting: Prettier for CSS, stylelint Configuration */
/* 173 - Automating Accessibility and Performance Audits in CI (axe-core CLI, Lighthouse CI) */

/* üì¶ FRAMEWORKS & LIBRARIES (ADVANCED) */
/* 174 - Tailwind CSS Advanced Customization: Configuring tailwind.config.js, Extending Themes, Plugins */
/* 175 - Bootstrap Custom Builds: SASS Variables, Customizing Components via SASS Maps */
/* 176 - Material Design Lite (MDL) Theming: Custom Themes, SASS Integration */
/* 177 - Foundation Prototyping: XY Grid, Flex Grid vs. Block Grid, Building Custom Components */
/* 178 - Chakra UI Theming under the Hood: Styled System, Emotion, CSS API */
/* 179 - Bulma SASS Customization: Variables, Grid Customization, Extending Components */

/* üñº CSS FOR GRAPHICS & VISUALIZATION */
/* 180 - Creating Shapes with pure CSS: Circles, Triangles, Polygons using border and clip-path */
/* 181 - CSS Clip-path and Masking: Creating Complex Shapes, Clipping SVG Paths */
/* 182 - CSS Gradients for Backgrounds and Text Fill Effects */
/* 183 - CSS Blend Modes (mix-blend-mode, background-blend-mode) for Visual Effects */
/* 184 - Using CSS for Simple Charts: Bar graphs with divs, Flexbox-based or CSS Grid-based layouts */
/* 185 - Creating Icon Systems: SVG Sprite Technique vs Icon Fonts vs React SVG Components */

/* ‚ö° PERFORMANCE MONITORING & OPTIMIZATION */
/* 186 - Measuring CSS Performance: DevTools Performance Tab, Paint Flashing */
/* 187 - Reducing Paint Areas: Avoid Large Repaints, Using will-change and contain Properties */
/* 188 - Critical Path CSS: Extracting Critical CSS with tools (Critical, Penthouse) */
/* 189 - Reducing CSS File Size: Combining, Minifying, GZIP/Brotli Compression */
/* 190 - Splitting CSS by Media Type: print, screen, speech (prefetching, preloading Strategies) */
/* 191 - Font Optimization: Subsetting, self-hosting vs Third-party, Preconnect and Preload */

/* üîí SECURITY & MAINTAINABILITY */
/* 192 - Avoiding Inline Styles and Style Attribute for Maintainability */
/* 193 - Securing Third-Party CSS: Integrity Check with SRI, Subresource Integrity */
/* 194 - Versioning CSS Assets for Cache Busting (hash in filename, query param) */
/* 195 - Documenting CSS Guidelines and Coding Standards for Team Consistency */

/* üõ° COMPATIBILITY & FALLBACKS */
/* 196 - Vendor Prefixes: -webkit-, -moz-, -ms-, -o-, autoprefixer Best Practices */
/* 197 - Graceful Degradation vs Progressive Enhancement for Legacy Browsers */
/* 198 - Feature Detection with @supports (CSS Feature Queries) */
/* 199 - CSS Hacks for Legacy IE (Conditional Comments, Star Hack, Underscore Hack) */
/* 200 - Fallbacks for Unsupported Properties: background-color fallback before gradient */

/* üåê ACCESSIBILITY & A11Y */
/* 201 - Using CSS to Improve Accessibility: Focus Outlines, Visible Focus Indicators */
/* 202 - High Contrast Mode Considerations: Using system colors, prefers-contrast media query */
/* 203 - Reduced Motion Media Query (prefers-reduced-motion) for Animations Transitions */
/* 204 - Legible Font Sizes, Line Heights, and Color Contrast Ratios */
/* 205 - Hiding Content Visually vs Completely Removing from Accessibility Tree (visibility: hidden vs display: none vs aria-hidden) */

/* üñ• PRINT STYLES & MULTIMEDIA */
/* 206 - @media print: Styling for Print Layouts, Hiding Non-essential Elements */
/* 207 - Page Break Controls: page-break-before, page-break-after, orphans, widows */
/* 208 - Print-friendly Fonts, Colors, and Layout Considerations */
/* 209 - Styling HTML5 Video and Audio Elements via CSS Controls */

/* üîÑ ADVANCED CSS CONCEPTS */
/* 210 - CSS Houdini APIs: Paint API, Layout API, Typed OM (Object Model) */
/* 211 - CSS Variables (Custom Properties) Deep Dive: Inheritance, Cascade, Runtime Manipulation */
/* 212 - Logical Properties and RTL Support: margin-inline-start, padding-block-end */
/* 213 - CSS Grid Subgrid (W3C Candidate) for Complex Nested Grids */
/* 214 - CSS Scroll Snap: scroll-snap-type, scroll-snap-align, scroll-snap-stop */
/* 215 - CSS Scrollbars Styling (::-webkit-scrollbar, scrollbar-color, scrollbar-width) */
/* 216 - CSS Masking and Clipping with clip-path, mask-image, mask-mode */
/* 217 - CSS Media Queries Level 4: aspect-ratio, dynamic-range, color-gamut, pointer */
/* 218 - CSS Houdini Typed Object Model: Working with numeric types, color types, length units */
/* 219 - CSS Container Queries (WICG Spec): Querying parent container size for truly responsive components */

/* üß∞ CSS INTEGRATION WITH JAVASCRIPT & FRAMEWORKS */
/* 220 - Dynamically Manipulating CSS Classes with JavaScript: classList, className, style.property */
/* 221 - Using CSS Custom Properties in JavaScript (getComputedStyle, style.setProperty) */
/* 222 - Integrating CSS Modules in React/Vue/Angular: scoping, dynamic imports */
/* 223 - Tailwind CSS JIT Class Generation and Purge Logic in JS Frameworks */
/* 224 - Using Styled Components or Emotion in React: Theming via Context, Server-Side Rendering */
/* 225 - Integrating PostCSS in Build Pipelines: Configuring autoprefixer, postcss-preset-env, cssnano */

/* üì¶ PACKAGING & DEPLOYMENT FOR CSS */
/* 226 - Bundling CSS with Webpack: MiniCssExtractPlugin, CSS Minification, Source Maps */
/* 227 - Splitting CSS by Route or Component in Single-Page Applications (Code Splitting) */
/* 228 - Deploying CSS to CDNs: Cache-Control Headers, Cache Busting Strategies */
/* 229 - Version Control for CSS: Git Branching Strategies, Code Reviews, Style Guides */
/* 230 - CI/CD Pipeline Integration: Automated Linting, Testing, and Deployment of CSS Assets */

/* üìä MONITORING & ANALYTICS FOR CSS */
/* 231 - Measuring Real-User CSS Performance: Web Vitals (CLS, LCP), RUM Tools */
/* 232 - Identifying Render-blocking CSS: Critical Path Analysis, Preload vs Preconnect */
/* 233 - Tracking CSS Usage with Chrome Coverage Tab: Identifying Unused CSS */
/* 234 - Visual Regression Testing for CSS Changes: Percy, Chromatic, Storybook Integration */

/* üåü ADVANCED THEMING & DESIGN SYSTEMS */
/* 235 - Building a Scalable Design System: Tokens, Components, Documentation Practices */
/* 236 - Theming Strategies: Multiple Themes via CSS Variables, Theming at Build vs Runtime */
/* 237 - Cross-Platform Theming: Web, React Native, Flutter Integration Patterns */
/* 238 - Automated Generation of CSS Documentation: Styleguidist, Docz, Storybook Docs */

/* üèó CSS FOR COMPONENT LIBRARIES & FRAMEWORKS */
/* 239 - Developing a Custom CSS Component Library: Modular CSS, Theming, Versioning */
/* 240 - Publishing CSS Libraries to npm: Package.json, Style Field, Module Field */
/* 241 - Rollup Configuration for Distributable CSS Packages: postcss Rollup Plugin, linting */
/* 242 - Managing Peer Dependencies and Bundled CSS in Libraries */

/* üìà FUTURE OF CSS & STANDARDS */
/* 243 - Upcoming CSS Features in Draft Proposals: Container Queries, :has() Selector, subgrid */
/* 244 - Houdini Paint API: Creating Custom Paint Worklets, registerPaint() */
/* 245 - CSS Layout API (Houdini): registerLayout(), Custom Algorithms for Layout */
/* 246 - Typed Object Model (Typed OM) for CSS: Working with Typed CSS Values in JS */
/* 247 - CSS Color Module Level 4: Lab(), LCH(), color() Function, color-contrast() */
/* 248 - CSS Selectors Level 4: :has(), :is(), :where(), :nth-child(An+B of S) */

/* üíº CAREER & COMMUNITY */
/* 249 - Contributing to CSS Standards: Following W3C and WHATWG Processes */
/* 250 - Keeping Up with CSS: MDN Web Docs, CSS-Tricks, Smashing Magazine, A List Apart */
/* 251 - Participating in CSS Community: CSS Working Group, Frontend Masters, CSS Conf Talks */
/* 252 - Writing Technical CSS Documentation: Markdown Style Guides, Living Style Guides */

/* ‚Äî END OF CSS SYLLABUS ‚Äî */



/* ‚úÖ CSS Full Syllabus (Beginner to Master Level) */

/* üìò BASICS OF CSS */
 /* 01 - What is CSS, its role in web development */
 /* 02 - How CSS works with HTML - CSSOM concept */
 /* 03 - Ways to apply CSS (Inline, Internal, External) */
 /* 04 - CSS Syntax: selectors, properties, values */
 /* 05 - CSS Comments */
 /* 06 - Case-sensitivity and white space rules */
 /* 07 - CSS File organization best practices */

/* üéØ CSS SELECTORS */
 /* 08 - Basic selectors (element, class, ID) */
 /* 09 - Grouping, universal, and nested selectors */
 /* 10 - Attribute selectors and matching patterns */
 /* 11 - Pseudo-classes (:hover, :active, :focus, :nth-child, etc.) */
 /* 12 - Pseudo-elements (::before, ::after, ::first-letter) */
 /* 13 - Combinators: descendant, child ( > ), adjacent (+), general sibling (~) */
 /* 14 - Specificity calculation and conflict resolution */

/* üé® COLORS & UNITS */
 /* 15 - Color formats: Named, HEX, RGB, RGBA, HSL, HSLA */
 /* 16 - CSS units: absolute (px, cm) and relative (%, em, rem, vh, vw) */
 /* 17 - CurrentColor and transparent keyword */

/* ‚úçÔ∏è TEXT AND FONTS */
 /* 18 - Font-family, font-size, font-weight, font-style */
 /* 19 - Text alignment, transform, decoration, spacing */
 /* 20 - Line-height and vertical alignment */
 /* 21 - Font loading and @font-face rule */
 /* 22 - Web-safe fonts and using Google Fonts */

/* üìè BOX MODEL & SPACING */
 /* 23 - Margin, padding, border, content */
 /* 24 - width, height, max-width, min-height */
 /* 25 - Box-sizing: content-box vs border-box */
 /* 26 - Outline vs Border */
 /* 27 - Overflow handling (hidden, scroll, auto, visible) */

/* üì¶ DISPLAY & VISIBILITY */
 /* 28 - Display types: block, inline, inline-block, flex, grid, none */
 /* 29 - Visibility: visible, hidden, collapse */
 /* 30 - Opacity and transparent effects */

/* üß≠ POSITIONING SYSTEM */
 /* 31 - position: static, relative, absolute, fixed, sticky */
 /* 32 - Top, bottom, left, right usage */
 /* 33 - z-index, stacking order and context */

/* üß± FLEXBOX (1D Layouts) */
 /* 34 - display: flex, flex-direction, flex-wrap */
 /* 35 - justify-content, align-items, align-content */
 /* 36 - flex-grow, flex-shrink, flex-basis */
 /* 37 - align-self, order, gap */
 /* 38 - Real-life layout examples with Flexbox */

/* ü™ü CSS GRID (2D Layouts) */
 /* 39 - display: grid, grid-template-columns/rows */
 /* 40 - grid-gap (gap), grid-auto-flow, repeat() */
 /* 41 - grid-column, grid-row, start/end lines */
 /* 42 - grid-template-areas, naming grid lines */
 /* 43 - Implicit vs explicit grid */
 /* 44 - Grid item alignment and nesting */

/* üì± RESPONSIVE DESIGN */
 /* 45 - Media queries, breakpoints and range operators */
 /* 46 - Mobile-first vs desktop-first approaches */
 /* 47 - Viewport meta tag */
 /* 48 - Responsive typography (fluid sizes) */
 /* 49 - Container queries */
 /* 50 - Responsive images (object-fit, picture tag basics) */

/* üåà BACKGROUNDS & BORDERS */
 /* 51 - background-color, image, position, repeat */
 /* 52 - background-size, attachment, shorthand */
 /* 53 - border types, shorthand, border-radius */
 /* 54 - outline, outline-offset */
 /* 55 - box-shadow, text-shadow */

/* üí´ TRANSITIONS & ANIMATIONS */
 /* 56 - transition: property, duration, delay, timing */
 /* 57 - Animation: @keyframes, animation-name, duration, iteration */
 /* 58 - Transform + Animate (hover, toggle, etc.) */
 /* 59 - animation-direction, fill-mode, play-state */
 /* 60 - Animating position, size, and opacity */

/* üìê TRANSFORMS & EFFECTS */
 /* 61 - 2D transforms: translate, rotate, scale, skew */
 /* 62 - 3D transforms: perspective, rotateX/Y/Z */
 /* 63 - transform-origin and transform-style */

/* üß† ADVANCED CONCEPTS */
 /* 64 - Custom properties (CSS variables) */
 /* 65 - calc(), min(), max(), clamp() functions */
 /* 66 - Logical properties (margin-inline, padding-block) */
 /* 67 - Writing-mode, text-orientation (vertical text) */
 /* 68 - Scroll behavior, scroll snap */
 /* 69 - aspect-ratio */

/* üßΩ CLEAN & ORGANIZED CSS */
 /* 70 - BEM naming convention */
 /* 71 - DRY and reusable styles */
 /* 72 - Using shorthand properties smartly */
 /* 73 - CSS Reset vs Normalize */
 /* 74 - Cross-browser compatibility */
 /* 75 - Print stylesheets */

/* üß™ DEBUGGING & PERFORMANCE */
 /* 76 - DevTools for live inspection */
 /* 77 - Understanding and fixing specificity issues */
 /* 78 - Performance tips (reducing reflows/repaints) */
 /* 79 - Avoiding !important misuse */

/* üß∞ CSS TOOLING & FRAMEWORKS */
 /* 80 - Bootstrap overview */
 /* 81 - Tailwind CSS overview */
 /* 82 - Sass/SCSS overview */
 /* 83 - CSS-in-JS (styled-components, Emotion) */
 /* 84 - PostCSS and Autoprefixer */
 /* 85 - Using utility-first and component-based styles */

/* üöÄ DEPLOYMENT & PRODUCTION */
 /* 86 - Minification and bundling */
 /* 87 - Source maps and build tools (Vite, Webpack) */
 /* 88 - Hosting styles with GitHub Pages/Netlify */

/* üî® MINI PROJECTS FOR PRACTICE */
 /* 89 - Button hover and press effects */
 /* 90 - Card layout with transitions */
 /* 91 - Navbar (fixed/sticky/responsive) */
 /* 92 - Login / signup form design */
 /* 93 - Accordion / tabs / toggles */
 /* 94 - Modal with animation */
 /* 95 - Dark mode toggle */
 /* 96 - Animated loader/spinner */
 /* 97 - Grid-based blog layout */
 /* 98 - Pricing table layout */
 /* 99 - Footer and contact form */
 /* 100 - Landing page (fully responsive) */









