// 1 - transition
// 2 - transform 2d, transform 3d
// 3 - animation
// 4 - backface-visibility: visible | hidden;



// 1 - transition

property: Specifies the CSS property you want to animate (e.g., width, background-color, opacity). Use all to apply transitions to all properties.
duration: Defines the time over which the transition will occur (e.g., 2s, 500ms).
timing-function: Specifies the speed curve of the transition (e.g., ease, linear, ease-in, ease-out, cubic-bezier()).
delay: Defines how long to wait before starting the transition (e.g., 0s, 1s).

// transition: [property] [duration] [timing-function] [delay];


div {
  width: 100px;
  height: 100px;
  background-color: green;
  transition: width 0.5s ease-out;
}

div:hover {
  width: 300px;
}



div {
  width: 100px;
  height: 100px;
  background-color: orange;
  transition: width 0.5s ease, height 0.5s ease, background-color 0.3s ease-in-out;
}

div:hover {
  width: 300px;
  height: 300px;
  background-color: yellow;
}










// 2 - transform 2d, transform 3d

2D Transform Functions:
Here are the most commonly used 2D transform functions in CSS:

translate(): Moves an element along the X and Y axes.
scale(): Resizes an element along the X and Y axes.
rotate(): Rotates an element around a point (usually the center).
skew(): Distorts an element by skewing it along the X or Y axis.
matrix(): A more complex function that combines all the 2D transforms into a single transformation matrix.

transform: transform-function;


div {
  width: 100px;
  height: 100px;
  background-color: teal;
  transform: translate(50px, 100px);
}


div {
  width: 100px;
  height: 100px;
  background-color: orange;
  transform: scale(1.5);
}


div {
  width: 100px;
  height: 100px;
  background-color: blue;
  transform: rotate(45deg);
}


div {
  width: 100px;
  height: 100px;
  background-color: red;
  transform: skew(20deg, 10deg);
}


div {
  width: 100px;
  height: 100px;
  background-color: yellow;
  transform: translateX(50px) translateY(100px);
}


div {
  width: 100px;
  height: 100px;
  background-color: green;
  transform: matrix(1, 0, 0, 1, 50, 100);
}




div {
  width: 100px;
  height: 100px;
  background-color: purple;
  transform: translate(50px, 50px) rotate(45deg) scale(1.5);
}



div {
  width: 100px;
  height: 100px;
  background-color: gray;
  transition: transform 0.3s ease;
}

div:hover {
  transform: translateX(100px) rotate(45deg) scale(1.2);
}


div {
  width: 100px;
  height: 100px;
  background-color: coral;
  transform-origin: top left;
  transform: rotate(45deg);
}


transform-origin: <x-axis> <y-axis>;

div {
  width: 100px;
  height: 100px;
  background-color: orange;
  transform-origin: top left;
  transform: rotate(45deg);
}


div {
  width: 100px;
  height: 100px;
  background-color: blue;
  transform-origin: bottom right;
  transform: rotate(45deg);
}


div {
  width: 100px;
  height: 100px;
  background-color: purple;
  transform-origin: 20px 30px;
  transform: rotate(45deg);
}


div {
  width: 100px;
  height: 100px;
  background-color: green;
  transform-origin: 50% 50%;
  transform: scale(2);
}


div {
  width: 100px;
  height: 100px;
  background-color: pink;
  transform-origin: bottom right;
  transform: translate(50px, 50px) rotate(45deg);
}







// transform 3d 

rotateX(), rotateY(), rotateZ()
translate3d()
scale3d()
perspective()



div {
  width: 100px;
  height: 100px;
  background-color: coral;
  transform: rotateX(45deg);
}


div {
  width: 100px;
  height: 100px;
  background-color: teal;
  transform: rotateY(45deg);
}


div {
  width: 100px;
  height: 100px;
  background-color: purple;
  transform: rotateZ(45deg);
}


div {
  width: 100px;
  height: 100px;
  background-color: orange;
  transform: translate3d(50px, 100px, 200px);
}


div {
  width: 100px;
  height: 100px;
  background-color: green;
  transform: scale3d(1.5, 2, 1);
}





.container {
  width: 300px;
  height: 300px;
  perspective: 500px;
}

div {
  width: 100px;
  height: 100px;
  background-color: blue;
  transform: rotateY(45deg);
}






// perspective: <length>;


.container {
  width: 300px;
  height: 300px;
  perspective: 500px; /* Set perspective depth */
}

div {
  width: 100px;
  height: 100px;
  background-color: orange;
  transform: rotateY(45deg); /* Rotate along the Y-axis */
}


perspective-origin: <x> <y>;


.container {
  width: 300px;
  height: 300px;
  perspective: 500px;
  perspective-origin: top left; /* Change the origin to the top-left corner */
}

div {
  width: 100px;
  height: 100px;
  background-color: orange;
  transform: rotateY(45deg);
}



.container {
  width: 300px;
  height: 300px;
  perspective: 500px;
  perspective-origin: bottom right; /* Change the origin to the bottom-right corner */
}

div {
  width: 100px;
  height: 100px;
  background-color: green;
  transform: rotateY(45deg);
}





// transform-style: <value>;


.container {
  width: 300px;
  height: 300px;
  perspective: 500px;
  transform-style: preserve-3d;
  transform: rotateY(30deg);
}

div {
  width: 100px;
  height: 100px;
  background-color: lightblue;
  transform: rotateX(45deg);
}



.container {
  width: 400px;
  height: 400px;
  perspective: 1000px;
  transform-style: preserve-3d; /* Enables 3D transforms on children */
}

div {
  width: 100px;
  height: 100px;
  background-color: lightgreen;
  position: absolute;
}

div:nth-child(1) {
  transform: rotateY(30deg) translateZ(100px);
}

div:nth-child(2) {
  transform: rotateY(60deg) translateZ(200px);
}

div:nth-child(3) {
  transform: rotateY(90deg) translateZ(300px);
}










// 3 - animation

animation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-direction] [animation-fill-mode] [animation-play-state];


animation-timing-function

linear: Constant speed from start to finish.
ease: Starts slow, speeds up, and slows down again (default).
ease-in: Starts slow and speeds up.
ease-out: Starts fast and slows down.
ease-in-out: Starts slow, speeds up, then slows down.
cubic-bezier(n, n, n, n): Custom timing function.


animation-direction:

normal: Animation runs as defined (default).
reverse: Animation runs in reverse (from last keyframe to first).
alternate: The animation alternates between forwards and backwards.
alternate-reverse: Alternates, but starts in reverse on the first cycle.

animation-fill-mode

none: No styles are applied before or after (default).
forwards: The styles defined in the last keyframe are applied after the animation ends.
backwards: The styles defined in the first keyframe are applied before the animation starts.
both: Combines forwards and backwards (both pre- and post-animation styles are applied).


animation-play-state:

running: The animation is currently running.
paused: The animation is paused (animation does not run).



@keyframes moveAndColorChange {
    0% {
        background-color: blue;
        transform: translateX(0);
    }
    50% {
        background-color: green;
        transform: translateX(300px);
    }
    100% {
        background-color: red;
        transform: translateX(0);
    }
}


.animated-box {
    width: 100px;
    height: 100px;
    animation: moveAndColorChange 5s infinite;
}


@keyframes moveAndColorChange {
    from {
        background-color: blue;
        transform: translateX(0);
    }
    to {
        background-color: red;
        transform: translateX(300px);
    }
}


.animated-box {
    width: 100px;
    height: 100px;
    animation: moveAndColorChange 5s ease-in-out infinite alternate;
}










// 4 - backface-visibility: visible | hidden;


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    .flip-card {
      width: 200px;
      height: 200px;
      perspective: 1000px; /* Set perspective to make 3D transforms visible */
    }

    .flip-card-inner {
      width: 100%;
      height: 100%;
      transform-style: preserve-3d;
      transition: transform 0.5s;
    }

    .flip-card:hover .flip-card-inner {
      transform: rotateY(180deg);
    }

    .flip-card-front,
    .flip-card-back {
      position: absolute;
      width: 100%;
      height: 100%;
      backface-visibility: hidden; /* Hide the back face */
    }

    .flip-card-front {
      background-color: #bbb;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .flip-card-back {
      background-color: #333;
      color: white;
      display: flex;
      justify-content: center;
      align-items: center;
      transform: rotateY(180deg);
    }
  </style>
</head>
<body>
  <div class="flip-card">
    <div class="flip-card-inner">
      <div class="flip-card-front">
        Front
      </div>
      <div class="flip-card-back">
        Back
      </div>
    </div>
  </div>
</body>
</html>





























// animation 


Key Animation Properties
animation-name: Specifies the name of the animation.
animation-duration: Defines how long the animation should take.
animation-timing-function: Controls the speed curve of the animation (e.g., ease, linear, ease-in, ease-out, cubic-bezier()).
animation-delay: Delays the start of the animation.
animation-iteration-count: Defines how many times the animation runs (e.g., 1, infinite).
animation-direction: Specifies the direction of the animation (normal, reverse, alternate, alternate-reverse).
animation-fill-mode: Determines how the animation affects the element before and after it runs (none, forwards, backwards, both).
animation-play-state: Controls whether the animation is running or paused (running, paused).

.element {
  animation: animation-name duration timing-function delay iteration-count direction fill-mode;
}


@keyframes animation-name {
  0% {
    /* Starting state */
    property: value;
  }
  50% {
    /* Midpoint */
    property: value;
  }
  100% {
    /* Ending state */
    property: value;
  }
}



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    .rotate-scale {
      width: 100px;
      height: 100px;
      background-color: green;
      animation: rotateScale 3s infinite ease-in-out;
    }

    @keyframes rotateScale {
      0% {
        transform: rotate(0deg) scale(1);
      }
      50% {
        transform: rotate(180deg) scale(1.5);
      }
      100% {
        transform: rotate(360deg) scale(1);
      }
    }
  </style>
</head>
<body>

  <div class="rotate-scale"></div>

</body>
</html>




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    .bounce {
      width: 100px;
      height: 100px;
      background-color: red;
      animation: bounce 2s infinite;
    }

    @keyframes bounce {
      0%, 20%, 50%, 80%, 100% {
        transform: translateY(0);
      }
      40% {
        transform: translateY(-30px);
      }
      60% {
        transform: translateY(-15px);
      }
    }
  </style>
</head>
<body>

  <div class="bounce"></div>

</body>
</html>





@keyframes animation-name {
  from {
    /* Initial styles */
  }
  to {
    /* Final styles */
  }
}


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    .fade-in {
      opacity: 0; /* Start with opacity 0 */
      animation: fadeIn 2s ease-in forwards; /* Apply the fadeIn animation */
    }

    @keyframes fadeIn {
      from {
        opacity: 0; /* Starting state */
      }
      to {
        opacity: 1; /* Ending state */
      }
    }
  </style>
</head>
<body>

  <div class="fade-in">This text fades in!</div>

</body>
</html>




// animation-fill-mode: none | forwards | backwards | both;


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    .example {
      width: 100px;
      height: 100px;
      background-color: red;
      animation: moveRight 2s forwards;
    }

    @keyframes moveRight {
      from {
        transform: translateX(0);
      }
      to {
        transform: translateX(200px);
      }
    }
  </style>
</head>
<body>
  <div class="example"></div>
</body>
</html>







// object-fit: fill | contain | cover | none | scale-down;


object-fit: fill;


img {
    width: 100%;
    height: 100%;
    object-fit: contain; /* Ensures the image fits inside the container */
  }






// css user select 

user-select: auto | text | none | contain | all;


.no-select {
    user-select: none; /* Prevent text selection */
  }





// box decoration break

box-decoration-break: slice | clone;

p {
    box-decoration-break: slice; /* Default behavior */
    padding: 5px;
    border: 2px solid blue;
  }






// css quote

quotes: none | normal | <string>+;


quotes: "“" "”" "‘" "’";


q {
    quotes: normal; /* Use the browser's default quotation marks */
  }



blockquote {
    quotes: "‹" "›" "‘" "’"; /* Use custom quotation marks */
    padding: 10px;
    border-left: 5px solid #ccc;
  }


  





