// color 
element {
  color: red;
}





// current color 

/* Set the text color to blue */
p {
  color: blue;
  border: 2px solid currentColor; /* The border color will also be blue */
  background-color: currentColor; /* The background will be blue as well */
}







// background color

element {
  background-color: #ff6347;
}





// border 

element {
  border-width: 2px;        /* Thickness */
  border-style: solid;      /* Solid line */
  border-color: blue;       /* Color */
}

element {
  border: 2px solid blue;   /* Border width, style, and color */
}

element {
  border-top: 3px solid green;
  border-right: 2px dashed blue;
  border-bottom: 4px dotted red;
  border-left: 5px solid black;
}


element {
  border: 2px solid purple;
  border-radius: 10px;  /* All corners rounded */
}


element {
  border: 2px solid orange;
  border-top-left-radius: 20px;
  border-top-right-radius: 10px;
  border-bottom-left-radius: 5px;
  border-bottom-right-radius: 15px;
}


.container {
  width: 200px;
  height: 200px;
  background-color: lightblue;
  border-radius: 20px;  /* All four corners have a radius of 20px */
}


.container {
  width: 200px;
  height: 100px;
  background-color: lightgreen;
  border-radius: 30px 10px;  /* Horizontal radius 30px, vertical radius 10px */
}


.container {
  width: 200px;
  height: 200px;
  background-color: lightcoral;
  border-radius: 20px 30px 40px 50px;  /* Top-left 20px, top-right 30px, bottom-right 40px, bottom-left 50px */
}



border-image: <source> <slice> <width> <outset> <repeat>;

<source>: Specifies the image to use for the border.
<slice>: Defines how to slice the image.
<width>: Specifies the width of the border area.
<outset>: Determines how far the border image should extend beyond the border box.
<repeat>: Defines how the image is repeated (if it's smaller than the border area).

border-image: url('border-image.png');


border-image: url('border-image.png') 30%;








// outline 

element {
  outline-width: 2px;        /* Thickness of the outline */
  outline-style: solid;      /* Solid line */
  outline-color: blue;       /* Color of the outline */
}


element {
  outline: 3px dashed red;   /* Outline width, style, and color */
}


element {
  outline-width: 2px;
  outline-style: dotted;     /* Dotted outline */
  outline-color: green;
}

element:hover {
  outline-style: dashed;    /* Dashed outline on hover */
  outline-color: orange;
}


element:focus {
  outline: 3px solid #3498db; /* Bright blue outline on focus */
}


element {
  outline: 4px solid blue;    /* First outline */
  outline-offset: 5px;         /* Space between the outline and the element */
}

element {
  border: 2px solid #9b59b6;   /* Purple border */
  outline: 3px dashed #f39c12; /* Yellow dashed outline */
}





// padding

element {
  padding: 20px; /* 20px padding on all four sides */
}


element {
  padding-top: 10px;    /* Padding at the top */
  padding-right: 15px;  /* Padding on the right */
  padding-bottom: 20px; /* Padding at the bottom */
  padding-left: 25px;   /* Padding on the left */
}


element {
  padding: 10px 20px 30px 40px;  /* Top | Right | Bottom | Left */
}


element {
  padding: 15px 30px;  /* 15px for top and bottom, 30px for left and right */
}


.element {
  padding: auto;  /* Centers the content (works in combination with flex or grid layout) */
}


element {
  padding: calc(10px + 2vw);  /* Padding increases with viewport width */
}






// margin

element {
  margin: 20px; /* 20px margin on all four sides */
}


element {
  margin-top: 10px;    /* Margin at the top */
  margin-right: 15px;  /* Margin on the right */
  margin-bottom: 20px; /* Margin at the bottom */
  margin-left: 25px;   /* Margin on the left */
}


element {
  margin: 10px 20px 30px 40px;  /* Top | Right | Bottom | Left */
}


element {
  margin: 15px 30px;  /* 15px for top and bottom, 30px for left and right */
}


.container {
  width: 80%;
  margin: 0 auto;  /* Top and bottom margin 0, left and right margin auto */
}


element {
  margin-top: -10px;   /* Pulls the element 10px upwards */
  margin-left: -20px;  /* Pulls the element 20px to the left */
}






// height and width 

element {
  height: 200px;  /* 200px height */
  width: 300px;   /* 300px width */
}


element {
  width: 100%;           /* Width 100% of parent */
  max-width: 500px;      /* Limit width to 500px */
  min-width: 200px;      /* Minimum width 200px */
  height: 200px;         /* Fixed height */
  max-height: 300px;     /* Limit height to 300px */
  min-height: 150px;     /* Minimum height 150px */
}


element {
  box-sizing: border-box;
  width: 300px;       /* Total width including padding and border */
  height: 200px;      /* Total height including padding and border */
  padding: 20px;      /* Adds 20px padding to all sides */
  border: 5px solid black;  /* 5px border */
}


element {
  width: fit-content;  /* Width adjusts to fit content */
  height: min-content; /* Height adjusts to the minimum required for content */
}


.element {
  width: 100%;
  height: auto;      /* Let the height adjust automatically */
  aspect-ratio: 16/9; /* Maintain a 16:9 aspect ratio */
}






// box sizing 

.element {
  width: 200px;  /* Total width including padding and border */
  padding: 20px; /* Padding inside the element */
  border: 5px solid #000; /* Border around the element */
  box-sizing: border-box;
  /* Total width = 200px (content + padding + border) */
}


* {
  box-sizing: border-box;
}




// overflow

overflow: visible | hidden | scroll | auto | inherit;


.container {
  width: 300px;
  height: 200px;
  background-color: lightgray;
  overflow: visible;  /* Content will overflow and be visible outside the box */
}

.container {
  width: 300px;
  height: 200px;
  background-color: lightgray;
  overflow-x: scroll;  /* Horizontal scrollbar always visible */
  overflow-y: hidden;  /* Vertical overflow is hidden */
}


.container {
  width: 300px;
  height: 200px;
  background-color: lightgray;
  overflow-x: auto;   /* Horizontal scrollbar only if content overflows */
  overflow-y: scroll; /* Vertical scrollbar always visible */
}





// box shadow

box-shadow: h-offset v-offset blur spread color inset;


.container {
  width: 300px;
  height: 200px;
  background-color: lightblue;
  box-shadow: 10px 10px 15px rgba(0, 0, 0, 0.3);
}






// float 

float: left | right | none | inherit;


}

.image {
  width: 200px;
  height: 150px;
  float: left; /* Floats the image to the left */
  margin-right: 20px; /* Adds space to the right of the image */
}

.clearfix {
  clear: both; /* Clears both left and right floats */
}






// font

font: [font-style] [font-variant] [font-weight] [font-size] [line-height] [font-family];

p {
  font: italic small-caps bold 16px/1.5 Arial, sans-serif;
}


em {
  font: italic 16px 'Times New Roman', serif;
}


h4 {
  font-weight: bold;
  font-style: oblique;
  font-size: 22px;
  line-height: 1.8;
}




// font varient 

font-variant: normal | small-caps | inherit;


p {
  font-variant: small-caps;
}


// font face

@font-face {
  font-family: <font-name>;
  src: url(<font-file>) format(<font-format>);
  font-weight: <weight>;
  font-style: <style>;
}


@font-face {
  font-family: 'MyCustomFont';
  src: url('fonts/mycustomfont.woff2') format('woff2'),
       url('fonts/mycustomfont.woff') format('woff');
}






// google font 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google Fonts Example</title>
    <!-- Google Fonts link -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
</head>
<body>
    <h1 style="font-family: 'Roboto', sans-serif;">This is a heading with the Roboto font</h1>
    <p style="font-family: 'Roboto', sans-serif;">This is a paragraph with the Roboto font applied.</p>
</body>
</html>









// text

h1 {
  text-align: center;
}



// text decoration

text-decoration: none | underline | overline | line-through | blink;


h2 {
  text-decoration: underline double green;
  text-decoration-thickness: 4px; /* Set thickness of underline */
  text-decoration-thickness: 4px;            /* Sets the thickness of the underline */
  text-decoration-offset: 5px; /* Moves the underline 5px below the text */



}



a {
  text-decoration-line: underline;
  text-decoration-color: red;
  text-decoration-style: dashed;
}


a {
  text-decoration: underline; /* Underlines the text */
}


h2 {
  text-transform: uppercase; /* Converts text to uppercase */
}


h3 {
  letter-spacing: 2px; /* Adds 2px space between letters */
}


p {
  line-height: 1.6; /* Sets the line height to 1.6 times the font size */
}


p {
  text-indent: 30px; /* Indents the first line by 30px */
}


h1 {
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); /* Horizontal, vertical, blur radius, color */
}



white-space: normal | nowrap | pre | pre-wrap | pre-line | break-spaces;

p {
  white-space: nowrap; /* Prevents the text from wrapping */
}


p {
  word-spacing: 5px; /* Adds 5px of space between words */
}


// writing-mode: horizontal-tb | vertical-rl | vertical-lr;

div {
  writing-mode: vertical-rl; /* Text flows vertically from right to left */
}


div {
  direction: rtl; /* Right to left text direction */
}


h1 {

  color: #ff6347; /* Tomato color */
  text-align: center;
  text-transform: uppercase;
  letter-spacing: 2px;
  text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.5); /* Shadow effect */
}






// text overflow

text-overflow: clip | ellipsis | string;

p {
  text-overflow: clip;
}


p {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}








// word wrap and word-break

word-wrap: normal | break-word;

div {
  word-wrap: break-word;
}


overflow-wrap: normal | break-word;

div {
  overflow-wrap: break-word;
}


word-break: normal | break-all | keep-all;


p {
  word-break: break-all;
}


div {
  word-break: keep-all;
}


div {
  overflow-wrap: break-word; /* Allows long words to break */
  word-break: break-all;     /* Breaks words at any point if necessary */
}






// white space








// column-count: <number>;
// column-rule: <width> <style> <color>;


div {
  column-count: 3;
}

div {
  column-width: 200px;
}

div {
  columns: 3 200px;
}

div {
  column-count: 2;
  column-gap: 15px;
}

column-rule: <width> <style> <color>;

div {
  column-count: 3;
  column-gap: 20px;
  column-rule: 2px solid black;
}






// caret color 


input, textarea {
  caret-color: color;
}


input, textarea {
    caret-color: blue; /* Set the caret color to blue */
    padding: 8px;
    border: 1px solid #ccc;
    font-size: 16px;
  }







  // import rule 

  @import url("path/to/stylesheet.css");


@import "path/to/stylesheet.css";





// icon font 









// scrollbar


Key CSS Properties for Custom Scrollbars
scrollbar-width: Controls the width of the scrollbar (for Firefox).
scrollbar-color: Allows you to define the color of the scrollbar thumb and track (for Firefox).
::-webkit-scrollbar: Targeting the entire scrollbar (for WebKit-based browsers like Chrome, Safari, and Edge).
::-webkit-scrollbar-thumb: Styles the draggable thumb of the scrollbar (for WebKit-based browsers).
::-webkit-scrollbar-track: Styles the track (the part the thumb moves within) (for WebKit-based browsers).
::-webkit-scrollbar-button: Styles the buttons at the ends of the scrollbar (for WebKit-based browsers).
::-webkit-scrollbar-corner: Styles the bottom corner of the scrollbar when both horizontal and vertical scrollbars appear (for WebKit-based browsers).




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    /* Target the entire scrollbar */
    ::-webkit-scrollbar {
      width: 12px; /* Set the width of the vertical scrollbar */
      height: 12px; /* Set the height of the horizontal scrollbar */
    }

    /* Customize the scrollbar thumb (the draggable part) */
    ::-webkit-scrollbar-thumb {
      background-color: #3498db; /* Blue thumb color */
      border-radius: 10px; /* Rounded corners for thumb */
      border: 3px solid #fff; /* White border around the thumb */
    }

    /* Customize the scrollbar track (the area the thumb moves in) */
    ::-webkit-scrollbar-track {
      background-color: #f1f1f1; /* Light grey track color */
      border-radius: 10px; /* Rounded corners for track */
    }

    /* Optional: Style the buttons on the scrollbar (arrows) */
    ::-webkit-scrollbar-button {
      background-color: #3498db;
      display: none; /* Hide the buttons */
    }

    /* Optional: Style the bottom corner where horizontal and vertical scrollbars meet */
    ::-webkit-scrollbar-corner {
      background-color: #f1f1f1;
    }









    /* Style the content area with overflow to show the scrollbar */
    .content {
      height: 300px;
      overflow: auto;
      padding: 20px;
      background-color: #ececec;
    }
  </style>
  <title>Custom Scrollbar Example</title>
</head>
<body>

  <div class="content">
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam.</p>
    <p>Nulla quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed augue semper porta.</p>
    <p>Nulla sit amet est eu augue hendrerit fringilla at et orci. Aenean sollicitudin erat et felis malesuada, a vulputate leo ullamcorper.</p>
    <p>Morbi auctor, leo vel tincidunt consequat, enim arcu gravida libero, at volutpat augue nulla non arcu. Quisque sed nulla eget nunc mollis tincidunt.</p>
  </div>

</body>
</html>



// file selector button 

input[type="file"]::file-selector-button {
  background-color: #4CAF50;       /* Green background */
  color: white;                    /* White text */
  border: none;                    /* Remove default border */
  padding: 10px 20px;               /* Add padding */
  font-size: 16px;                  /* Set font size */
  cursor: pointer;                 /* Change cursor to pointer */
  border-radius: 5px;               /* Add rounded corners */
}

input[type="file"]::file-selector-button:hover {
  background-color: #45a049;       /* Darker green on hover */
}







// is pseudo 

/* The following applies to any element that is either a p, h1, or div */
:is(p, h1, div) {
  color: blue;
}


/* Selects <p>, <h1>, or <h2> elements inside .content that are not disabled */
.content :is(p, h1, h2):not([disabled]) {
  font-size: 16px;
}







// focus-within

parent-element:focus-within {
  /* styles */
}


.form-group:focus-within {
  border: 2px solid #4CAF50; /* Green border when any child is focused */
  background-color: #f0f8f0; /* Light background color when any child is focused */
}

input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}


.form-group:focus-within {
  background-color: #e0ffe0;  /* Light green background when any input is focused */
  border: 2px solid #008000;  /* Green border */
}

label {
  font-size: 16px;
  color: #333;
  transition: color 0.3s ease;
}

.form-group:focus-within label {
  color: #008000;  /* Change label color when input is focused */
}















// display table 

element {
  display: table;
}


<div class="table">
  <div class="row">
    <div class="cell">Row 1, Cell 1</div>
    <div class="cell">Row 1, Cell 2</div>
  </div>
  <div class="row">
    <div class="cell">Row 2, Cell 1</div>
    <div class="cell">Row 2, Cell 2</div>
  </div>
</div>




.table {
  display: table; /* Behaves like a <table> element */
  width: 100%;    /* Full width */
  border-collapse: collapse; /* Optional, for controlling table borders */
}

.row {
  display: table-row; /* Behaves like a <tr> element */
}

.cell {
  display: table-cell; /* Behaves like a <td> element */
  padding: 10px;
  border: 1px solid black;
}






// accent color 

accent-color: <color>;


:root {
  --accent-color: #FF6347; /* Tomato Red */
}

input[type="checkbox"],
input[type="radio"] {
  accent-color: var(--accent-color);
}








// prefers-color-scheme

@media (prefers-color-scheme: light) {
  /* Styles for light mode */
}

@media (prefers-color-scheme: dark) {
  /* Styles for dark mode */
}


/* Default styles (for light mode) */
body {
  background-color: white;
  color: black;
}

/* Dark mode styles */
@media (prefers-color-scheme: dark) {
  body {
    background-color: #121212;
    color: white;
  }

  a {
    color: #BB86FC;
  }
}



/* Light Mode */
@media (prefers-color-scheme: light) {
  body {
    background-color: #f0f0f0;
    color: #333;
  }
  button {
    background-color: #007BFF;
    color: white;
  }
}

/* Dark Mode */
@media (prefers-color-scheme: dark) {
  body {
    background-color: #181818;
    color: #e0e0e0;
  }
  button {
    background-color: #6200EE;
    color: white;
  }
}






:root {
  --background-color-light: #ffffff;
  --background-color-dark: #121212;
  --text-color-light: #000000;
  --text-color-dark: #ffffff;
}

body {
  background-color: var(--background-color-light);
  color: var(--text-color-light);
}

/* Dark mode */
@media (prefers-color-scheme: dark) {
  body {
    background-color: var(--background-color-dark);
    color: var(--text-color-dark);
  }
}




if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
  console.log('User prefers dark mode');
} else {
  console.log('User prefers light mode');
}
















// back drop filter 

element {
  backdrop-filter: none | <filter-function> [<filter-function>]*;
}


body {
  background-image: url('background.jpg');
  background-size: cover;
  height: 100vh;
  margin: 0;
}

.backdrop-container {
  position: relative;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);  /* Semi-transparent black background */
}

.content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  padding: 20px;
  text-align: center;
  color: white;
  backdrop-filter: blur(10px);  /* Apply backdrop blur effect */
  border-radius: 10px;
}










// scroll behavior

scroll-behavior: auto | smooth;


html {
  scroll-behavior: smooth;
}





// scroll snap

Key Properties for Scroll Snap
There are several properties involved in scroll snapping:

scroll-snap-type: Defines the scroll snapping behavior on the scroll container.
scroll-snap-align: Specifies the alignment of the child element when it snaps.
scroll-snap-stop: Determines whether the scroll should stop at a snap point or continue scrolling after passing it (optional).
scroll-snap-margin: (Optional) Provides space around the snap area for better control.


.container {
  scroll-snap-type: mandatory | proximity;
  scroll-snap-type: x mandatory;
}



.item {
  scroll-snap-align: start | center | end;
}


.item {
  scroll-snap-align: start | center | end;
}



<div class="scroll-container">
  <div class="item">Item 1</div>
  <div class="item">Item 2</div>
  <div class="item">Item 3</div>
  <div class="item">Item 4</div>
</div>



.scroll-container {
  display: flex;
  overflow-x: scroll;
  scroll-snap-type: x mandatory; /* Scroll horizontally with mandatory snap */
}

.item {
  width: 100vw; /* Each item takes the full width of the viewport */
  height: 100vh; /* Each item takes the full height of the viewport */
  scroll-snap-align: center; /* Align each item to the center of the viewport */
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: lightgray;
  border: 1px solid #333;
}










// text orientation

text-orientation: mixed | upright;


div {
  writing-mode: vertical-rl; /* Vertical writing mode (right to left) */
  text-orientation: mixed;   /* Characters are rotated, but punctuation remains upright */
}


div {
  writing-mode: vertical-rl;  /* Vertical writing mode (right to left) */
  text-orientation: upright;  /* All characters remain upright */
}









// display mode 

@media (display-mode: <mode>) {
  /* Styles to apply when the app is in the specified display mode */
}




@media (display-mode: fullscreen) {
  header, footer {
    display: none; /* Hide header and footer in full-screen mode */
  }
}




@media (display-mode: standalone) {
  body {
    background-color: #f4f4f4;
    font-family: 'Arial', sans-serif;
  }

  .nav-bar {
    display: none; /* Hide the nav bar in standalone mode */
  }
}



@media (display-mode: minimal-ui) {
  .header {
    font-size: 14px;
  }

  .footer {
    padding: 5px;
  }
}












// fullscreen 

/* Default styles */
div {
  width: 50%;
  height: 50%;
  background-color: lightblue;
  transition: all 0.3s ease;
}

/* Styles when the div is in full-screen mode */
div:fullscreen {
  width: 100%;
  height: 100%;
  background-color: #3498db;
}






video {
  width: 100%;
  height: auto;
}

/* Styles when the video is in full-screen mode */
video:fullscreen {
  width: 100%;
  height: 100%;
  background-color: black;
  border: none;
}



const video = document.querySelector('video');

video.addEventListener('click', () => {
  if (video.requestFullscreen) {
    video.requestFullscreen();  // Makes the video element go full-screen
  } else if (video.mozRequestFullScreen) {  // For Firefox
    video.mozRequestFullScreen();
  } else if (video.webkitRequestFullscreen) {  // For Chrome, Safari
    video.webkitRequestFullscreen();
  } else if (video.msRequestFullscreen) {  // For IE/Edge
    video.msRequestFullscreen();
  }
});

// Detect when the video enters or exits full-screen mode
document.addEventListener('fullscreenchange', () => {
  if (document.fullscreenElement) {
    console.log('The video is in full-screen mode.');
  } else {
    console.log('The video exited full-screen mode.');
  }
});










// min max clamp 


div {
  width: min(50%, 400px);
}



div {
  width: max(200px, 20%);
}



div {
  font-size: clamp(14px, 4vw, 24px);
}








// orientation


@media (orientation: portrait) {
  /* Styles for portrait mode */
}

@media (orientation: landscape) {
  /* Styles for landscape mode */
}



/* Default image size */
img {
  width: 100%;
  height: auto;
}

/* Styles for landscape orientation */
@media (orientation: landscape) {
  img {
    width: 80%;  /* In landscape, make the image smaller */
  }
}

/* Styles for portrait orientation */
@media (orientation: portrait) {
  img {
    width: 100%;  /* In portrait, use full width */
  }
}








// : has pseudo 

parent:has(child) {
  /* Styles to apply to the parent element if it contains the child */
}




/* Style the parent div if it contains an input field */
div:has(input) {
  background-color: lightblue;
}


/* Style the parent div if it contains both a button and a p tag */
div:has(button, p) {
  border: 2px solid red;
}






// print media 


@media print {
  /* Styles for printing */
}


@media print {
  body {
    font-size: 12pt;
    line-height: 1.5;
    color: black;
    background-color: white;
  }

  /* Hide navigation links on print */
  nav, .no-print {
    display: none;
  }

  /* Ensure images are not too large */
  img {
    max-width: 100%;
    height: auto;
  }
}




@media print {
  /* Add a page break before certain elements */
  h1 {
    page-break-before: always;
  }

  /* Prevent page breaks inside specific elements */
  .no-break {
    page-break-inside: avoid;
  }

  /* Control page breaks after elements */
  p {
    page-break-after: auto;
  }
}





// @page 

@page {
  /* Styles for the printed page */
}



@page {
  margin: 1in;  /* Sets a 1-inch margin on all sides */
}


@page {
  size: A4 landscape;  /* Set the page size to A4 and the orientation to landscape */
}


@media print {
  .no-break {
    break-before: avoid; /* Prevent a page break before this element */
    break-after: avoid;  /* Prevent a page break after this element */
  }
}


.container {
  column-count: 3; /* Create a 3-column layout */
  column-gap: 1rem;
}

h2 {
  break-before: always; /* Force a column break before each <h2> */
}

p {
  break-after: always; /* Force a column break after each <p> */
}


.container {
  column-count: 3;  /* Create a 3-column layout */
  column-gap: 1rem;
}

.item {
  break-inside: avoid-column; /* Prevent the item from being split across columns */
}



