// 1 - inline css 
// 2 - <style> tag Internal css 
// 3 - CSS selectors
// 4 - root variable
// 5 - Specificity Calculation
// 6 - css counter 


















// 1 - inline css 

<p style="font-size: 18px; color: green;">This is a paragraph with inline CSS styling.</p>








// 2 - <style> tag Internal css 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Style Tag Example</title>

    <!-- Link to the external CSS file -->
    <link rel="stylesheet" href="style.css">


    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
        }

        h1 {
            color: darkblue;
            text-align: center;
        }

        p {
            font-size: 16px;
            color: darkgreen;
        }

        .highlight {
            background-color: yellow;
            font-weight: bold;
        }

        #special {
            color: red;
        }
    </style>
</head>
<body>
    <h1>Welcome to My Page</h1>
    <p>This is a paragraph with normal text.</p>
    <p class="highlight">This paragraph has a highlighted background.</p>
    <p id="special">This paragraph has a special red color.</p>
</body>
</html>



<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <!-- Default Styles -->
  <link rel="stylesheet" href="styles.css">

  <!-- Styles for Small Screens (Mobile) -->
  <link rel="stylesheet" href="mobile.css" media="screen and (max-width: 600px)">

  <!-- Styles for Medium Screens (Tablets) -->
  <link rel="stylesheet" href="tablet.css" media="screen and (min-width: 601px) and (max-width: 1024px)">

  <!-- Styles for Large Screens (Desktops) -->
  <link rel="stylesheet" href="desktop.css" media="screen and (min-width: 1025px)">
</head>











// 3 - CSS selectors


 /* Basic Selectors */

 * {
 margin: 0;
 padding: 0;
 box-sizing: border-box;
}

body {
 font-family: Arial, sans-serif;
 background-color: #f4f4f4;
}

h1 {
 color: darkblue;
 text-align: center;
}

.highlight {
 background-color: yellow;
 font-weight: bold;
}

#special {
 color: red;
 font-size: 20px;
}





/* Combinator Selectors */


div p {
 color: green;
}

Child Selector (>): Selects direct child elements of a specified element.

div > p {
 font-weight: bold;
}

h1 + p {
 color: purple;
}

h1 ~ p {
 color: gray;
}







/* Attribute Selectors */



a[href] {
 color: blue;
}

a[href^="https"] {
 font-style: italic;
}

a[href$=".com"] {
 font-weight: bold;
}

input[type="text"] {
 border: 2px solid blue;
}

img[src*="logo"] {
 width: 100px;
}







/* Pseudo-classes */

Pseudo-Classes:

:hover: The link will turn red when hovered over.
:focus: The input field turns yellow when focused.
:active: The button turns green when clicked.
:first-child: The first paragraph becomes bold.
:last-child: The last paragraph turns blue.
:nth-child(n): The second list item turns red.
:not(selector): Any paragraph that does not have the class .special turns gray.
:checked: The checkbox turns yellow when checked.
:disabled: The disabled input field turns light gray.


Pseudo-Elements:

::before: Adds "Note: " before the special paragraph.
::after: Adds "(End)" after the second paragraph.
::first-letter: Makes the first letter of a paragraph larger and red.
::first-line: Makes the first line of a paragraph bold.
::selection: Changes the background to yellow and the text to black when text is selected.

input::placeholder
input:placeholder-shown

<style>
/* Pseudo-Classes */
a:hover {
  color: red;
}

input:focus {
  background-color: yellow;
}

button:active {
  background-color: green;
}

p:first-child {
  font-weight: bold;
}

p:last-child {
  color: blue;
}

li:nth-child(2) {
  color: red;
}

p:not(.special) {
  color: gray;
}

input:checked {
  background-color: yellow;
}

input:disabled {
  background-color: lightgray;
}

/* Pseudo-Elements */
p::before {
  content: "Note: ";
  font-weight: bold;
  color: red;
}

p::after {
  content: " (End)";
  color: green;
}

p::first-letter {
  font-size: 3em;
  color: red;
}

p::first-line {
  font-weight: bold;
}

::selection {
  background-color: yellow;
  color: black;
}


ul::marker {
color: red;          /* Change the color of the bullet */
font-size: 20px;     /* Increase the size of the bullet */
}


input::placeholder {
  color: gray;
  font-style: italic;
  font-size: 16px;
}



input:placeholder-shown {
background-color: #f0f0f0;  /* Light background color when placeholder is visible */
border: 2px solid #ccc;     /* Border color */
}

</style>




// file selector button 

input[type="file"]::file-selector-button {
  background-color: #4CAF50;       /* Green background */
  color: white;                    /* White text */
  border: none;                    /* Remove default border */
  padding: 10px 20px;               /* Add padding */
  font-size: 16px;                  /* Set font size */
  cursor: pointer;                 /* Change cursor to pointer */
  border-radius: 5px;               /* Add rounded corners */
}

input[type="file"]::file-selector-button:hover {
  background-color: #45a049;       /* Darker green on hover */
}


// is pseudo 

/* The following applies to any element that is either a p, h1, or div */
:is(p, h1, div) {
  color: blue;
}


/* Selects <p>, <h1>, or <h2> elements inside .content that are not disabled */
.content :is(p, h1, h2):not([disabled]) {
  font-size: 16px;
}




// focus-within

parent-element:focus-within {
  /* styles */
}


.form-group:focus-within {
  border: 2px solid #4CAF50; /* Green border when any child is focused */
  background-color: #f0f8f0; /* Light background color when any child is focused */
}

input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}


.form-group:focus-within {
  background-color: #e0ffe0;  /* Light green background when any input is focused */
  border: 2px solid #008000;  /* Green border */
}

label {
  font-size: 16px;
  color: #333;
  transition: color 0.3s ease;
}

.form-group:focus-within label {
  color: #008000;  /* Change label color when input is focused */
}



// : has pseudo 

parent:has(child) {
  /* Styles to apply to the parent element if it contains the child */
}




/* Style the parent div if it contains an input field */
div:has(input) {
  background-color: lightblue;
}


/* Style the parent div if it contains both a button and a p tag */
div:has(button, p) {
  border: 2px solid red;
}










// 4 - root variable

/* :root for CSS Variables */
:root {
 --main-color: #3498db;
}

.using-variable {
 color: var(--main-color);
}











// 5 - Specificity Calculation


p {
  color: blue !important; /* This will override any other color rule for <p> elements */
}

Inline styles (e.g., style="..." in HTML) - highest priority.
IDs (#id) - more specific than classes, attributes, and elements.
Classes, attributes, and pseudo-classes (.class, [type="text"], :hover) - these are less specific than IDs.
Elements and pseudo-elements (div, h1, ::before, ::after) - the least specific.











// 6 - css counter 

Basic Syntax:
To use CSS counters, you need two main functions:

counter-reset: Initializes or resets a counter to a specific value.
counter-increment: Increments the counter by a specified value.


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    /* Reset the counter for the entire list */
    ol {
      counter-reset: item;
    }

    /* Increment the counter for each list item */
    li {
      counter-increment: item;
      margin-bottom: 10px;
    }

    /* Display the counter value before each list item */
    li::before {
      content: counter(item) ". ";
      font-weight: bold;
    }
  </style>
  <title>CSS Counter Example</title>
</head>
<body>

  <ol>
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
    <li>Item 4</li>
  </ol>

</body>
</html>




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    /* Reset the main list counter */
    ol {
      counter-reset: section;
    }

    /* Increment the counter for each main list item */
    ol > li {
      counter-increment: section;
      margin-bottom: 10px;
    }

    /* Display the counter value before the main list items */
    ol > li::before {
      content: "Section " counter(section) ": ";
      font-weight: bold;
    }

    /* Reset and increment the counter for nested lists */
    ol > li ol {
      counter-reset: subsection;
    }

    ol > li ol > li {
      counter-increment: subsection;
    }

    /* Display the nested counter */
    ol > li ol > li::before {
      content: counter(section) "." counter(subsection) " ";
      font-weight: normal;
    }
  </style>
  <title>Nested CSS Counters</title>
</head>
<body>

  <ol>
    <li>Introduction
      <ol>
        <li>Overview</li>
        <li>Details</li>
      </ol>
    </li>
    <li>Methods
      <ol>
        <li>Method 1</li>
        <li>Method 2</li>
      </ol>
    </li>
    <li>Conclusion</li>
  </ol>

</body>
</html>








