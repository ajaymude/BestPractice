// 1 - table list style
// 2 - background 
// 3 - gradient 
// 4 - opacity , visibility 
// 5 - display
// 6 -css position
// 7 - z index
// 8 - resize: <value>;
// 9 - cursor: <value>;
// 10 - units
// 11 - variable in css 
// 12 - clip path 
// 13 - filter







// 1 - table  list style

// table 

table {
    width: 100%;
    border-collapse: collapse; /* Ensures borders are collapsed into a single line */
    border-collapse: separate; /* Keeps table borders separate */
    border-spacing: 5px; /* Adds space between cells */
    table-layout: auto; /* Default */
}

th, td {
    padding: 8px 12px;
    border: 1px solid #ccc; /* Light gray border */
    text-align: left; /* Align text to the left in cells */
}

th {
    background-color: #f2f2f2; /* Light gray background for headers */
    vertical-align: middle; /* Align span vertically */
}


caption {
    font-size: 1.5em; /* Larger font size */
    font-weight: bold; /* Make the caption bold */
    text-align: center; /* Center the caption */
    padding: 10px; /* Add padding around the caption */
    background-color: #f2f2f2; /* Light background color */
    color: #333; /* Dark text color */
    border: 2px solid #ccc; /* Border around the caption */
}

list-style: <list-style-type> <list-style-position> <list-style-image>;


<list-style-type>:

Defines the type of list marker (bullet, number, etc.).
Common values include:
disc – Solid circle (default for unordered lists).
circle – Hollow circle.
square – Solid square.
decimal – Numbers (default for ordered lists).
lower-alpha – Lowercase letters (e.g., a, b, c).
upper-alpha – Uppercase letters (e.g., A, B, C).
lower-roman – Lowercase Roman numerals (e.g., i, ii, iii).
upper-roman – Uppercase Roman numerals (e.g., I, II, III).

none – No marker.
<list-style-position>:

Specifies the position of the marker.
outside (default) – The marker is outside the list item, with a space before the text.
inside – The marker is placed inside the list item, with no space before the text.

<list-style-image>:

Specifies an image to be used as the list marker.
You can provide a URL pointing to an image file (e.g., url('image.png')).
If none is used, no image will be used.


ul {
  list-style: square inside;
}


ol {
  list-style: upper-roman inside;
}


ul {
  list-style-image: url('bullet.png');
}


ol {
  list-style: decimal outside;
}


ul {
  list-style-image: url('marker.png');
}









// 2 - background 

background: <background-color> <background-image> <background-position> <background-size> <background-repeat> <background-attachment> <background-origin> <background-clip>;


background-color: red;

background-image: url('image.jpg');

background-position: center center; /* Center of the element */

background-size: cover; /* Background image will cover the entire element */

background-repeat: no-repeat; /* Prevents background image from repeating */

background-attachment: fixed; /* The background will stay fixed while scrolling */

background-origin: content-box;

background-clip: content-box;


div {
  background: #ff6347 url('image.jpg') no-repeat center center / cover fixed;
}










// 3 - gradient 

background: linear-gradient(direction, color-stop1, color-stop2, ...);

background: linear-gradient(to bottom, #ff7e5f, #feb47b); /* Red to Yellow */

background: linear-gradient(to right, #ff7e5f, #feb47b, #6a11cb); /* Red to Yellow to Purple */



background: radial-gradient(shape size at position, start-color, ..., end-color);

background: radial-gradient(circle, #ff7e5f, #feb47b); /* From red to yellow */

background: radial-gradient(ellipse, #ff7e5f, #feb47b); /* Elliptical gradient */

background: radial-gradient(farthest-corner at 50% 50%, #ff7e5f, #feb47b);

background: repeating-linear-gradient(to right, #ff7e5f, #feb47b 10%, #6a11cb 20%);

background: linear-gradient(to right, rgba(255, 0, 0, 1), rgba(255, 0, 0, 0));



// background blend  mode  

normal: No blending, just the element's background color/image.
multiply: Multiplies the colors of the background images, resulting in darker colors.
screen: The inverse of multiply, making the colors lighter.
overlay: Combines multiply and screen. It darkens or lightens the background based on the colors.
darken: Chooses the darkest colors between the background images.
lighten: Chooses the lightest colors between the background images.
color-dodge: Brightens the background images based on the colors of the first image.
color-burn: Darkens the background images based on the first image.

element {
    background-blend-mode: mode;
}


// mix blend mode 

element {
    mix-blend-mode: mode;
}

.text {
    font-size: 50px;
    font-family: Arial, sans-serif;
    color: white;
    mix-blend-mode: multiply; /* Blend the text with the background */
}










// 4 - opacity , visibility 

element {
    opacity: value;
}

div {
    opacity: 0.5; /* 50% transparent */
}

// visiblity

visible: The element is visible (default value).
hidden: The element is hidden, but still occupies space in the layout.
collapse: This value is used for table rows and columns, where it behaves like 
          hidden but also removes the space occupied by the element.

element {
    visibility: value;
}










// 5 - display

block, inline, inline-block, flex, grid, none,

element {
    display: value;
}

div {
    display: block;
}










// 6 -css position

static, relative, absolute, fixed, and sticky.

element {
    position: value;
}


div {
    position: static;
}


div {
    position: relative;
    top: 20px; /* Moves the element 20px down from its normal position */
    left: 30px; /* Moves the element 30px to the right from its normal position */
}


div {
    position: absolute;
    top: 50px; /* 50px from the top of the nearest positioned ancestor */
    left: 100px; /* 100px from the left of the nearest positioned ancestor */
}


div {
    position: fixed;
    top: 0; /* Positioned at the top of the viewport */
    left: 0; /* Positioned at the left of the viewport */
}


div {
    position: sticky;
    top: 0; /* Becomes fixed at the top once scrolled to that point */
}






// 7 - z index

// this property used with postion 

element {
    z-index: value;
}


.box1 {
    position: relative;
    width: 100px;
    height: 100px;
    background-color: red;
    z-index: 1;
}
.box2 {
    position: relative;
    width: 100px;
    height: 100px;
    background-color: blue;
    z-index: 2;
}











// 8 - resize: <value>;

none: The element is not resizable. This is the default value for most elements.
both: Allows the element to be resized both horizontally and vertically.
horizontal: Allows the element to be resized only horizontally.
vertical: Allows the element to be resized only vertically.


textarea {
    resize: both;  /* Allows resizing both horizontally and vertically */
    width: 200px;
    height: 100px;
    padding: 10px;
}


.resizable-div {
    resize: both;  /* Allows both horizontal and vertical resizing */
    overflow: auto;  /* Enables scrolling when content exceeds the container's size */
    width: 300px;
    height: 200px;
    background-color: lightblue;
}







// 9 - cursor: <value>;

Default Values:

auto: The browser determines the cursor type (default behavior).
default: The default cursor (usually an arrow).

none: Hides the cursor when it's over the element (useful for elements where the cursor shouldn't be visible, like custom tools or games).
Pointer Cursors:

pointer: Typically used for links. It changes the cursor to a hand when hovering over elements that are clickable (like buttons or links).

Text Cursors:

text: The text selection cursor (usually an I-beam). It is used when hovering over selectable text.

Move Cursor:

move: Indicates that the element is draggable. It shows a cursor that looks like a 4-way arrow, indicating that the element can be moved.

Resize Cursors:

resize: A generic cursor indicating that resizing is possible.
n-resize: A north (upwards) resize cursor.
s-resize: A south (downwards) resize cursor.
e-resize: An east (rightwards) resize cursor.
w-resize: A west (leftwards) resize cursor.
ne-resize: A northeast diagonal resize cursor.
nw-resize: A northwest diagonal resize cursor.
se-resize: A southeast diagonal resize cursor.
sw-resize: A southwest diagonal resize cursor.
Crosshair:

crosshair: A simple crosshair cursor, often used in image editors or maps.

Wait Cursors:

wait: Indicates that the user should wait. Usually a spinning wheel or hourglass.

Help Cursors:

help: Usually a question mark cursor, indicating that help is available.


div {
    cursor: default;  /* Default arrow cursor */
}










// 10 - units

In CSS, measurement units are used to define the size, spacing, and positioning of elements on a webpage. CSS supports various units, which can be broadly categorized into absolute units, relative units, and viewport units. Below is a breakdown of the most commonly used measurement units in CSS.

1. Absolute Units
Absolute units are fixed and do not change based on the context or parent element. They are typically used for printing, or when you need precise measurements.

Common Absolute Units:
px (Pixels): Represents a fixed size in pixels. It's the most commonly used unit in web design and is often considered the standard for screen-based layouts.
10px, 100px, 200px, etc.
Example: width: 200px;
pt (Points): 1 point is 1/72 of an inch. Typically used in print media, not common in web design.
10pt, 12pt, etc.
Example: font-size: 12pt;
cm (Centimeters): 1 centimeter equals 10 millimeters. It is used for print layouts but less so for screen-based designs.
5cm, 10cm, etc.
Example: margin: 2cm;
mm (Millimeters): 1 millimeter equals 1/10 of a centimeter. Mostly used for print.
10mm, 20mm, etc.
Example: padding: 10mm;
in (Inches): 1 inch equals 2.54 cm. Often used in print, not for web design.
1in, 2in, etc.
Example: border-width: 0.5in;
pc (Picas): 1 pica equals 12 points or 1/6 of an inch. Used primarily for print.
1pc, 2pc, etc.
Example: font-size: 2pc;


2. Relative Units
Relative units are based on the size of another element or the environment (e.g., the parent element, the viewport, or the root font size). These units are more flexible and adaptable to different screen sizes and resolutions.

Common Relative Units:
em (Relative to the font size of the parent element): The size is relative to the font size of the element's parent. For example, 1em equals the font size of the parent element.
2em, 1.5em, etc.
Example: font-size: 2em; (this makes the font twice as large as the parent's font size)
rem (Relative to the font size of the root element): The size is relative to the font size of the root element (html), making it more predictable than em.
1rem, 1.5rem, 2rem, etc.
Example: font-size: 2rem; (this makes the font twice the size of the root element's font size, usually 16px by default)
vw (Viewport Width): The unit is relative to the width of the viewport. 1vw equals 1% of the viewport's width.
10vw, 50vw, 100vw, etc.
Example: width: 50vw; (this sets the element's width to 50% of the viewport's width)
vh (Viewport Height): The unit is relative to the height of the viewport. 1vh equals 1% of the viewport's height.
10vh, 50vh, 100vh, etc.
Example: height: 50vh; (this sets the element's height to 50% of the viewport's height)
vmin (Viewport Minimum): The unit is relative to the smaller of the viewport's width or height. 1vmin equals 1% of the smaller dimension.
10vmin, 50vmin, etc.
Example: font-size: 5vmin; (this sets the font size to 5% of the smaller viewport dimension)
vmax (Viewport Maximum): The unit is relative to the larger of the viewport's width or height. 1vmax equals 1% of the larger dimension.
10vmax, 50vmax, etc.
Example: font-size: 5vmax; (this sets the font size to 5% of the larger viewport dimension)


3. Percentage (%)
Percentage units are relative to the parent element or the parent’s dimensions. For example, setting width: 50% means the element will take up 50% of its parent element’s width.

Example: width: 50%; (this sets the element's width to 50% of the parent element's width)
4. Viewport-Based Units
Viewport units are relative to the size of the viewport, which is the visible area of the browser window.

vw (Viewport Width): 1vw = 1% of the viewport width.
vh (Viewport Height): 1vh = 1% of the viewport height.
vmin (Viewport Minimum): 1vmin = 1% of the smaller of the viewport’s width or height.
vmax (Viewport Maximum): 1vmax = 1% of the larger of the viewport’s width or height.




/* Example using px */
div {
  width: 300px;
  height: 200px;
}

/* Example using em */
div {
  font-size: 2em; /* 2 times the parent's font size */
}

/* Example using rem */
div {
  font-size: 2rem; /* 2 times the root font size */
}

/* Example using percentage */
div {
  width: 50%; /* 50% of the parent element’s width */
}

/* Example using viewport units */
div {
  width: 50vw; /* 50% of the viewport’s width */
  height: 50vh; /* 50% of the viewport’s height */
}










// 11 - variable in css 


--variable-name: value;

property: var(--variable-name);


:root {
  --primary-color: #3498db;
  --secondary-color: #2ecc71;
  --font-size: 16px;
}

body {
  font-size: var(--font-size);
  color: var(--primary-color);
}

h1 {
  color: var(--secondary-color);
}










// 12 - clip path 

https://bennettfeely.com/clippy/

clip-path: shape;

.element {
  clip-path: circle(50% at 50% 50%); /* Circle with a 50% radius centered in the element */
  width: 200px;
  height: 200px;
  background-color: red;
}


.element {
  clip-path: ellipse(50% 30% at 50% 50%);
  width: 200px;
  height: 200px;
  background-color: blue;
}


.element {
  clip-path: polygon(50% 0%, 100% 100%, 0% 100%);
  width: 200px;
  height: 200px;
  background-color: green;
}



// shape-outside: shape;


img {
  float: left;
  shape-outside: circle(50%);
  width: 150px;
  height: 150px;
  margin: 10px;
}


img {
  float: left;
  shape-outside: ellipse(50% 30% at 50% 50%);
  width: 200px;
  height: 120px;
  margin: 10px;
}


img {
  float: left;
  shape-outside: circle(50%);
  shape-margin: 20px; /* Adds margin around the circle */
  width: 200px;
  height: 200px;
  margin: 10px;
}






// 13 - filter

filter: filter-function(value);

blur() – Applies a Gaussian blur effect to the element.
brightness() – Adjusts the brightness of the element.
contrast() – Modifies the contrast of the element.
grayscale() – Converts the element to grayscale.
sepia() – Applies a sepia-tone effect to the element.
saturate() – Increases or decreases the saturation of the element.
invert() – Inverts the colors of the element.
hue-rotate() – Rotates the hue of the element’s colors.
opacity() – Sets the opacity of the element.
drop-shadow() – Adds a shadow effect around the element (similar to box-shadow).


img {
  filter: blur(5px);
}


img {
  filter: brightness(150%);
}


img {
  filter: contrast(200%);
}


img {
  filter: hue-rotate(90deg);
}







