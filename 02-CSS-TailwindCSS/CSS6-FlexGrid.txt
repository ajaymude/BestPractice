// 1 - flex
// 2 - grid 










// 1 - flex


  <div class="container">
    <div class="item item-1">Item 1</div>
    <div class="item item-2">Item 2</div>
    <div class="item item-3">Item 3</div>
  </div>

The possible values for flex-direction are:
row (default): Items are placed horizontally (left to right in left-to-right writing modes).
row-reverse: Items are placed horizontally, but in reverse order (right to left in left-to-right writing modes).
column: Items are placed vertically (top to bottom).
column-reverse: Items are placed vertically, but in reverse order (bottom to top).


1. flex-wrap
The flex-wrap property determines whether flex items should wrap onto 
multiple lines when there is insufficient space in the container. By default, 
flex items are placed in a single line (they will overflow if necessary).
 The flex-wrap property can be set to one of the following values:

nowrap (default): Flex items will not wrap. They will stay on a single line and overflow if there’s not enough space.
wrap: Flex items will wrap onto multiple lines if necessary.
wrap-reverse: Flex items will wrap onto multiple lines, but in reverse order (bottom to top for row direction or right to left for column direction).




2. flex-flow
The flex-flow property is a shorthand for setting both flex-direction and flex-wrap at the 
same time. It’s commonly used when you want to control both the direction and wrapping behavior of flex items.



 justify-content:
flex-start aligns the items at the left.
flex-end aligns the items at the right.
center puts the items in the middle.
space-between puts equal space between the items, but no space on the ends.
space-around puts equal space around each item, including the ends.
space-evenly distributes the space evenly across the items and the container.




// align item  single line 

flex-start aligns the items at the top (for a row layout).
flex-end aligns the items at the bottom (for a row layout).
center centers the items vertically (for a row layout).
stretch makes the items stretch to fill the container’s height.
baseline aligns the items along their text baseline.


 
 // align content multiple line 

 flex-start aligns the items at the top (for a row layout).
flex-end aligns the items at the bottom (for a row layout).
center centers the items vertically (for a row layout).
stretch makes the items stretch to fill the container’s height.
baseline aligns the items along their text baseline.



// align self 

auto: Default, follows the alignment of align-items.
flex-start: Aligns to the start of the container.
flex-end: Aligns to the end of the container.
center: Aligns to the center.
baseline: Aligns to the baseline of the container.
stretch: Stretches the item to fill the container.













.container {
    display: flex;
    flex-direction: row; /* Items are placed in a row (default) */
    flex-wrap: wrap;
    justify-content: flex-start;
    align-items: flex-start;
    flex-flow: column nowrap; /* Flex items in a column, no wrapping */

    align-content: flex-start;

  }


.item.special {
    align-self: center; /* This item will be vertically centered */
    background-color: lightcoral;
    order: 1; /* This item will appear second */
    flex-grow: 1;
    flex-basis: 200px; /* Set the initial size to 200px like max width  */
    flex-shrink: 1; /* Will shrink by default */


}























// 2 - grid 

<div class="grid-container">
<div class="grid-item">Item 1</div>
<div class="grid-item">Item 2</div>
<div class="grid-item">Item 3</div>
<div class="grid-item">Item 4</div>
<div class="grid-item">Item 5</div>
<div class="grid-item">Item 6</div>
</div>




.grid-container {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 60px auto 60px; /* Fixed header and footer, auto main content */

    gap: <row-gap> <column-gap>;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;  /* 20px gap for both rows and columns */
    grid-row-gap: 20px; /* 20px gap between rows */




    grid-template-areas: 
        "header header header"
        "main sidebar sidebar"
        "footer footer footer";
}
.grid-item {
    background-color: lightblue;
    padding: 20px;
}
.header { grid-area: header; }
.main { grid-area: main; }
.sidebar { grid-area: sidebar; }
.footer { grid-area: footer; }




.item1 {
  grid-column: 1 / 3; /* Spans across column 1 to column 3 */
  grid-row: 1; /* Positioned in row 1 */
}

.item2 {
  grid-column: 3; /* Positioned in column 3 */
  grid-row: 1 / 3; /* Spans across row 1 to row 3 */
}







